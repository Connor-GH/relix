
bin/kernel:     file format elf32-i386


Disassembly of section .text:

80100000 <multiboot_header>:
80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
80100006:	00 00                	add    %al,(%eax)
80100008:	fe 4f 52             	decb   0x52(%edi)
8010000b:	e4                   	.byte 0xe4

8010000c <entry>:

# Entering xv6 on boot processor, with paging off.
.globl entry
entry:
  # Turn on page size extension for 4Mbyte pages
  movl    %cr4, %eax
8010000c:	0f 20 e0             	mov    %cr4,%eax
  orl     $(CR4_PSE), %eax
8010000f:	83 c8 10             	or     $0x10,%eax
  movl    %eax, %cr4
80100012:	0f 22 e0             	mov    %eax,%cr4
  # Set page directory
  movl    $(V2P_WO(entrypgdir)), %eax
80100015:	b8 00 b0 10 00       	mov    $0x10b000,%eax
  movl    %eax, %cr3
8010001a:	0f 22 d8             	mov    %eax,%cr3
  # Turn on paging.
  movl    %cr0, %eax
8010001d:	0f 20 c0             	mov    %cr0,%eax
  orl     $(CR0_PG|CR0_WP), %eax
80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
  movl    %eax, %cr0
80100025:	0f 22 c0             	mov    %eax,%cr0

  # Set up the stack pointer.
  movl $(stack + KSTACKSIZE), %esp
80100028:	bc 90 a2 13 80       	mov    $0x8013a290,%esp

  # Jump to main(), and switch to executing at
  # high addresses. The indirect call is needed because
  # the assembler produces a PC-relative instruction
  # for a direct jump.
  mov $main, %eax
8010002d:	b8 b0 2e 10 80       	mov    $0x80102eb0,%eax
  jmp *%eax
80100032:	ff e0                	jmp    *%eax
80100034:	66 90                	xchg   %ax,%ax
80100036:	66 90                	xchg   %ax,%ax
80100038:	66 90                	xchg   %ax,%ax
8010003a:	66 90                	xchg   %ax,%ax
8010003c:	66 90                	xchg   %ax,%ax
8010003e:	66 90                	xchg   %ax,%ax

80100040 <binit>:
	struct buf head;
} bcache;

void
binit(void)
{
80100040:	55                   	push   %ebp
80100041:	89 e5                	mov    %esp,%ebp
80100043:	53                   	push   %ebx
	initlock(&bcache.lock, "bcache");

	// Create linked list of buffers
	bcache.head.prev = &bcache.head;
	bcache.head.next = &bcache.head;
	for (b = bcache.buf; b < bcache.buf + NBUF; b++) {
80100044:	bb 54 c5 10 80       	mov    $0x8010c554,%ebx
{
80100049:	83 ec 0c             	sub    $0xc,%esp
	initlock(&bcache.lock, "bcache");
8010004c:	68 40 80 10 80       	push   $0x80108040
80100051:	68 20 c5 10 80       	push   $0x8010c520
80100056:	e8 45 44 00 00       	call   801044a0 <initlock>
	bcache.head.next = &bcache.head;
8010005b:	83 c4 10             	add    $0x10,%esp
8010005e:	b8 1c b0 12 80       	mov    $0x8012b01c,%eax
	bcache.head.prev = &bcache.head;
80100063:	c7 05 6c b0 12 80 1c 	movl   $0x8012b01c,0x8012b06c
8010006a:	b0 12 80 
	bcache.head.next = &bcache.head;
8010006d:	c7 05 70 b0 12 80 1c 	movl   $0x8012b01c,0x8012b070
80100074:	b0 12 80 
	for (b = bcache.buf; b < bcache.buf + NBUF; b++) {
80100077:	eb 09                	jmp    80100082 <binit+0x42>
80100079:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80100080:	89 d3                	mov    %edx,%ebx
		b->next = bcache.head.next;
80100082:	89 43 54             	mov    %eax,0x54(%ebx)
		b->prev = &bcache.head;
		initsleeplock(&b->lock, "buffer");
80100085:	83 ec 08             	sub    $0x8,%esp
80100088:	8d 43 0c             	lea    0xc(%ebx),%eax
		b->prev = &bcache.head;
8010008b:	c7 43 50 1c b0 12 80 	movl   $0x8012b01c,0x50(%ebx)
		initsleeplock(&b->lock, "buffer");
80100092:	68 47 80 10 80       	push   $0x80108047
80100097:	50                   	push   %eax
80100098:	e8 d3 42 00 00       	call   80104370 <initsleeplock>
		bcache.head.next->prev = b;
8010009d:	a1 70 b0 12 80       	mov    0x8012b070,%eax
	for (b = bcache.buf; b < bcache.buf + NBUF; b++) {
801000a2:	8d 93 5c 10 00 00    	lea    0x105c(%ebx),%edx
801000a8:	83 c4 10             	add    $0x10,%esp
		bcache.head.next->prev = b;
801000ab:	89 58 50             	mov    %ebx,0x50(%eax)
		bcache.head.next = b;
801000ae:	89 d8                	mov    %ebx,%eax
801000b0:	89 1d 70 b0 12 80    	mov    %ebx,0x8012b070
	for (b = bcache.buf; b < bcache.buf + NBUF; b++) {
801000b6:	81 fb c0 9f 12 80    	cmp    $0x80129fc0,%ebx
801000bc:	75 c2                	jne    80100080 <binit+0x40>
	}
}
801000be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801000c1:	c9                   	leave
801000c2:	c3                   	ret
801000c3:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801000ca:	00 
801000cb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

801000d0 <bread>:
}

// Return a locked buf with the contents of the indicated block.
struct buf *
bread(uint dev, uint blockno)
{
801000d0:	55                   	push   %ebp
801000d1:	89 e5                	mov    %esp,%ebp
801000d3:	57                   	push   %edi
801000d4:	56                   	push   %esi
801000d5:	53                   	push   %ebx
801000d6:	83 ec 18             	sub    $0x18,%esp
801000d9:	8b 75 08             	mov    0x8(%ebp),%esi
801000dc:	8b 7d 0c             	mov    0xc(%ebp),%edi
	acquire(&bcache.lock);
801000df:	68 20 c5 10 80       	push   $0x8010c520
801000e4:	e8 a7 45 00 00       	call   80104690 <acquire>
	for (b = bcache.head.next; b != &bcache.head; b = b->next) {
801000e9:	8b 1d 70 b0 12 80    	mov    0x8012b070,%ebx
801000ef:	83 c4 10             	add    $0x10,%esp
801000f2:	81 fb 1c b0 12 80    	cmp    $0x8012b01c,%ebx
801000f8:	75 11                	jne    8010010b <bread+0x3b>
801000fa:	eb 24                	jmp    80100120 <bread+0x50>
801000fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
80100103:	81 fb 1c b0 12 80    	cmp    $0x8012b01c,%ebx
80100109:	74 15                	je     80100120 <bread+0x50>
		if (b->dev == dev && b->blockno == blockno) {
8010010b:	3b 73 04             	cmp    0x4(%ebx),%esi
8010010e:	75 f0                	jne    80100100 <bread+0x30>
80100110:	3b 7b 08             	cmp    0x8(%ebx),%edi
80100113:	75 eb                	jne    80100100 <bread+0x30>
			b->refcnt++;
80100115:	83 43 4c 01          	addl   $0x1,0x4c(%ebx)
			release(&bcache.lock);
80100119:	eb 3f                	jmp    8010015a <bread+0x8a>
8010011b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
	for (b = bcache.head.prev; b != &bcache.head; b = b->prev) {
80100120:	8b 1d 6c b0 12 80    	mov    0x8012b06c,%ebx
80100126:	81 fb 1c b0 12 80    	cmp    $0x8012b01c,%ebx
8010012c:	75 0d                	jne    8010013b <bread+0x6b>
8010012e:	eb 6e                	jmp    8010019e <bread+0xce>
80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
80100133:	81 fb 1c b0 12 80    	cmp    $0x8012b01c,%ebx
80100139:	74 63                	je     8010019e <bread+0xce>
		if (b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
8010013e:	85 c0                	test   %eax,%eax
80100140:	75 ee                	jne    80100130 <bread+0x60>
80100142:	f6 03 04             	testb  $0x4,(%ebx)
80100145:	75 e9                	jne    80100130 <bread+0x60>
			b->dev = dev;
80100147:	89 73 04             	mov    %esi,0x4(%ebx)
			b->blockno = blockno;
8010014a:	89 7b 08             	mov    %edi,0x8(%ebx)
			b->flags = 0;
8010014d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
			b->refcnt = 1;
80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
			release(&bcache.lock);
8010015a:	83 ec 0c             	sub    $0xc,%esp
8010015d:	68 20 c5 10 80       	push   $0x8010c520
80100162:	e8 c9 44 00 00       	call   80104630 <release>
			acquiresleep(&b->lock);
80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
8010016a:	89 04 24             	mov    %eax,(%esp)
8010016d:	e8 3e 42 00 00       	call   801043b0 <acquiresleep>
			return b;
80100172:	83 c4 10             	add    $0x10,%esp
	struct buf *b;

	b = bget(dev, blockno);
	if ((b->flags & B_VALID) == 0) {
80100175:	f6 03 02             	testb  $0x2,(%ebx)
80100178:	74 0e                	je     80100188 <bread+0xb8>
		iderw(b);
	}
	return b;
}
8010017a:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010017d:	89 d8                	mov    %ebx,%eax
8010017f:	5b                   	pop    %ebx
80100180:	5e                   	pop    %esi
80100181:	5f                   	pop    %edi
80100182:	5d                   	pop    %ebp
80100183:	c3                   	ret
80100184:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
		iderw(b);
80100188:	83 ec 0c             	sub    $0xc,%esp
8010018b:	53                   	push   %ebx
8010018c:	e8 7f 24 00 00       	call   80102610 <iderw>
80100191:	83 c4 10             	add    $0x10,%esp
}
80100194:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100197:	89 d8                	mov    %ebx,%eax
80100199:	5b                   	pop    %ebx
8010019a:	5e                   	pop    %esi
8010019b:	5f                   	pop    %edi
8010019c:	5d                   	pop    %ebp
8010019d:	c3                   	ret
	panic("bget: no buffers");
8010019e:	83 ec 0c             	sub    $0xc,%esp
801001a1:	68 4e 80 10 80       	push   $0x8010804e
801001a6:	e8 d5 01 00 00       	call   80100380 <panic>
801001ab:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

801001b0 <bwrite>:

// Write b's contents to disk.  Must be locked.
void
bwrite(struct buf *b)
{
801001b0:	55                   	push   %ebp
801001b1:	89 e5                	mov    %esp,%ebp
801001b3:	53                   	push   %ebx
801001b4:	83 ec 10             	sub    $0x10,%esp
801001b7:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if (!holdingsleep(&b->lock))
801001ba:	8d 43 0c             	lea    0xc(%ebx),%eax
801001bd:	50                   	push   %eax
801001be:	e8 8d 42 00 00       	call   80104450 <holdingsleep>
801001c3:	83 c4 10             	add    $0x10,%esp
801001c6:	85 c0                	test   %eax,%eax
801001c8:	74 0f                	je     801001d9 <bwrite+0x29>
		panic("bwrite");
	b->flags |= B_DIRTY;
801001ca:	83 0b 04             	orl    $0x4,(%ebx)
	iderw(b);
801001cd:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
801001d0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801001d3:	c9                   	leave
	iderw(b);
801001d4:	e9 37 24 00 00       	jmp    80102610 <iderw>
		panic("bwrite");
801001d9:	83 ec 0c             	sub    $0xc,%esp
801001dc:	68 5f 80 10 80       	push   $0x8010805f
801001e1:	e8 9a 01 00 00       	call   80100380 <panic>
801001e6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801001ed:	00 
801001ee:	66 90                	xchg   %ax,%ax

801001f0 <brelse>:

// Release a locked buffer.
// Move to the head of the MRU list.
void
brelse(struct buf *b)
{
801001f0:	55                   	push   %ebp
801001f1:	89 e5                	mov    %esp,%ebp
801001f3:	56                   	push   %esi
801001f4:	53                   	push   %ebx
801001f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if (!holdingsleep(&b->lock))
801001f8:	8d 73 0c             	lea    0xc(%ebx),%esi
801001fb:	83 ec 0c             	sub    $0xc,%esp
801001fe:	56                   	push   %esi
801001ff:	e8 4c 42 00 00       	call   80104450 <holdingsleep>
80100204:	83 c4 10             	add    $0x10,%esp
80100207:	85 c0                	test   %eax,%eax
80100209:	74 63                	je     8010026e <brelse+0x7e>
		panic("brelse");

	releasesleep(&b->lock);
8010020b:	83 ec 0c             	sub    $0xc,%esp
8010020e:	56                   	push   %esi
8010020f:	e8 fc 41 00 00       	call   80104410 <releasesleep>

	acquire(&bcache.lock);
80100214:	c7 04 24 20 c5 10 80 	movl   $0x8010c520,(%esp)
8010021b:	e8 70 44 00 00       	call   80104690 <acquire>
	b->refcnt--;
80100220:	8b 43 4c             	mov    0x4c(%ebx),%eax
	if (b->refcnt == 0) {
80100223:	83 c4 10             	add    $0x10,%esp
	b->refcnt--;
80100226:	83 e8 01             	sub    $0x1,%eax
80100229:	89 43 4c             	mov    %eax,0x4c(%ebx)
	if (b->refcnt == 0) {
8010022c:	85 c0                	test   %eax,%eax
8010022e:	75 2c                	jne    8010025c <brelse+0x6c>
		// no one is waiting for it.
		b->next->prev = b->prev;
80100230:	8b 53 54             	mov    0x54(%ebx),%edx
80100233:	8b 43 50             	mov    0x50(%ebx),%eax
80100236:	89 42 50             	mov    %eax,0x50(%edx)
		b->prev->next = b->next;
80100239:	8b 53 54             	mov    0x54(%ebx),%edx
8010023c:	89 50 54             	mov    %edx,0x54(%eax)
		b->next = bcache.head.next;
8010023f:	a1 70 b0 12 80       	mov    0x8012b070,%eax
		b->prev = &bcache.head;
80100244:	c7 43 50 1c b0 12 80 	movl   $0x8012b01c,0x50(%ebx)
		b->next = bcache.head.next;
8010024b:	89 43 54             	mov    %eax,0x54(%ebx)
		bcache.head.next->prev = b;
8010024e:	a1 70 b0 12 80       	mov    0x8012b070,%eax
80100253:	89 58 50             	mov    %ebx,0x50(%eax)
		bcache.head.next = b;
80100256:	89 1d 70 b0 12 80    	mov    %ebx,0x8012b070
	}

	release(&bcache.lock);
8010025c:	c7 45 08 20 c5 10 80 	movl   $0x8010c520,0x8(%ebp)
}
80100263:	8d 65 f8             	lea    -0x8(%ebp),%esp
80100266:	5b                   	pop    %ebx
80100267:	5e                   	pop    %esi
80100268:	5d                   	pop    %ebp
	release(&bcache.lock);
80100269:	e9 c2 43 00 00       	jmp    80104630 <release>
		panic("brelse");
8010026e:	83 ec 0c             	sub    $0xc,%esp
80100271:	68 66 80 10 80       	push   $0x80108066
80100276:	e8 05 01 00 00       	call   80100380 <panic>
8010027b:	66 90                	xchg   %ax,%ax
8010027d:	66 90                	xchg   %ax,%ax
8010027f:	90                   	nop

80100280 <consoleread>:
	}
}

int
consoleread(struct inode *ip, char *dst, int n)
{
80100280:	55                   	push   %ebp
80100281:	89 e5                	mov    %esp,%ebp
80100283:	57                   	push   %edi
80100284:	56                   	push   %esi
80100285:	53                   	push   %ebx
80100286:	83 ec 18             	sub    $0x18,%esp
80100289:	8b 5d 10             	mov    0x10(%ebp),%ebx
8010028c:	8b 75 0c             	mov    0xc(%ebp),%esi
	uint target;
	int c;

	iunlock(ip);
8010028f:	ff 75 08             	push   0x8(%ebp)
	target = n;
80100292:	89 df                	mov    %ebx,%edi
	iunlock(ip);
80100294:	e8 c7 18 00 00       	call   80101b60 <iunlock>
	acquire(&cons.lock);
80100299:	c7 04 24 20 c1 12 80 	movl   $0x8012c120,(%esp)
801002a0:	e8 eb 43 00 00       	call   80104690 <acquire>
	while (n > 0) {
801002a5:	83 c4 10             	add    $0x10,%esp
801002a8:	85 db                	test   %ebx,%ebx
801002aa:	0f 8e 94 00 00 00    	jle    80100344 <consoleread+0xc4>
		while (input.r == input.w) {
801002b0:	a1 00 c1 12 80       	mov    0x8012c100,%eax
801002b5:	39 05 04 c1 12 80    	cmp    %eax,0x8012c104
801002bb:	74 25                	je     801002e2 <consoleread+0x62>
801002bd:	eb 59                	jmp    80100318 <consoleread+0x98>
801002bf:	90                   	nop
			if (myproc()->killed) {
				release(&cons.lock);
				ilock(ip);
				return -1;
			}
			sleep(&input.r, &cons.lock);
801002c0:	83 ec 08             	sub    $0x8,%esp
801002c3:	68 20 c1 12 80       	push   $0x8012c120
801002c8:	68 00 c1 12 80       	push   $0x8012c100
801002cd:	e8 1e 3e 00 00       	call   801040f0 <sleep>
		while (input.r == input.w) {
801002d2:	a1 00 c1 12 80       	mov    0x8012c100,%eax
801002d7:	83 c4 10             	add    $0x10,%esp
801002da:	3b 05 04 c1 12 80    	cmp    0x8012c104,%eax
801002e0:	75 36                	jne    80100318 <consoleread+0x98>
			if (myproc()->killed) {
801002e2:	e8 f9 36 00 00       	call   801039e0 <myproc>
801002e7:	8b 48 28             	mov    0x28(%eax),%ecx
801002ea:	85 c9                	test   %ecx,%ecx
801002ec:	74 d2                	je     801002c0 <consoleread+0x40>
				release(&cons.lock);
801002ee:	83 ec 0c             	sub    $0xc,%esp
801002f1:	68 20 c1 12 80       	push   $0x8012c120
801002f6:	e8 35 43 00 00       	call   80104630 <release>
				ilock(ip);
801002fb:	5a                   	pop    %edx
801002fc:	ff 75 08             	push   0x8(%ebp)
801002ff:	e8 5c 17 00 00       	call   80101a60 <ilock>
				return -1;
80100304:	83 c4 10             	add    $0x10,%esp
	}
	release(&cons.lock);
	ilock(ip);

	return target - n;
}
80100307:	8d 65 f4             	lea    -0xc(%ebp),%esp
				return -1;
8010030a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010030f:	5b                   	pop    %ebx
80100310:	5e                   	pop    %esi
80100311:	5f                   	pop    %edi
80100312:	5d                   	pop    %ebp
80100313:	c3                   	ret
80100314:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
		c = input.buf[input.r++ % INPUT_BUF];
80100318:	8d 50 01             	lea    0x1(%eax),%edx
8010031b:	89 15 00 c1 12 80    	mov    %edx,0x8012c100
80100321:	89 c2                	mov    %eax,%edx
80100323:	83 e2 7f             	and    $0x7f,%edx
80100326:	0f be 8a 80 c0 12 80 	movsbl -0x7fed3f80(%edx),%ecx
		if (c == C('D')) { // EOF
8010032d:	80 f9 04             	cmp    $0x4,%cl
80100330:	74 37                	je     80100369 <consoleread+0xe9>
		*dst++ = c;
80100332:	83 c6 01             	add    $0x1,%esi
		--n;
80100335:	83 eb 01             	sub    $0x1,%ebx
		*dst++ = c;
80100338:	88 4e ff             	mov    %cl,-0x1(%esi)
		if (c == '\n')
8010033b:	83 f9 0a             	cmp    $0xa,%ecx
8010033e:	0f 85 64 ff ff ff    	jne    801002a8 <consoleread+0x28>
	release(&cons.lock);
80100344:	83 ec 0c             	sub    $0xc,%esp
80100347:	68 20 c1 12 80       	push   $0x8012c120
8010034c:	e8 df 42 00 00       	call   80104630 <release>
	ilock(ip);
80100351:	58                   	pop    %eax
80100352:	ff 75 08             	push   0x8(%ebp)
80100355:	e8 06 17 00 00       	call   80101a60 <ilock>
	return target - n;
8010035a:	89 f8                	mov    %edi,%eax
8010035c:	83 c4 10             	add    $0x10,%esp
}
8010035f:	8d 65 f4             	lea    -0xc(%ebp),%esp
	return target - n;
80100362:	29 d8                	sub    %ebx,%eax
}
80100364:	5b                   	pop    %ebx
80100365:	5e                   	pop    %esi
80100366:	5f                   	pop    %edi
80100367:	5d                   	pop    %ebp
80100368:	c3                   	ret
			if (n < target) {
80100369:	39 fb                	cmp    %edi,%ebx
8010036b:	73 d7                	jae    80100344 <consoleread+0xc4>
				input.r--;
8010036d:	a3 00 c1 12 80       	mov    %eax,0x8012c100
80100372:	eb d0                	jmp    80100344 <consoleread+0xc4>
80100374:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010037b:	00 
8010037c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80100380 <panic>:
{
80100380:	55                   	push   %ebp
80100381:	89 e5                	mov    %esp,%ebp
80100383:	56                   	push   %esi
80100384:	53                   	push   %ebx
80100385:	83 ec 30             	sub    $0x30,%esp
}

static inline void
cli(void)
{
	__asm__ __volatile__("cli");
80100388:	fa                   	cli
	cons.locking = 0;
80100389:	c7 05 54 c1 12 80 00 	movl   $0x0,0x8012c154
80100390:	00 00 00 
	cprintf("lapicid %d: panic: ", lapicid());
80100393:	8d 75 f8             	lea    -0x8(%ebp),%esi
80100396:	e8 65 76 00 00       	call   80107a00 <lapicid>
8010039b:	83 ec 08             	sub    $0x8,%esp
8010039e:	50                   	push   %eax
8010039f:	68 6d 80 10 80       	push   $0x8010806d
801003a4:	e8 a7 03 00 00       	call   80100750 <cprintf>
	cprintf("%s", s);
801003a9:	58                   	pop    %eax
801003aa:	5a                   	pop    %edx
801003ab:	ff 75 08             	push   0x8(%ebp)
801003ae:	68 ac 83 10 80       	push   $0x801083ac
801003b3:	e8 98 03 00 00       	call   80100750 <cprintf>
	cprintf("\n");
801003b8:	c7 04 24 42 86 10 80 	movl   $0x80108642,(%esp)
801003bf:	e8 8c 03 00 00       	call   80100750 <cprintf>
	getcallerpcs(&s, pcs);
801003c4:	59                   	pop    %ecx
801003c5:	8d 45 08             	lea    0x8(%ebp),%eax
801003c8:	5b                   	pop    %ebx
801003c9:	8d 5d d0             	lea    -0x30(%ebp),%ebx
801003cc:	53                   	push   %ebx
801003cd:	50                   	push   %eax
801003ce:	e8 ed 40 00 00       	call   801044c0 <getcallerpcs>
	for (i = 0; i < 10; i++)
801003d3:	83 c4 10             	add    $0x10,%esp
801003d6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801003dd:	00 
801003de:	66 90                	xchg   %ax,%ax
		cprintf(" %x", pcs[i]);
801003e0:	83 ec 08             	sub    $0x8,%esp
801003e3:	ff 33                	push   (%ebx)
	for (i = 0; i < 10; i++)
801003e5:	83 c3 04             	add    $0x4,%ebx
		cprintf(" %x", pcs[i]);
801003e8:	68 81 80 10 80       	push   $0x80108081
801003ed:	e8 5e 03 00 00       	call   80100750 <cprintf>
	for (i = 0; i < 10; i++)
801003f2:	83 c4 10             	add    $0x10,%esp
801003f5:	39 f3                	cmp    %esi,%ebx
801003f7:	75 e7                	jne    801003e0 <panic+0x60>
	panicked = 1; // freeze other CPU
801003f9:	c7 05 60 c1 12 80 01 	movl   $0x1,0x8012c160
80100400:	00 00 00 
	for (;;)
80100403:	eb fe                	jmp    80100403 <panic+0x83>
80100405:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010040c:	00 
8010040d:	8d 76 00             	lea    0x0(%esi),%esi

80100410 <consputc.part.0>:
consputc(int c)
80100410:	55                   	push   %ebp
80100411:	89 e5                	mov    %esp,%ebp
80100413:	57                   	push   %edi
80100414:	56                   	push   %esi
80100415:	89 c6                	mov    %eax,%esi
80100417:	53                   	push   %ebx
80100418:	83 ec 1c             	sub    $0x1c,%esp
	if (c == BACKSPACE) {
8010041b:	3d 00 01 00 00       	cmp    $0x100,%eax
80100420:	0f 84 2a 01 00 00    	je     80100550 <consputc.part.0+0x140>
		uartputc(c);
80100426:	83 ec 0c             	sub    $0xc,%esp
80100429:	50                   	push   %eax
8010042a:	e8 61 5d 00 00       	call   80106190 <uartputc>
8010042f:	83 c4 10             	add    $0x10,%esp
	cgaputc(c, static_foreg, static_backg);
80100432:	0f b6 05 5c c1 12 80 	movzbl 0x8012c15c,%eax
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
80100439:	bf d4 03 00 00       	mov    $0x3d4,%edi
8010043e:	89 fa                	mov    %edi,%edx
80100440:	88 45 e4             	mov    %al,-0x1c(%ebp)
80100443:	0f b6 05 00 a0 10 80 	movzbl 0x8010a000,%eax
8010044a:	88 45 e3             	mov    %al,-0x1d(%ebp)
8010044d:	b8 0e 00 00 00       	mov    $0xe,%eax
80100452:	ee                   	out    %al,(%dx)
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
80100453:	bb d5 03 00 00       	mov    $0x3d5,%ebx
80100458:	89 da                	mov    %ebx,%edx
8010045a:	ec                   	in     (%dx),%al
	pos = inb(CRTPORT + 1) << 8;
8010045b:	0f b6 c8             	movzbl %al,%ecx
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
8010045e:	89 fa                	mov    %edi,%edx
80100460:	b8 0f 00 00 00       	mov    $0xf,%eax
80100465:	c1 e1 08             	shl    $0x8,%ecx
80100468:	ee                   	out    %al,(%dx)
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
80100469:	89 da                	mov    %ebx,%edx
8010046b:	ec                   	in     (%dx),%al
	pos |= inb(CRTPORT + 1);
8010046c:	0f b6 d8             	movzbl %al,%ebx
8010046f:	09 cb                	or     %ecx,%ebx
	if (c == '\n') {
80100471:	83 fe 0a             	cmp    $0xa,%esi
80100474:	0f 84 ae 00 00 00    	je     80100528 <consputc.part.0+0x118>
	} else if (c == BACKSPACE && echo_out == 1) {
8010047a:	a1 04 a0 10 80       	mov    0x8010a004,%eax
8010047f:	81 fe 00 01 00 00    	cmp    $0x100,%esi
80100485:	0f 84 85 00 00 00    	je     80100510 <consputc.part.0+0x100>
	} else if (echo_out == 1) {
8010048b:	83 f8 01             	cmp    $0x1,%eax
8010048e:	75 1f                	jne    801004af <consputc.part.0+0x9f>
		higher <<= 4;
80100490:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
		crt[pos++] = (c & 0xff) | together;
80100494:	89 f1                	mov    %esi,%ecx
80100496:	0f b6 f1             	movzbl %cl,%esi
		higher <<= 4;
80100499:	c1 e0 04             	shl    $0x4,%eax
		higher |= fore;
8010049c:	0a 45 e3             	or     -0x1d(%ebp),%al
		crt[pos++] = (c & 0xff) | together;
8010049f:	c1 e0 08             	shl    $0x8,%eax
801004a2:	09 f0                	or     %esi,%eax
801004a4:	66 89 84 1b 00 80 0b 	mov    %ax,-0x7ff48000(%ebx,%ebx,1)
801004ab:	80 
801004ac:	83 c3 01             	add    $0x1,%ebx
	if (pos < 0 || pos > 25 * 80)
801004af:	81 fb d0 07 00 00    	cmp    $0x7d0,%ebx
801004b5:	0f 8f 1d 01 00 00    	jg     801005d8 <consputc.part.0+0x1c8>
	if ((pos / 80) >= 24) { // Scroll up.
801004bb:	81 fb 7f 07 00 00    	cmp    $0x77f,%ebx
801004c1:	0f 8f b9 00 00 00    	jg     80100580 <consputc.part.0+0x170>
	outb(CRTPORT + 1, pos >> 8);
801004c7:	0f b6 c7             	movzbl %bh,%eax
	outb(CRTPORT + 1, pos);
801004ca:	89 df                	mov    %ebx,%edi
	crt[pos] = ' ' | 0x0700;
801004cc:	8d b4 1b 00 80 0b 80 	lea    -0x7ff48000(%ebx,%ebx,1),%esi
	outb(CRTPORT + 1, pos >> 8);
801004d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
801004d6:	bb d4 03 00 00       	mov    $0x3d4,%ebx
801004db:	b8 0e 00 00 00       	mov    $0xe,%eax
801004e0:	89 da                	mov    %ebx,%edx
801004e2:	ee                   	out    %al,(%dx)
801004e3:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
801004e8:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
801004ec:	89 ca                	mov    %ecx,%edx
801004ee:	ee                   	out    %al,(%dx)
801004ef:	b8 0f 00 00 00       	mov    $0xf,%eax
801004f4:	89 da                	mov    %ebx,%edx
801004f6:	ee                   	out    %al,(%dx)
801004f7:	89 f8                	mov    %edi,%eax
801004f9:	89 ca                	mov    %ecx,%edx
801004fb:	ee                   	out    %al,(%dx)
	crt[pos] = ' ' | 0x0700;
801004fc:	b8 20 07 00 00       	mov    $0x720,%eax
80100501:	66 89 06             	mov    %ax,(%esi)
}
80100504:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100507:	5b                   	pop    %ebx
80100508:	5e                   	pop    %esi
80100509:	5f                   	pop    %edi
8010050a:	5d                   	pop    %ebp
8010050b:	c3                   	ret
8010050c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
	} else if (c == BACKSPACE && echo_out == 1) {
80100510:	83 f8 01             	cmp    $0x1,%eax
80100513:	75 9a                	jne    801004af <consputc.part.0+0x9f>
		if (pos > 0)
80100515:	85 db                	test   %ebx,%ebx
80100517:	0f 84 ab 00 00 00    	je     801005c8 <consputc.part.0+0x1b8>
			--pos;
8010051d:	83 eb 01             	sub    $0x1,%ebx
80100520:	eb 8d                	jmp    801004af <consputc.part.0+0x9f>
80100522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		if (pos % 80 != 0)
80100528:	b8 cd cc cc cc       	mov    $0xcccccccd,%eax
8010052d:	f7 e3                	mul    %ebx
8010052f:	c1 ea 06             	shr    $0x6,%edx
80100532:	8d 04 92             	lea    (%edx,%edx,4),%eax
80100535:	89 da                	mov    %ebx,%edx
80100537:	c1 e0 04             	shl    $0x4,%eax
8010053a:	29 c2                	sub    %eax,%edx
8010053c:	0f 84 6d ff ff ff    	je     801004af <consputc.part.0+0x9f>
			pos += 80 - pos % 80;
80100542:	29 d3                	sub    %edx,%ebx
80100544:	83 c3 50             	add    $0x50,%ebx
80100547:	e9 63 ff ff ff       	jmp    801004af <consputc.part.0+0x9f>
8010054c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
		uartputc('\b');
80100550:	83 ec 0c             	sub    $0xc,%esp
80100553:	6a 08                	push   $0x8
80100555:	e8 36 5c 00 00       	call   80106190 <uartputc>
		uartputc(' ');
8010055a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
80100561:	e8 2a 5c 00 00       	call   80106190 <uartputc>
		uartputc('\b');
80100566:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
8010056d:	e8 1e 5c 00 00       	call   80106190 <uartputc>
80100572:	83 c4 10             	add    $0x10,%esp
80100575:	e9 b8 fe ff ff       	jmp    80100432 <consputc.part.0+0x22>
8010057a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		memmove(crt, crt + 80, sizeof(crt[0]) * 23 * 80);
80100580:	83 ec 04             	sub    $0x4,%esp
		pos -= 80;
80100583:	8d 7b b0             	lea    -0x50(%ebx),%edi
		memset(crt + pos, 0, sizeof(crt[0]) * (24 * 80 - pos));
80100586:	8d b4 1b 60 7f 0b 80 	lea    -0x7ff480a0(%ebx,%ebx,1),%esi
		memmove(crt, crt + 80, sizeof(crt[0]) * 23 * 80);
8010058d:	68 60 0e 00 00       	push   $0xe60
80100592:	68 a0 80 0b 80       	push   $0x800b80a0
80100597:	68 00 80 0b 80       	push   $0x800b8000
8010059c:	e8 7f 42 00 00       	call   80104820 <memmove>
		memset(crt + pos, 0, sizeof(crt[0]) * (24 * 80 - pos));
801005a1:	b8 80 07 00 00       	mov    $0x780,%eax
801005a6:	83 c4 0c             	add    $0xc,%esp
801005a9:	29 f8                	sub    %edi,%eax
801005ab:	01 c0                	add    %eax,%eax
801005ad:	50                   	push   %eax
801005ae:	6a 00                	push   $0x0
801005b0:	56                   	push   %esi
801005b1:	e8 da 41 00 00       	call   80104790 <memset>
	outb(CRTPORT + 1, pos);
801005b6:	c6 45 e4 07          	movb   $0x7,-0x1c(%ebp)
801005ba:	83 c4 10             	add    $0x10,%esp
801005bd:	e9 14 ff ff ff       	jmp    801004d6 <consputc.part.0+0xc6>
801005c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801005c8:	c6 45 e4 00          	movb   $0x0,-0x1c(%ebp)
801005cc:	be 00 80 0b 80       	mov    $0x800b8000,%esi
801005d1:	31 ff                	xor    %edi,%edi
801005d3:	e9 fe fe ff ff       	jmp    801004d6 <consputc.part.0+0xc6>
		panic("pos under/overflow");
801005d8:	83 ec 0c             	sub    $0xc,%esp
801005db:	68 85 80 10 80       	push   $0x80108085
801005e0:	e8 9b fd ff ff       	call   80100380 <panic>
801005e5:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801005ec:	00 
801005ed:	8d 76 00             	lea    0x0(%esi),%esi

801005f0 <consolewrite>:

int
consolewrite(struct inode *ip, char *buf, int n)
{
801005f0:	55                   	push   %ebp
801005f1:	89 e5                	mov    %esp,%ebp
801005f3:	57                   	push   %edi
801005f4:	56                   	push   %esi
801005f5:	53                   	push   %ebx
801005f6:	83 ec 18             	sub    $0x18,%esp
801005f9:	8b 75 10             	mov    0x10(%ebp),%esi
	iunlock(ip);
801005fc:	ff 75 08             	push   0x8(%ebp)
801005ff:	e8 5c 15 00 00       	call   80101b60 <iunlock>
	acquire(&cons.lock);
80100604:	c7 04 24 20 c1 12 80 	movl   $0x8012c120,(%esp)
8010060b:	e8 80 40 00 00       	call   80104690 <acquire>
	for (int i = 0; i < n; i++)
80100610:	83 c4 10             	add    $0x10,%esp
80100613:	85 f6                	test   %esi,%esi
80100615:	7e 25                	jle    8010063c <consolewrite+0x4c>
80100617:	8b 5d 0c             	mov    0xc(%ebp),%ebx
8010061a:	8d 3c 33             	lea    (%ebx,%esi,1),%edi
	if (panicked) {
8010061d:	8b 15 60 c1 12 80    	mov    0x8012c160,%edx
		consputc(buf[i] & 0xff);
80100623:	0f b6 03             	movzbl (%ebx),%eax
	if (panicked) {
80100626:	85 d2                	test   %edx,%edx
80100628:	74 06                	je     80100630 <consolewrite+0x40>
	__asm__ __volatile__("cli");
8010062a:	fa                   	cli
		for (;;)
8010062b:	eb fe                	jmp    8010062b <consolewrite+0x3b>
8010062d:	8d 76 00             	lea    0x0(%esi),%esi
80100630:	e8 db fd ff ff       	call   80100410 <consputc.part.0>
	for (int i = 0; i < n; i++)
80100635:	83 c3 01             	add    $0x1,%ebx
80100638:	39 fb                	cmp    %edi,%ebx
8010063a:	75 e1                	jne    8010061d <consolewrite+0x2d>
	release(&cons.lock);
8010063c:	83 ec 0c             	sub    $0xc,%esp
8010063f:	68 20 c1 12 80       	push   $0x8012c120
80100644:	e8 e7 3f 00 00       	call   80104630 <release>
	ilock(ip);
80100649:	58                   	pop    %eax
8010064a:	ff 75 08             	push   0x8(%ebp)
8010064d:	e8 0e 14 00 00       	call   80101a60 <ilock>

	return n;
}
80100652:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100655:	89 f0                	mov    %esi,%eax
80100657:	5b                   	pop    %ebx
80100658:	5e                   	pop    %esi
80100659:	5f                   	pop    %edi
8010065a:	5d                   	pop    %ebp
8010065b:	c3                   	ret
8010065c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80100660 <printint>:
{
80100660:	55                   	push   %ebp
80100661:	89 e5                	mov    %esp,%ebp
80100663:	57                   	push   %edi
80100664:	56                   	push   %esi
80100665:	89 d6                	mov    %edx,%esi
80100667:	53                   	push   %ebx
80100668:	83 ec 2c             	sub    $0x2c,%esp
	if (sign && (sign = xx < 0))
8010066b:	85 c0                	test   %eax,%eax
8010066d:	79 05                	jns    80100674 <printint+0x14>
8010066f:	83 e1 01             	and    $0x1,%ecx
80100672:	75 7c                	jne    801006f0 <printint+0x90>
		x = xx;
80100674:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
8010067b:	89 c1                	mov    %eax,%ecx
	i = 0;
8010067d:	31 db                	xor    %ebx,%ebx
8010067f:	90                   	nop
		buf[i++] = digits[x % base];
80100680:	89 c8                	mov    %ecx,%eax
80100682:	31 d2                	xor    %edx,%edx
80100684:	89 df                	mov    %ebx,%edi
80100686:	83 c3 01             	add    $0x1,%ebx
80100689:	f7 f6                	div    %esi
8010068b:	0f b6 92 58 87 10 80 	movzbl -0x7fef78a8(%edx),%edx
80100692:	88 54 1d d7          	mov    %dl,-0x29(%ebp,%ebx,1)
	} while ((x /= base) != 0);
80100696:	89 ca                	mov    %ecx,%edx
80100698:	89 c1                	mov    %eax,%ecx
8010069a:	39 f2                	cmp    %esi,%edx
8010069c:	73 e2                	jae    80100680 <printint+0x20>
	if (sign)
8010069e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
801006a1:	85 c0                	test   %eax,%eax
801006a3:	74 08                	je     801006ad <printint+0x4d>
		buf[i++] = '-';
801006a5:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
801006aa:	8d 5f 02             	lea    0x2(%edi),%ebx
	if (alt_form && base == 16) {
801006ad:	8b 3d 58 c1 12 80    	mov    0x8012c158,%edi
	if (panicked) {
801006b3:	a1 60 c1 12 80       	mov    0x8012c160,%eax
	if (alt_form && base == 16) {
801006b8:	85 ff                	test   %edi,%edi
801006ba:	74 05                	je     801006c1 <printint+0x61>
801006bc:	83 fe 10             	cmp    $0x10,%esi
801006bf:	74 3c                	je     801006fd <printint+0x9d>
	while (--i >= 0)
801006c1:	83 eb 01             	sub    $0x1,%ebx
801006c4:	8d 75 d8             	lea    -0x28(%ebp),%esi
801006c7:	01 f3                	add    %esi,%ebx
	if (panicked) {
801006c9:	8b 15 60 c1 12 80    	mov    0x8012c160,%edx
		consputc(buf[i]);
801006cf:	0f be 03             	movsbl (%ebx),%eax
	if (panicked) {
801006d2:	85 d2                	test   %edx,%edx
801006d4:	74 0a                	je     801006e0 <printint+0x80>
801006d6:	fa                   	cli
		for (;;)
801006d7:	eb fe                	jmp    801006d7 <printint+0x77>
801006d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801006e0:	e8 2b fd ff ff       	call   80100410 <consputc.part.0>
	while (--i >= 0)
801006e5:	8d 43 ff             	lea    -0x1(%ebx),%eax
801006e8:	39 f3                	cmp    %esi,%ebx
801006ea:	74 1c                	je     80100708 <printint+0xa8>
801006ec:	89 c3                	mov    %eax,%ebx
801006ee:	eb d9                	jmp    801006c9 <printint+0x69>
		x = -xx;
801006f0:	f7 d8                	neg    %eax
	if (sign && (sign = xx < 0))
801006f2:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		x = -xx;
801006f9:	89 c1                	mov    %eax,%ecx
801006fb:	eb 80                	jmp    8010067d <printint+0x1d>
	if (panicked) {
801006fd:	85 c0                	test   %eax,%eax
801006ff:	74 0f                	je     80100710 <printint+0xb0>
80100701:	fa                   	cli
		for (;;)
80100702:	eb fe                	jmp    80100702 <printint+0xa2>
80100704:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
}
80100708:	83 c4 2c             	add    $0x2c,%esp
8010070b:	5b                   	pop    %ebx
8010070c:	5e                   	pop    %esi
8010070d:	5f                   	pop    %edi
8010070e:	5d                   	pop    %ebp
8010070f:	c3                   	ret
80100710:	b8 30 00 00 00       	mov    $0x30,%eax
80100715:	e8 f6 fc ff ff       	call   80100410 <consputc.part.0>
	if (panicked) {
8010071a:	8b 0d 60 c1 12 80    	mov    0x8012c160,%ecx
80100720:	85 c9                	test   %ecx,%ecx
80100722:	74 0c                	je     80100730 <printint+0xd0>
80100724:	fa                   	cli
		for (;;)
80100725:	eb fe                	jmp    80100725 <printint+0xc5>
80100727:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010072e:	00 
8010072f:	90                   	nop
80100730:	b8 78 00 00 00       	mov    $0x78,%eax
80100735:	e8 d6 fc ff ff       	call   80100410 <consputc.part.0>
		alt_form = 0;
8010073a:	c7 05 58 c1 12 80 00 	movl   $0x0,0x8012c158
80100741:	00 00 00 
80100744:	e9 78 ff ff ff       	jmp    801006c1 <printint+0x61>
80100749:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80100750 <cprintf>:
{
80100750:	55                   	push   %ebp
80100751:	89 e5                	mov    %esp,%ebp
80100753:	57                   	push   %edi
80100754:	56                   	push   %esi
80100755:	53                   	push   %ebx
80100756:	83 ec 1c             	sub    $0x1c,%esp
	locking = cons.locking;
80100759:	8b 3d 54 c1 12 80    	mov    0x8012c154,%edi
	if (fmt == 0)
8010075f:	8b 75 08             	mov    0x8(%ebp),%esi
	if (locking)
80100762:	85 ff                	test   %edi,%edi
80100764:	0f 85 43 01 00 00    	jne    801008ad <cprintf+0x15d>
	if (fmt == 0)
8010076a:	85 f6                	test   %esi,%esi
8010076c:	0f 84 b0 02 00 00    	je     80100a22 <cprintf+0x2d2>
	for (i = 0; (c = fmt[i] & 0xff) != 0; i++) {
80100772:	0f b6 06             	movzbl (%esi),%eax
80100775:	85 c0                	test   %eax,%eax
80100777:	0f 84 a7 00 00 00    	je     80100824 <cprintf+0xd4>
	argp = (uint *)(void *)(&fmt + 1);
8010077d:	8d 4d 0c             	lea    0xc(%ebp),%ecx
	for (i = 0; (c = fmt[i] & 0xff) != 0; i++) {
80100780:	31 db                	xor    %ebx,%ebx
	argp = (uint *)(void *)(&fmt + 1);
80100782:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
		if (c != '%') {
80100785:	83 f8 25             	cmp    $0x25,%eax
80100788:	0f 84 a8 00 00 00    	je     80100836 <cprintf+0xe6>
			if (c == '\e') {
8010078e:	83 f8 1b             	cmp    $0x1b,%eax
80100791:	75 5c                	jne    801007ef <cprintf+0x9f>
				c = fmt[++i] & 0xff;
80100793:	0f b6 44 1e 01       	movzbl 0x1(%esi,%ebx,1),%eax
80100798:	8d 53 01             	lea    0x1(%ebx),%edx
				if (c == 0)
8010079b:	85 c0                	test   %eax,%eax
8010079d:	74 7d                	je     8010081c <cprintf+0xcc>
				switch (c) {
8010079f:	83 f8 62             	cmp    $0x62,%eax
801007a2:	0f 84 be 00 00 00    	je     80100866 <cprintf+0x116>
801007a8:	83 f8 66             	cmp    $0x66,%eax
801007ab:	75 40                	jne    801007ed <cprintf+0x9d>
					c = fmt[++i] & 0xff;
801007ad:	83 c3 02             	add    $0x2,%ebx
801007b0:	0f be 0c 1e          	movsbl (%esi,%ebx,1),%ecx
801007b4:	0f b6 c1             	movzbl %cl,%eax
801007b7:	89 ca                	mov    %ecx,%edx
					if (c == 0)
801007b9:	85 c0                	test   %eax,%eax
801007bb:	74 32                	je     801007ef <cprintf+0x9f>
					if (color_below10 ||
801007bd:	81 e1 c0 00 00 00    	and    $0xc0,%ecx
801007c3:	0f 84 23 01 00 00    	je     801008ec <cprintf+0x19c>
							(((c - 0x61) + 10) >= 0xa && ((c - 0x61) + 0xa) <= 0xf)) {
801007c9:	8d 48 9f             	lea    -0x61(%eax),%ecx
					if (color_below10 ||
801007cc:	83 f9 05             	cmp    $0x5,%ecx
801007cf:	77 1e                	ja     801007ef <cprintf+0x9f>
						set_term_color(c - (color_below10 ? 30 : 60), 0xff);
801007d1:	b8 3c 00 00 00       	mov    $0x3c,%eax
801007d6:	29 c2                	sub    %eax,%edx
	static_foreg = (foreground == 0xff) ? static_foreg : foreground;
801007d8:	0f b6 05 00 a0 10 80 	movzbl 0x8010a000,%eax
801007df:	80 fa ff             	cmp    $0xff,%dl
801007e2:	0f 44 d0             	cmove  %eax,%edx
801007e5:	88 15 00 a0 10 80    	mov    %dl,0x8010a000
						goto skip_printing;
801007eb:	eb 20                	jmp    8010080d <cprintf+0xbd>
				switch (c) {
801007ed:	89 d3                	mov    %edx,%ebx
	if (panicked) {
801007ef:	8b 0d 60 c1 12 80    	mov    0x8012c160,%ecx
801007f5:	85 c9                	test   %ecx,%ecx
801007f7:	74 0f                	je     80100808 <cprintf+0xb8>
801007f9:	fa                   	cli
		for (;;)
801007fa:	eb fe                	jmp    801007fa <cprintf+0xaa>
801007fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80100800:	89 d0                	mov    %edx,%eax
80100802:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80100808:	e8 03 fc ff ff       	call   80100410 <consputc.part.0>
	for (i = 0; (c = fmt[i] & 0xff) != 0; i++) {
8010080d:	83 c3 01             	add    $0x1,%ebx
80100810:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
80100814:	85 c0                	test   %eax,%eax
80100816:	0f 85 69 ff ff ff    	jne    80100785 <cprintf+0x35>
	if (locking)
8010081c:	85 ff                	test   %edi,%edi
8010081e:	0f 85 ac 00 00 00    	jne    801008d0 <cprintf+0x180>
}
80100824:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100827:	5b                   	pop    %ebx
80100828:	5e                   	pop    %esi
80100829:	5f                   	pop    %edi
8010082a:	5d                   	pop    %ebp
8010082b:	c3                   	ret
			alt_form = 1;
8010082c:	c7 05 58 c1 12 80 01 	movl   $0x1,0x8012c158
80100833:	00 00 00 
		c = fmt[++i] & 0xff;
80100836:	83 c3 01             	add    $0x1,%ebx
80100839:	0f b6 14 1e          	movzbl (%esi,%ebx,1),%edx
		if (c == 0)
8010083d:	85 d2                	test   %edx,%edx
8010083f:	74 db                	je     8010081c <cprintf+0xcc>
		switch (c) {
80100841:	83 fa 78             	cmp    $0x78,%edx
80100844:	0f 8f ac 00 00 00    	jg     801008f6 <cprintf+0x1a6>
8010084a:	83 fa 63             	cmp    $0x63,%edx
8010084d:	0f 8e 60 01 00 00    	jle    801009b3 <cprintf+0x263>
80100853:	8d 42 9c             	lea    -0x64(%edx),%eax
80100856:	83 f8 14             	cmp    $0x14,%eax
80100859:	0f 87 97 00 00 00    	ja     801008f6 <cprintf+0x1a6>
8010085f:	ff 24 85 04 87 10 80 	jmp    *-0x7fef78fc(,%eax,4)
					c = fmt[++i] & 0xff;
80100866:	83 c3 02             	add    $0x2,%ebx
80100869:	0f be 0c 1e          	movsbl (%esi,%ebx,1),%ecx
8010086d:	0f b6 c1             	movzbl %cl,%eax
80100870:	89 ca                	mov    %ecx,%edx
					if (c == 0)
80100872:	85 c0                	test   %eax,%eax
80100874:	0f 84 75 ff ff ff    	je     801007ef <cprintf+0x9f>
					if (color_below10 ||
8010087a:	81 e1 c0 00 00 00    	and    $0xc0,%ecx
80100880:	74 63                	je     801008e5 <cprintf+0x195>
							(((c - 0x61) + 0xa) >= 0xa && ((c - 0x61) + 0xa) <= 0xf)) {
80100882:	8d 48 9f             	lea    -0x61(%eax),%ecx
					if (color_below10 ||
80100885:	83 f9 05             	cmp    $0x5,%ecx
80100888:	0f 87 61 ff ff ff    	ja     801007ef <cprintf+0x9f>
						set_term_color(0xff, c - (color_below10 ? 0x30 : 60));
8010088e:	b8 3c 00 00 00       	mov    $0x3c,%eax
80100893:	29 c2                	sub    %eax,%edx
	static_backg = (background == 0xff) ? static_backg : background;
80100895:	0f b6 05 5c c1 12 80 	movzbl 0x8012c15c,%eax
8010089c:	80 fa ff             	cmp    $0xff,%dl
8010089f:	0f 44 d0             	cmove  %eax,%edx
801008a2:	88 15 5c c1 12 80    	mov    %dl,0x8012c15c
						goto skip_printing;
801008a8:	e9 60 ff ff ff       	jmp    8010080d <cprintf+0xbd>
		acquire(&cons.lock);
801008ad:	83 ec 0c             	sub    $0xc,%esp
801008b0:	68 20 c1 12 80       	push   $0x8012c120
801008b5:	e8 d6 3d 00 00       	call   80104690 <acquire>
	if (fmt == 0)
801008ba:	83 c4 10             	add    $0x10,%esp
801008bd:	85 f6                	test   %esi,%esi
801008bf:	0f 84 5d 01 00 00    	je     80100a22 <cprintf+0x2d2>
	for (i = 0; (c = fmt[i] & 0xff) != 0; i++) {
801008c5:	0f b6 06             	movzbl (%esi),%eax
801008c8:	85 c0                	test   %eax,%eax
801008ca:	0f 85 ad fe ff ff    	jne    8010077d <cprintf+0x2d>
		release(&cons.lock);
801008d0:	83 ec 0c             	sub    $0xc,%esp
801008d3:	68 20 c1 12 80       	push   $0x8012c120
801008d8:	e8 53 3d 00 00       	call   80104630 <release>
801008dd:	83 c4 10             	add    $0x10,%esp
801008e0:	e9 3f ff ff ff       	jmp    80100824 <cprintf+0xd4>
						set_term_color(0xff, c - (color_below10 ? 0x30 : 60));
801008e5:	b8 30 00 00 00       	mov    $0x30,%eax
801008ea:	eb a7                	jmp    80100893 <cprintf+0x143>
						set_term_color(c - (color_below10 ? 30 : 60), 0xff);
801008ec:	b8 1e 00 00 00       	mov    $0x1e,%eax
801008f1:	e9 e0 fe ff ff       	jmp    801007d6 <cprintf+0x86>
	if (panicked) {
801008f6:	8b 0d 60 c1 12 80    	mov    0x8012c160,%ecx
801008fc:	85 c9                	test   %ecx,%ecx
801008fe:	0f 85 f9 00 00 00    	jne    801009fd <cprintf+0x2ad>
80100904:	b8 25 00 00 00       	mov    $0x25,%eax
80100909:	89 55 e0             	mov    %edx,-0x20(%ebp)
8010090c:	e8 ff fa ff ff       	call   80100410 <consputc.part.0>
80100911:	a1 60 c1 12 80       	mov    0x8012c160,%eax
80100916:	8b 55 e0             	mov    -0x20(%ebp),%edx
80100919:	85 c0                	test   %eax,%eax
8010091b:	0f 84 df fe ff ff    	je     80100800 <cprintf+0xb0>
80100921:	fa                   	cli
		for (;;)
80100922:	eb fe                	jmp    80100922 <cprintf+0x1d2>
80100924:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
			printint(*argp++, 16, 0);
80100928:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010092b:	ba 10 00 00 00       	mov    $0x10,%edx
80100930:	8d 48 04             	lea    0x4(%eax),%ecx
80100933:	8b 00                	mov    (%eax),%eax
80100935:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
80100938:	31 c9                	xor    %ecx,%ecx
8010093a:	e8 21 fd ff ff       	call   80100660 <printint>
			break;
8010093f:	e9 c9 fe ff ff       	jmp    8010080d <cprintf+0xbd>
			if ((s = (char *)*argp++) == 0)
80100944:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100947:	8b 10                	mov    (%eax),%edx
80100949:	85 d2                	test   %edx,%edx
8010094b:	0f 84 96 00 00 00    	je     801009e7 <cprintf+0x297>
			for (; *s; s++)
80100951:	0f be 02             	movsbl (%edx),%eax
80100954:	84 c0                	test   %al,%al
80100956:	0f 84 bd 00 00 00    	je     80100a19 <cprintf+0x2c9>
8010095c:	89 75 e0             	mov    %esi,-0x20(%ebp)
8010095f:	89 de                	mov    %ebx,%esi
80100961:	89 d3                	mov    %edx,%ebx
	if (panicked) {
80100963:	8b 15 60 c1 12 80    	mov    0x8012c160,%edx
80100969:	85 d2                	test   %edx,%edx
8010096b:	0f 84 8f 00 00 00    	je     80100a00 <cprintf+0x2b0>
80100971:	fa                   	cli
		for (;;)
80100972:	eb fe                	jmp    80100972 <cprintf+0x222>
80100974:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
			printint(*argp++, 8, 0);
80100978:	8b 45 e4             	mov    -0x1c(%ebp),%eax
8010097b:	ba 08 00 00 00       	mov    $0x8,%edx
80100980:	8d 48 04             	lea    0x4(%eax),%ecx
80100983:	8b 00                	mov    (%eax),%eax
80100985:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
80100988:	31 c9                	xor    %ecx,%ecx
8010098a:	e8 d1 fc ff ff       	call   80100660 <printint>
			break;
8010098f:	e9 79 fe ff ff       	jmp    8010080d <cprintf+0xbd>
			printint(*argp++, 10, 1);
80100994:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80100997:	ba 0a 00 00 00       	mov    $0xa,%edx
8010099c:	8d 48 04             	lea    0x4(%eax),%ecx
8010099f:	8b 00                	mov    (%eax),%eax
801009a1:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
801009a4:	b9 01 00 00 00       	mov    $0x1,%ecx
801009a9:	e8 b2 fc ff ff       	call   80100660 <printint>
			break;
801009ae:	e9 5a fe ff ff       	jmp    8010080d <cprintf+0xbd>
		switch (c) {
801009b3:	83 fa 23             	cmp    $0x23,%edx
801009b6:	0f 84 70 fe ff ff    	je     8010082c <cprintf+0xdc>
801009bc:	83 fa 25             	cmp    $0x25,%edx
801009bf:	0f 85 31 ff ff ff    	jne    801008f6 <cprintf+0x1a6>
	if (panicked) {
801009c5:	a1 60 c1 12 80       	mov    0x8012c160,%eax
801009ca:	85 c0                	test   %eax,%eax
801009cc:	74 0a                	je     801009d8 <cprintf+0x288>
801009ce:	fa                   	cli
		for (;;)
801009cf:	eb fe                	jmp    801009cf <cprintf+0x27f>
801009d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801009d8:	b8 25 00 00 00       	mov    $0x25,%eax
801009dd:	e8 2e fa ff ff       	call   80100410 <consputc.part.0>
			break;
801009e2:	e9 26 fe ff ff       	jmp    8010080d <cprintf+0xbd>
				s = "(null)";
801009e7:	ba 98 80 10 80       	mov    $0x80108098,%edx
801009ec:	89 75 e0             	mov    %esi,-0x20(%ebp)
801009ef:	b8 28 00 00 00       	mov    $0x28,%eax
801009f4:	89 de                	mov    %ebx,%esi
801009f6:	89 d3                	mov    %edx,%ebx
801009f8:	e9 66 ff ff ff       	jmp    80100963 <cprintf+0x213>
801009fd:	fa                   	cli
		for (;;)
801009fe:	eb fe                	jmp    801009fe <cprintf+0x2ae>
80100a00:	e8 0b fa ff ff       	call   80100410 <consputc.part.0>
			for (; *s; s++)
80100a05:	0f be 43 01          	movsbl 0x1(%ebx),%eax
80100a09:	83 c3 01             	add    $0x1,%ebx
80100a0c:	84 c0                	test   %al,%al
80100a0e:	0f 85 4f ff ff ff    	jne    80100963 <cprintf+0x213>
80100a14:	89 f3                	mov    %esi,%ebx
80100a16:	8b 75 e0             	mov    -0x20(%ebp),%esi
			if ((s = (char *)*argp++) == 0)
80100a19:	83 45 e4 04          	addl   $0x4,-0x1c(%ebp)
80100a1d:	e9 eb fd ff ff       	jmp    8010080d <cprintf+0xbd>
		panic("null fmt");
80100a22:	83 ec 0c             	sub    $0xc,%esp
80100a25:	68 9f 80 10 80       	push   $0x8010809f
80100a2a:	e8 51 f9 ff ff       	call   80100380 <panic>
80100a2f:	90                   	nop

80100a30 <consoleintr>:
{
80100a30:	55                   	push   %ebp
80100a31:	89 e5                	mov    %esp,%ebp
80100a33:	57                   	push   %edi
	int c, doprocdump = 0;
80100a34:	31 ff                	xor    %edi,%edi
{
80100a36:	56                   	push   %esi
80100a37:	53                   	push   %ebx
80100a38:	83 ec 18             	sub    $0x18,%esp
80100a3b:	8b 75 08             	mov    0x8(%ebp),%esi
	acquire(&cons.lock);
80100a3e:	68 20 c1 12 80       	push   $0x8012c120
80100a43:	e8 48 3c 00 00       	call   80104690 <acquire>
	while ((c = getc()) >= 0) {
80100a48:	83 c4 10             	add    $0x10,%esp
80100a4b:	ff d6                	call   *%esi
80100a4d:	89 c3                	mov    %eax,%ebx
80100a4f:	85 c0                	test   %eax,%eax
80100a51:	78 22                	js     80100a75 <consoleintr+0x45>
		switch (c) {
80100a53:	83 fb 15             	cmp    $0x15,%ebx
80100a56:	74 47                	je     80100a9f <consoleintr+0x6f>
80100a58:	7f 76                	jg     80100ad0 <consoleintr+0xa0>
80100a5a:	83 fb 08             	cmp    $0x8,%ebx
80100a5d:	74 76                	je     80100ad5 <consoleintr+0xa5>
80100a5f:	83 fb 10             	cmp    $0x10,%ebx
80100a62:	0f 85 08 01 00 00    	jne    80100b70 <consoleintr+0x140>
	while ((c = getc()) >= 0) {
80100a68:	ff d6                	call   *%esi
		switch (c) {
80100a6a:	bf 01 00 00 00       	mov    $0x1,%edi
	while ((c = getc()) >= 0) {
80100a6f:	89 c3                	mov    %eax,%ebx
80100a71:	85 c0                	test   %eax,%eax
80100a73:	79 de                	jns    80100a53 <consoleintr+0x23>
	release(&cons.lock);
80100a75:	83 ec 0c             	sub    $0xc,%esp
80100a78:	68 20 c1 12 80       	push   $0x8012c120
80100a7d:	e8 ae 3b 00 00       	call   80104630 <release>
	if (doprocdump) {
80100a82:	83 c4 10             	add    $0x10,%esp
80100a85:	85 ff                	test   %edi,%edi
80100a87:	0f 85 3a 01 00 00    	jne    80100bc7 <consoleintr+0x197>
}
80100a8d:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100a90:	5b                   	pop    %ebx
80100a91:	5e                   	pop    %esi
80100a92:	5f                   	pop    %edi
80100a93:	5d                   	pop    %ebp
80100a94:	c3                   	ret
80100a95:	b8 00 01 00 00       	mov    $0x100,%eax
80100a9a:	e8 71 f9 ff ff       	call   80100410 <consputc.part.0>
			while (input.e != input.w &&
80100a9f:	a1 08 c1 12 80       	mov    0x8012c108,%eax
80100aa4:	3b 05 04 c1 12 80    	cmp    0x8012c104,%eax
80100aaa:	74 9f                	je     80100a4b <consoleintr+0x1b>
						 input.buf[(input.e - 1) % INPUT_BUF] != '\n') {
80100aac:	83 e8 01             	sub    $0x1,%eax
80100aaf:	89 c2                	mov    %eax,%edx
80100ab1:	83 e2 7f             	and    $0x7f,%edx
			while (input.e != input.w &&
80100ab4:	80 ba 80 c0 12 80 0a 	cmpb   $0xa,-0x7fed3f80(%edx)
80100abb:	74 8e                	je     80100a4b <consoleintr+0x1b>
	if (panicked) {
80100abd:	8b 15 60 c1 12 80    	mov    0x8012c160,%edx
				input.e--;
80100ac3:	a3 08 c1 12 80       	mov    %eax,0x8012c108
	if (panicked) {
80100ac8:	85 d2                	test   %edx,%edx
80100aca:	74 c9                	je     80100a95 <consoleintr+0x65>
80100acc:	fa                   	cli
		for (;;)
80100acd:	eb fe                	jmp    80100acd <consoleintr+0x9d>
80100acf:	90                   	nop
		switch (c) {
80100ad0:	83 fb 7f             	cmp    $0x7f,%ebx
80100ad3:	75 2b                	jne    80100b00 <consoleintr+0xd0>
			if (input.e != input.w) {
80100ad5:	a1 08 c1 12 80       	mov    0x8012c108,%eax
80100ada:	3b 05 04 c1 12 80    	cmp    0x8012c104,%eax
80100ae0:	0f 84 65 ff ff ff    	je     80100a4b <consoleintr+0x1b>
				input.e--;
80100ae6:	83 e8 01             	sub    $0x1,%eax
80100ae9:	a3 08 c1 12 80       	mov    %eax,0x8012c108
	if (panicked) {
80100aee:	a1 60 c1 12 80       	mov    0x8012c160,%eax
80100af3:	85 c0                	test   %eax,%eax
80100af5:	0f 84 bd 00 00 00    	je     80100bb8 <consoleintr+0x188>
80100afb:	fa                   	cli
		for (;;)
80100afc:	eb fe                	jmp    80100afc <consoleintr+0xcc>
80100afe:	66 90                	xchg   %ax,%ax
			if (c != 0 && input.e - input.r < INPUT_BUF) {
80100b00:	a1 08 c1 12 80       	mov    0x8012c108,%eax
80100b05:	89 c2                	mov    %eax,%edx
80100b07:	2b 15 00 c1 12 80    	sub    0x8012c100,%edx
80100b0d:	83 fa 7f             	cmp    $0x7f,%edx
80100b10:	0f 87 35 ff ff ff    	ja     80100a4b <consoleintr+0x1b>
				input.buf[input.e++ % INPUT_BUF] = c;
80100b16:	8d 48 01             	lea    0x1(%eax),%ecx
80100b19:	83 e0 7f             	and    $0x7f,%eax
	if (panicked) {
80100b1c:	8b 15 60 c1 12 80    	mov    0x8012c160,%edx
				input.buf[input.e++ % INPUT_BUF] = c;
80100b22:	89 0d 08 c1 12 80    	mov    %ecx,0x8012c108
80100b28:	88 98 80 c0 12 80    	mov    %bl,-0x7fed3f80(%eax)
	if (panicked) {
80100b2e:	85 d2                	test   %edx,%edx
80100b30:	75 7e                	jne    80100bb0 <consoleintr+0x180>
80100b32:	89 d8                	mov    %ebx,%eax
80100b34:	e8 d7 f8 ff ff       	call   80100410 <consputc.part.0>
				if (c == '\n' || c == C('D') || input.e == input.r + INPUT_BUF) {
80100b39:	83 fb 0a             	cmp    $0xa,%ebx
80100b3c:	0f 84 9b 00 00 00    	je     80100bdd <consoleintr+0x1ad>
80100b42:	a1 00 c1 12 80       	mov    0x8012c100,%eax
80100b47:	83 e8 80             	sub    $0xffffff80,%eax
80100b4a:	39 05 08 c1 12 80    	cmp    %eax,0x8012c108
80100b50:	0f 85 f5 fe ff ff    	jne    80100a4b <consoleintr+0x1b>
					wakeup(&input.r);
80100b56:	83 ec 0c             	sub    $0xc,%esp
					input.w = input.e;
80100b59:	a3 04 c1 12 80       	mov    %eax,0x8012c104
					wakeup(&input.r);
80100b5e:	68 00 c1 12 80       	push   $0x8012c100
80100b63:	e8 48 36 00 00       	call   801041b0 <wakeup>
80100b68:	83 c4 10             	add    $0x10,%esp
80100b6b:	e9 db fe ff ff       	jmp    80100a4b <consoleintr+0x1b>
			if (c != 0 && input.e - input.r < INPUT_BUF) {
80100b70:	85 db                	test   %ebx,%ebx
80100b72:	0f 84 d3 fe ff ff    	je     80100a4b <consoleintr+0x1b>
80100b78:	a1 08 c1 12 80       	mov    0x8012c108,%eax
80100b7d:	89 c2                	mov    %eax,%edx
80100b7f:	2b 15 00 c1 12 80    	sub    0x8012c100,%edx
80100b85:	83 fa 7f             	cmp    $0x7f,%edx
80100b88:	0f 87 bd fe ff ff    	ja     80100a4b <consoleintr+0x1b>
				input.buf[input.e++ % INPUT_BUF] = c;
80100b8e:	8d 48 01             	lea    0x1(%eax),%ecx
	if (panicked) {
80100b91:	8b 15 60 c1 12 80    	mov    0x8012c160,%edx
				input.buf[input.e++ % INPUT_BUF] = c;
80100b97:	83 e0 7f             	and    $0x7f,%eax
80100b9a:	89 0d 08 c1 12 80    	mov    %ecx,0x8012c108
				c = (c == '\r') ? '\n' : c;
80100ba0:	83 fb 0d             	cmp    $0xd,%ebx
80100ba3:	75 42                	jne    80100be7 <consoleintr+0x1b7>
				input.buf[input.e++ % INPUT_BUF] = c;
80100ba5:	c6 80 80 c0 12 80 0a 	movb   $0xa,-0x7fed3f80(%eax)
	if (panicked) {
80100bac:	85 d2                	test   %edx,%edx
80100bae:	74 23                	je     80100bd3 <consoleintr+0x1a3>
80100bb0:	fa                   	cli
		for (;;)
80100bb1:	eb fe                	jmp    80100bb1 <consoleintr+0x181>
80100bb3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
80100bb8:	b8 00 01 00 00       	mov    $0x100,%eax
80100bbd:	e8 4e f8 ff ff       	call   80100410 <consputc.part.0>
80100bc2:	e9 84 fe ff ff       	jmp    80100a4b <consoleintr+0x1b>
}
80100bc7:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100bca:	5b                   	pop    %ebx
80100bcb:	5e                   	pop    %esi
80100bcc:	5f                   	pop    %edi
80100bcd:	5d                   	pop    %ebp
		procdump(); // now call procdump() wo. cons.lock held
80100bce:	e9 bd 36 00 00       	jmp    80104290 <procdump>
80100bd3:	b8 0a 00 00 00       	mov    $0xa,%eax
80100bd8:	e8 33 f8 ff ff       	call   80100410 <consputc.part.0>
					input.w = input.e;
80100bdd:	a1 08 c1 12 80       	mov    0x8012c108,%eax
80100be2:	e9 6f ff ff ff       	jmp    80100b56 <consoleintr+0x126>
				input.buf[input.e++ % INPUT_BUF] = c;
80100be7:	88 98 80 c0 12 80    	mov    %bl,-0x7fed3f80(%eax)
				if (c != C('D'))
80100bed:	83 fb 04             	cmp    $0x4,%ebx
80100bf0:	0f 85 38 ff ff ff    	jne    80100b2e <consoleintr+0xfe>
	if (panicked) {
80100bf6:	85 d2                	test   %edx,%edx
80100bf8:	74 d9                	je     80100bd3 <consoleintr+0x1a3>
80100bfa:	fa                   	cli
		for (;;)
80100bfb:	eb fe                	jmp    80100bfb <consoleintr+0x1cb>
80100bfd:	8d 76 00             	lea    0x0(%esi),%esi

80100c00 <consoleinit>:

void
consoleinit(void)
{
80100c00:	55                   	push   %ebp
80100c01:	89 e5                	mov    %esp,%ebp
80100c03:	83 ec 10             	sub    $0x10,%esp
	initlock(&cons.lock, "console");
80100c06:	68 a8 80 10 80       	push   $0x801080a8
80100c0b:	68 20 c1 12 80       	push   $0x8012c120
80100c10:	e8 8b 38 00 00       	call   801044a0 <initlock>

	devsw[CONSOLE].write = consolewrite;
	devsw[CONSOLE].read = consoleread;
	cons.locking = 1;

	ioapicenable(IRQ_KBD, 0);
80100c15:	58                   	pop    %eax
80100c16:	5a                   	pop    %edx
80100c17:	6a 00                	push   $0x0
80100c19:	6a 01                	push   $0x1
	devsw[CONSOLE].write = consolewrite;
80100c1b:	c7 05 2c cb 12 80 f0 	movl   $0x801005f0,0x8012cb2c
80100c22:	05 10 80 
	devsw[CONSOLE].read = consoleread;
80100c25:	c7 05 28 cb 12 80 80 	movl   $0x80100280,0x8012cb28
80100c2c:	02 10 80 
	cons.locking = 1;
80100c2f:	c7 05 54 c1 12 80 01 	movl   $0x1,0x8012c154
80100c36:	00 00 00 
	ioapicenable(IRQ_KBD, 0);
80100c39:	e8 62 1b 00 00       	call   801027a0 <ioapicenable>
}
80100c3e:	83 c4 10             	add    $0x10,%esp
80100c41:	c9                   	leave
80100c42:	c3                   	ret
80100c43:	66 90                	xchg   %ax,%ax
80100c45:	66 90                	xchg   %ax,%ax
80100c47:	66 90                	xchg   %ax,%ax
80100c49:	66 90                	xchg   %ax,%ax
80100c4b:	66 90                	xchg   %ax,%ax
80100c4d:	66 90                	xchg   %ax,%ax
80100c4f:	90                   	nop

80100c50 <exec>:
#include "boot/elf.h"
#include "drivers/mmu.h"

int
exec(char *path, char **argv)
{
80100c50:	55                   	push   %ebp
80100c51:	89 e5                	mov    %esp,%ebp
80100c53:	57                   	push   %edi
80100c54:	56                   	push   %esi
80100c55:	53                   	push   %ebx
80100c56:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
	uint argc, sz, sp, ustack[3 + MAXARG + 1];
	struct elfhdr elf;
	struct inode *ip;
	struct proghdr ph;
	pde_t *pgdir, *oldpgdir;
	struct proc *curproc = myproc();
80100c5c:	e8 7f 2d 00 00       	call   801039e0 <myproc>
80100c61:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)

	begin_op();
80100c67:	e8 54 1f 00 00       	call   80102bc0 <begin_op>

	if ((ip = namei(path)) == 0) {
80100c6c:	83 ec 0c             	sub    $0xc,%esp
80100c6f:	ff 75 08             	push   0x8(%ebp)
80100c72:	e8 49 17 00 00       	call   801023c0 <namei>
80100c77:	83 c4 10             	add    $0x10,%esp
80100c7a:	85 c0                	test   %eax,%eax
80100c7c:	0f 84 7e 03 00 00    	je     80101000 <exec+0x3b0>
		end_op();
		return -1;
	}
	ilock(ip);
80100c82:	83 ec 0c             	sub    $0xc,%esp
80100c85:	89 c7                	mov    %eax,%edi
80100c87:	50                   	push   %eax
80100c88:	e8 d3 0d 00 00       	call   80101a60 <ilock>
    iunlockput(ip);
    return -1;
  }*/
	// TODO change "1" to check for user permissions
	// add back when proper file permissions are added.
	if (!S_HASPERM(ip->mode, S_IXUSR)) {
80100c8d:	8b 47 5c             	mov    0x5c(%edi),%eax
80100c90:	83 c4 10             	add    $0x10,%esp
80100c93:	a8 40                	test   $0x40,%al
80100c95:	75 14                	jne    80100cab <exec+0x5b>
		// if we're in the right group, we're fine.
		// if we have group privs but not in the
		// right group, this fails.
		if (S_HASPERM(ip->mode, S_IXGRP)) {
80100c97:	a8 08                	test   $0x8,%al
80100c99:	0f 84 1b 03 00 00    	je     80100fba <exec+0x36a>
			if (ip->gid & 1) {
80100c9f:	0f b7 47 60          	movzwl 0x60(%edi),%eax
80100ca3:	a8 01                	test   $0x1,%al
80100ca5:	0f 84 fe 02 00 00    	je     80100fa9 <exec+0x359>
		return -1;
	}

ok:
	// Check ELF header
	if (readi(ip, (char *)&elf, 0, sizeof(elf)) != sizeof(elf))
80100cab:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
80100cb1:	6a 34                	push   $0x34
80100cb3:	6a 00                	push   $0x0
80100cb5:	50                   	push   %eax
80100cb6:	57                   	push   %edi
80100cb7:	e8 f4 10 00 00       	call   80101db0 <readi>
80100cbc:	83 c4 10             	add    $0x10,%esp
80100cbf:	83 f8 34             	cmp    $0x34,%eax
80100cc2:	0f 85 fb 00 00 00    	jne    80100dc3 <exec+0x173>
		goto bad;
	if (elf.magic != ELF_MAGIC)
80100cc8:	81 bd 24 ff ff ff 7f 	cmpl   $0x464c457f,-0xdc(%ebp)
80100ccf:	45 4c 46 
80100cd2:	0f 85 eb 00 00 00    	jne    80100dc3 <exec+0x173>
		goto bad;

	if ((pgdir = setupkvm()) == 0)
80100cd8:	e8 b3 5b 00 00       	call   80106890 <setupkvm>
80100cdd:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
80100ce3:	85 c0                	test   %eax,%eax
80100ce5:	0f 84 d8 00 00 00    	je     80100dc3 <exec+0x173>
		goto bad;

	// Load program into memory.
	sz = 0;
	for (i = 0, off = elf.phoff; i < elf.phnum; i++, off += sizeof(ph)) {
80100ceb:	66 83 bd 50 ff ff ff 	cmpw   $0x0,-0xb0(%ebp)
80100cf2:	00 
80100cf3:	8b b5 40 ff ff ff    	mov    -0xc0(%ebp),%esi
80100cf9:	0f 84 9e 02 00 00    	je     80100f9d <exec+0x34d>
	sz = 0;
80100cff:	c7 85 f0 fe ff ff 00 	movl   $0x0,-0x110(%ebp)
80100d06:	00 00 00 
	for (i = 0, off = elf.phoff; i < elf.phnum; i++, off += sizeof(ph)) {
80100d09:	31 db                	xor    %ebx,%ebx
80100d0b:	e9 86 00 00 00       	jmp    80100d96 <exec+0x146>
		if (readi(ip, (char *)&ph, off, sizeof(ph)) != sizeof(ph))
			goto bad;
		if (ph.type != ELF_PROG_LOAD)
80100d10:	83 bd 04 ff ff ff 01 	cmpl   $0x1,-0xfc(%ebp)
80100d17:	75 6c                	jne    80100d85 <exec+0x135>
			continue;
		if (ph.memsz < ph.filesz)
80100d19:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
80100d1f:	3b 85 14 ff ff ff    	cmp    -0xec(%ebp),%eax
80100d25:	0f 82 87 00 00 00    	jb     80100db2 <exec+0x162>
			goto bad;
		if (ph.vaddr + ph.memsz < ph.vaddr)
80100d2b:	03 85 0c ff ff ff    	add    -0xf4(%ebp),%eax
80100d31:	72 7f                	jb     80100db2 <exec+0x162>
			goto bad;
		if ((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
80100d33:	83 ec 04             	sub    $0x4,%esp
80100d36:	50                   	push   %eax
80100d37:	ff b5 f0 fe ff ff    	push   -0x110(%ebp)
80100d3d:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
80100d43:	e8 78 59 00 00       	call   801066c0 <allocuvm>
80100d48:	83 c4 10             	add    $0x10,%esp
80100d4b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
80100d51:	85 c0                	test   %eax,%eax
80100d53:	74 5d                	je     80100db2 <exec+0x162>
			goto bad;
		if (ph.vaddr % PGSIZE != 0)
80100d55:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
80100d5b:	a9 ff 0f 00 00       	test   $0xfff,%eax
80100d60:	75 50                	jne    80100db2 <exec+0x162>
			goto bad;
		if (loaduvm(pgdir, (char *)ph.vaddr, ip, ph.off, ph.filesz) < 0)
80100d62:	83 ec 0c             	sub    $0xc,%esp
80100d65:	ff b5 14 ff ff ff    	push   -0xec(%ebp)
80100d6b:	ff b5 08 ff ff ff    	push   -0xf8(%ebp)
80100d71:	57                   	push   %edi
80100d72:	50                   	push   %eax
80100d73:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
80100d79:	e8 72 58 00 00       	call   801065f0 <loaduvm>
80100d7e:	83 c4 20             	add    $0x20,%esp
80100d81:	85 c0                	test   %eax,%eax
80100d83:	78 2d                	js     80100db2 <exec+0x162>
	for (i = 0, off = elf.phoff; i < elf.phnum; i++, off += sizeof(ph)) {
80100d85:	0f b7 85 50 ff ff ff 	movzwl -0xb0(%ebp),%eax
80100d8c:	83 c3 01             	add    $0x1,%ebx
80100d8f:	83 c6 20             	add    $0x20,%esi
80100d92:	39 d8                	cmp    %ebx,%eax
80100d94:	7e 4a                	jle    80100de0 <exec+0x190>
		if (readi(ip, (char *)&ph, off, sizeof(ph)) != sizeof(ph))
80100d96:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
80100d9c:	6a 20                	push   $0x20
80100d9e:	56                   	push   %esi
80100d9f:	50                   	push   %eax
80100da0:	57                   	push   %edi
80100da1:	e8 0a 10 00 00       	call   80101db0 <readi>
80100da6:	83 c4 10             	add    $0x10,%esp
80100da9:	83 f8 20             	cmp    $0x20,%eax
80100dac:	0f 84 5e ff ff ff    	je     80100d10 <exec+0xc0>
	freevm(oldpgdir);
	return 0;

bad:
	if (pgdir)
		freevm(pgdir);
80100db2:	83 ec 0c             	sub    $0xc,%esp
80100db5:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
80100dbb:	e8 50 5a 00 00       	call   80106810 <freevm>
	if (ip) {
80100dc0:	83 c4 10             	add    $0x10,%esp
		iunlockput(ip);
80100dc3:	83 ec 0c             	sub    $0xc,%esp
80100dc6:	57                   	push   %edi
80100dc7:	e8 44 0f 00 00       	call   80101d10 <iunlockput>
		end_op();
80100dcc:	e8 5f 1e 00 00       	call   80102c30 <end_op>
80100dd1:	83 c4 10             	add    $0x10,%esp
80100dd4:	e9 e2 00 00 00       	jmp    80100ebb <exec+0x26b>
80100dd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
	sz = PGROUNDUP(sz);
80100de0:	8b b5 f0 fe ff ff    	mov    -0x110(%ebp),%esi
80100de6:	81 c6 ff 0f 00 00    	add    $0xfff,%esi
80100dec:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
	if ((sz = allocuvm(pgdir, sz, sz + 2 * PGSIZE)) == 0)
80100df2:	8d 9e 00 20 00 00    	lea    0x2000(%esi),%ebx
	iunlockput(ip);
80100df8:	83 ec 0c             	sub    $0xc,%esp
80100dfb:	57                   	push   %edi
80100dfc:	e8 0f 0f 00 00       	call   80101d10 <iunlockput>
	end_op();
80100e01:	e8 2a 1e 00 00       	call   80102c30 <end_op>
	if ((sz = allocuvm(pgdir, sz, sz + 2 * PGSIZE)) == 0)
80100e06:	83 c4 0c             	add    $0xc,%esp
80100e09:	53                   	push   %ebx
80100e0a:	56                   	push   %esi
80100e0b:	8b b5 f4 fe ff ff    	mov    -0x10c(%ebp),%esi
80100e11:	56                   	push   %esi
80100e12:	e8 a9 58 00 00       	call   801066c0 <allocuvm>
80100e17:	83 c4 10             	add    $0x10,%esp
80100e1a:	89 c7                	mov    %eax,%edi
80100e1c:	85 c0                	test   %eax,%eax
80100e1e:	0f 84 86 00 00 00    	je     80100eaa <exec+0x25a>
	clearpteu(pgdir, (char *)(sz - 2 * PGSIZE));
80100e24:	83 ec 08             	sub    $0x8,%esp
80100e27:	8d 80 00 e0 ff ff    	lea    -0x2000(%eax),%eax
	sp = sz;
80100e2d:	89 fb                	mov    %edi,%ebx
	clearpteu(pgdir, (char *)(sz - 2 * PGSIZE));
80100e2f:	50                   	push   %eax
80100e30:	56                   	push   %esi
	for (argc = 0; argv[argc]; argc++) {
80100e31:	31 f6                	xor    %esi,%esi
	clearpteu(pgdir, (char *)(sz - 2 * PGSIZE));
80100e33:	e8 f8 5a 00 00       	call   80106930 <clearpteu>
	for (argc = 0; argv[argc]; argc++) {
80100e38:	8b 45 0c             	mov    0xc(%ebp),%eax
80100e3b:	83 c4 10             	add    $0x10,%esp
80100e3e:	8b 10                	mov    (%eax),%edx
80100e40:	85 d2                	test   %edx,%edx
80100e42:	0f 84 94 01 00 00    	je     80100fdc <exec+0x38c>
80100e48:	89 bd f0 fe ff ff    	mov    %edi,-0x110(%ebp)
80100e4e:	8b 7d 0c             	mov    0xc(%ebp),%edi
80100e51:	eb 23                	jmp    80100e76 <exec+0x226>
80100e53:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
80100e58:	8d 46 01             	lea    0x1(%esi),%eax
		ustack[3 + argc] = sp;
80100e5b:	89 9c b5 64 ff ff ff 	mov    %ebx,-0x9c(%ebp,%esi,4)
80100e62:	8d 8d 58 ff ff ff    	lea    -0xa8(%ebp),%ecx
	for (argc = 0; argv[argc]; argc++) {
80100e68:	8b 14 87             	mov    (%edi,%eax,4),%edx
80100e6b:	85 d2                	test   %edx,%edx
80100e6d:	74 59                	je     80100ec8 <exec+0x278>
		if (argc >= MAXARG)
80100e6f:	83 f8 20             	cmp    $0x20,%eax
80100e72:	74 36                	je     80100eaa <exec+0x25a>
80100e74:	89 c6                	mov    %eax,%esi
		sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
80100e76:	83 ec 0c             	sub    $0xc,%esp
80100e79:	52                   	push   %edx
80100e7a:	e8 01 3b 00 00       	call   80104980 <strlen>
80100e7f:	29 c3                	sub    %eax,%ebx
		if (copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
80100e81:	58                   	pop    %eax
80100e82:	ff 34 b7             	push   (%edi,%esi,4)
		sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
80100e85:	83 eb 01             	sub    $0x1,%ebx
80100e88:	83 e3 fc             	and    $0xfffffffc,%ebx
		if (copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
80100e8b:	e8 f0 3a 00 00       	call   80104980 <strlen>
80100e90:	83 c0 01             	add    $0x1,%eax
80100e93:	50                   	push   %eax
80100e94:	ff 34 b7             	push   (%edi,%esi,4)
80100e97:	53                   	push   %ebx
80100e98:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
80100e9e:	e8 5d 5c 00 00       	call   80106b00 <copyout>
80100ea3:	83 c4 20             	add    $0x20,%esp
80100ea6:	85 c0                	test   %eax,%eax
80100ea8:	79 ae                	jns    80100e58 <exec+0x208>
		freevm(pgdir);
80100eaa:	83 ec 0c             	sub    $0xc,%esp
80100ead:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
80100eb3:	e8 58 59 00 00       	call   80106810 <freevm>
80100eb8:	83 c4 10             	add    $0x10,%esp
		return -1;
80100ebb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
	return -1;
}
80100ec0:	8d 65 f4             	lea    -0xc(%ebp),%esp
80100ec3:	5b                   	pop    %ebx
80100ec4:	5e                   	pop    %esi
80100ec5:	5f                   	pop    %edi
80100ec6:	5d                   	pop    %ebp
80100ec7:	c3                   	ret
	ustack[2] = sp - (argc + 1) * 4; // argv pointer
80100ec8:	8d 14 b5 08 00 00 00 	lea    0x8(,%esi,4),%edx
	ustack[3 + argc] = 0;
80100ecf:	8b bd f0 fe ff ff    	mov    -0x110(%ebp),%edi
80100ed5:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
80100edb:	8d 46 04             	lea    0x4(%esi),%eax
	sp -= (3 + argc + 1) * 4;
80100ede:	8d 72 0c             	lea    0xc(%edx),%esi
	ustack[3 + argc] = 0;
80100ee1:	c7 84 85 58 ff ff ff 	movl   $0x0,-0xa8(%ebp,%eax,4)
80100ee8:	00 00 00 00 
	ustack[1] = argc;
80100eec:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
	ustack[0] = 0xffffffff; // fake return PC
80100ef2:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%ebp)
80100ef9:	ff ff ff 
	ustack[1] = argc;
80100efc:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	ustack[2] = sp - (argc + 1) * 4; // argv pointer
80100f02:	89 d8                	mov    %ebx,%eax
	sp -= (3 + argc + 1) * 4;
80100f04:	29 f3                	sub    %esi,%ebx
	ustack[2] = sp - (argc + 1) * 4; // argv pointer
80100f06:	29 d0                	sub    %edx,%eax
80100f08:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
	if (copyout(pgdir, sp, ustack, (3 + argc + 1) * 4) < 0)
80100f0e:	56                   	push   %esi
80100f0f:	51                   	push   %ecx
80100f10:	53                   	push   %ebx
80100f11:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
80100f17:	e8 e4 5b 00 00       	call   80106b00 <copyout>
80100f1c:	83 c4 10             	add    $0x10,%esp
80100f1f:	85 c0                	test   %eax,%eax
80100f21:	78 87                	js     80100eaa <exec+0x25a>
	for (last = s = path; *s; s++)
80100f23:	8b 45 08             	mov    0x8(%ebp),%eax
80100f26:	8b 55 08             	mov    0x8(%ebp),%edx
80100f29:	0f b6 00             	movzbl (%eax),%eax
80100f2c:	84 c0                	test   %al,%al
80100f2e:	74 17                	je     80100f47 <exec+0x2f7>
80100f30:	89 d1                	mov    %edx,%ecx
80100f32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
			last = s + 1;
80100f38:	83 c1 01             	add    $0x1,%ecx
80100f3b:	3c 2f                	cmp    $0x2f,%al
	for (last = s = path; *s; s++)
80100f3d:	0f b6 01             	movzbl (%ecx),%eax
			last = s + 1;
80100f40:	0f 44 d1             	cmove  %ecx,%edx
	for (last = s = path; *s; s++)
80100f43:	84 c0                	test   %al,%al
80100f45:	75 f1                	jne    80100f38 <exec+0x2e8>
	safestrcpy(curproc->name, last, sizeof(curproc->name));
80100f47:	83 ec 04             	sub    $0x4,%esp
80100f4a:	6a 10                	push   $0x10
80100f4c:	52                   	push   %edx
80100f4d:	8b b5 ec fe ff ff    	mov    -0x114(%ebp),%esi
80100f53:	8d 86 f4 00 00 00    	lea    0xf4(%esi),%eax
80100f59:	50                   	push   %eax
80100f5a:	e8 e1 39 00 00       	call   80104940 <safestrcpy>
	curproc->pgdir = pgdir;
80100f5f:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
	oldpgdir = curproc->pgdir;
80100f65:	89 f0                	mov    %esi,%eax
80100f67:	8b 76 04             	mov    0x4(%esi),%esi
	curproc->sz = sz;
80100f6a:	89 38                	mov    %edi,(%eax)
	curproc->pgdir = pgdir;
80100f6c:	89 48 04             	mov    %ecx,0x4(%eax)
	curproc->tf->eip = elf.entry; // main
80100f6f:	89 c1                	mov    %eax,%ecx
80100f71:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
80100f77:	8b 40 1c             	mov    0x1c(%eax),%eax
80100f7a:	89 50 38             	mov    %edx,0x38(%eax)
	curproc->tf->esp = sp;
80100f7d:	8b 41 1c             	mov    0x1c(%ecx),%eax
80100f80:	89 58 44             	mov    %ebx,0x44(%eax)
	switchuvm(curproc);
80100f83:	89 0c 24             	mov    %ecx,(%esp)
80100f86:	e8 d5 54 00 00       	call   80106460 <switchuvm>
	freevm(oldpgdir);
80100f8b:	89 34 24             	mov    %esi,(%esp)
80100f8e:	e8 7d 58 00 00       	call   80106810 <freevm>
	return 0;
80100f93:	83 c4 10             	add    $0x10,%esp
80100f96:	31 c0                	xor    %eax,%eax
80100f98:	e9 23 ff ff ff       	jmp    80100ec0 <exec+0x270>
	for (i = 0, off = elf.phoff; i < elf.phnum; i++, off += sizeof(ph)) {
80100f9d:	bb 00 20 00 00       	mov    $0x2000,%ebx
80100fa2:	31 f6                	xor    %esi,%esi
80100fa4:	e9 4f fe ff ff       	jmp    80100df8 <exec+0x1a8>
			cprintf("exec: user is not in group %d\n", ip->gid);
80100fa9:	83 ec 08             	sub    $0x8,%esp
80100fac:	50                   	push   %eax
80100fad:	68 6c 87 10 80       	push   $0x8010876c
80100fb2:	e8 99 f7 ff ff       	call   80100750 <cprintf>
80100fb7:	83 c4 10             	add    $0x10,%esp
		end_op();
80100fba:	e8 71 1c 00 00       	call   80102c30 <end_op>
		cprintf("exec: file is not executable\n");
80100fbf:	83 ec 0c             	sub    $0xc,%esp
80100fc2:	68 b0 80 10 80       	push   $0x801080b0
80100fc7:	e8 84 f7 ff ff       	call   80100750 <cprintf>
		iunlockput(ip);
80100fcc:	89 3c 24             	mov    %edi,(%esp)
80100fcf:	e8 3c 0d 00 00       	call   80101d10 <iunlockput>
		return -1;
80100fd4:	83 c4 10             	add    $0x10,%esp
80100fd7:	e9 df fe ff ff       	jmp    80100ebb <exec+0x26b>
	for (argc = 0; argv[argc]; argc++) {
80100fdc:	be 10 00 00 00       	mov    $0x10,%esi
80100fe1:	ba 04 00 00 00       	mov    $0x4,%edx
80100fe6:	b8 03 00 00 00       	mov    $0x3,%eax
80100feb:	c7 85 f0 fe ff ff 00 	movl   $0x0,-0x110(%ebp)
80100ff2:	00 00 00 
80100ff5:	8d 8d 58 ff ff ff    	lea    -0xa8(%ebp),%ecx
80100ffb:	e9 e1 fe ff ff       	jmp    80100ee1 <exec+0x291>
		end_op();
80101000:	e8 2b 1c 00 00       	call   80102c30 <end_op>
		return -1;
80101005:	e9 b1 fe ff ff       	jmp    80100ebb <exec+0x26b>
8010100a:	66 90                	xchg   %ax,%ax
8010100c:	66 90                	xchg   %ax,%ax
8010100e:	66 90                	xchg   %ax,%ax

80101010 <fileinit>:
	struct file file[NFILE];
} ftable;

void
fileinit(void)
{
80101010:	55                   	push   %ebp
80101011:	89 e5                	mov    %esp,%ebp
80101013:	83 ec 10             	sub    $0x10,%esp
	initlock(&ftable.lock, "ftable");
80101016:	68 ce 80 10 80       	push   $0x801080ce
8010101b:	68 80 c1 12 80       	push   $0x8012c180
80101020:	e8 7b 34 00 00       	call   801044a0 <initlock>
}
80101025:	83 c4 10             	add    $0x10,%esp
80101028:	c9                   	leave
80101029:	c3                   	ret
8010102a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80101030 <filealloc>:

// Allocate a file structure.
struct file *
filealloc(void)
{
80101030:	55                   	push   %ebp
80101031:	89 e5                	mov    %esp,%ebp
80101033:	53                   	push   %ebx
	struct file *f;

	acquire(&ftable.lock);
	for (f = ftable.file; f < ftable.file + NFILE; f++) {
80101034:	bb b4 c1 12 80       	mov    $0x8012c1b4,%ebx
{
80101039:	83 ec 10             	sub    $0x10,%esp
	acquire(&ftable.lock);
8010103c:	68 80 c1 12 80       	push   $0x8012c180
80101041:	e8 4a 36 00 00       	call   80104690 <acquire>
80101046:	83 c4 10             	add    $0x10,%esp
80101049:	eb 10                	jmp    8010105b <filealloc+0x2b>
8010104b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
	for (f = ftable.file; f < ftable.file + NFILE; f++) {
80101050:	83 c3 18             	add    $0x18,%ebx
80101053:	81 fb 14 cb 12 80    	cmp    $0x8012cb14,%ebx
80101059:	74 25                	je     80101080 <filealloc+0x50>
		if (f->ref == 0) {
8010105b:	8b 43 04             	mov    0x4(%ebx),%eax
8010105e:	85 c0                	test   %eax,%eax
80101060:	75 ee                	jne    80101050 <filealloc+0x20>
			f->ref = 1;
			release(&ftable.lock);
80101062:	83 ec 0c             	sub    $0xc,%esp
			f->ref = 1;
80101065:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
			release(&ftable.lock);
8010106c:	68 80 c1 12 80       	push   $0x8012c180
80101071:	e8 ba 35 00 00       	call   80104630 <release>
			return f;
		}
	}
	release(&ftable.lock);
	return 0;
}
80101076:	89 d8                	mov    %ebx,%eax
			return f;
80101078:	83 c4 10             	add    $0x10,%esp
}
8010107b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010107e:	c9                   	leave
8010107f:	c3                   	ret
	release(&ftable.lock);
80101080:	83 ec 0c             	sub    $0xc,%esp
	return 0;
80101083:	31 db                	xor    %ebx,%ebx
	release(&ftable.lock);
80101085:	68 80 c1 12 80       	push   $0x8012c180
8010108a:	e8 a1 35 00 00       	call   80104630 <release>
}
8010108f:	89 d8                	mov    %ebx,%eax
	return 0;
80101091:	83 c4 10             	add    $0x10,%esp
}
80101094:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80101097:	c9                   	leave
80101098:	c3                   	ret
80101099:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

801010a0 <filedup>:

// Increment ref count for file f.
struct file *
filedup(struct file *f)
{
801010a0:	55                   	push   %ebp
801010a1:	89 e5                	mov    %esp,%ebp
801010a3:	53                   	push   %ebx
801010a4:	83 ec 10             	sub    $0x10,%esp
801010a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
	acquire(&ftable.lock);
801010aa:	68 80 c1 12 80       	push   $0x8012c180
801010af:	e8 dc 35 00 00       	call   80104690 <acquire>
	if (f->ref < 1)
801010b4:	8b 43 04             	mov    0x4(%ebx),%eax
801010b7:	83 c4 10             	add    $0x10,%esp
801010ba:	85 c0                	test   %eax,%eax
801010bc:	7e 1a                	jle    801010d8 <filedup+0x38>
		panic("filedup");
	f->ref++;
801010be:	83 c0 01             	add    $0x1,%eax
	release(&ftable.lock);
801010c1:	83 ec 0c             	sub    $0xc,%esp
	f->ref++;
801010c4:	89 43 04             	mov    %eax,0x4(%ebx)
	release(&ftable.lock);
801010c7:	68 80 c1 12 80       	push   $0x8012c180
801010cc:	e8 5f 35 00 00       	call   80104630 <release>
	return f;
}
801010d1:	89 d8                	mov    %ebx,%eax
801010d3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801010d6:	c9                   	leave
801010d7:	c3                   	ret
		panic("filedup");
801010d8:	83 ec 0c             	sub    $0xc,%esp
801010db:	68 d5 80 10 80       	push   $0x801080d5
801010e0:	e8 9b f2 ff ff       	call   80100380 <panic>
801010e5:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801010ec:	00 
801010ed:	8d 76 00             	lea    0x0(%esi),%esi

801010f0 <fileclose>:

// Close file f.  (Decrement ref count, close when reaches 0.)
void
fileclose(struct file *f)
{
801010f0:	55                   	push   %ebp
801010f1:	89 e5                	mov    %esp,%ebp
801010f3:	57                   	push   %edi
801010f4:	56                   	push   %esi
801010f5:	53                   	push   %ebx
801010f6:	83 ec 28             	sub    $0x28,%esp
801010f9:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct file ff;

	acquire(&ftable.lock);
801010fc:	68 80 c1 12 80       	push   $0x8012c180
80101101:	e8 8a 35 00 00       	call   80104690 <acquire>
	if (f->ref < 1)
80101106:	8b 53 04             	mov    0x4(%ebx),%edx
80101109:	83 c4 10             	add    $0x10,%esp
8010110c:	85 d2                	test   %edx,%edx
8010110e:	0f 8e a5 00 00 00    	jle    801011b9 <fileclose+0xc9>
		panic("fileclose");
	if (--f->ref > 0) {
80101114:	83 ea 01             	sub    $0x1,%edx
80101117:	89 53 04             	mov    %edx,0x4(%ebx)
8010111a:	75 44                	jne    80101160 <fileclose+0x70>
		release(&ftable.lock);
		return;
	}
	ff = *f;
8010111c:	0f b6 43 09          	movzbl 0x9(%ebx),%eax
	f->ref = 0;
	f->type = FD_NONE;
	release(&ftable.lock);
80101120:	83 ec 0c             	sub    $0xc,%esp
	ff = *f;
80101123:	8b 3b                	mov    (%ebx),%edi
	f->type = FD_NONE;
80101125:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
	ff = *f;
8010112b:	8b 73 0c             	mov    0xc(%ebx),%esi
8010112e:	88 45 e7             	mov    %al,-0x19(%ebp)
80101131:	8b 43 10             	mov    0x10(%ebx),%eax
80101134:	89 45 e0             	mov    %eax,-0x20(%ebp)
	release(&ftable.lock);
80101137:	68 80 c1 12 80       	push   $0x8012c180
8010113c:	e8 ef 34 00 00       	call   80104630 <release>

	if (ff.type == FD_PIPE)
80101141:	83 c4 10             	add    $0x10,%esp
80101144:	83 ff 01             	cmp    $0x1,%edi
80101147:	74 57                	je     801011a0 <fileclose+0xb0>
		pipeclose(ff.pipe, ff.writable);
	else if (ff.type == FD_INODE) {
80101149:	83 ff 02             	cmp    $0x2,%edi
8010114c:	74 2a                	je     80101178 <fileclose+0x88>
		begin_op();
		iput(ff.ip);
		end_op();
	}
}
8010114e:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101151:	5b                   	pop    %ebx
80101152:	5e                   	pop    %esi
80101153:	5f                   	pop    %edi
80101154:	5d                   	pop    %ebp
80101155:	c3                   	ret
80101156:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010115d:	00 
8010115e:	66 90                	xchg   %ax,%ax
		release(&ftable.lock);
80101160:	c7 45 08 80 c1 12 80 	movl   $0x8012c180,0x8(%ebp)
}
80101167:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010116a:	5b                   	pop    %ebx
8010116b:	5e                   	pop    %esi
8010116c:	5f                   	pop    %edi
8010116d:	5d                   	pop    %ebp
		release(&ftable.lock);
8010116e:	e9 bd 34 00 00       	jmp    80104630 <release>
80101173:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
		begin_op();
80101178:	e8 43 1a 00 00       	call   80102bc0 <begin_op>
		iput(ff.ip);
8010117d:	83 ec 0c             	sub    $0xc,%esp
80101180:	ff 75 e0             	push   -0x20(%ebp)
80101183:	e8 28 0a 00 00       	call   80101bb0 <iput>
		end_op();
80101188:	83 c4 10             	add    $0x10,%esp
}
8010118b:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010118e:	5b                   	pop    %ebx
8010118f:	5e                   	pop    %esi
80101190:	5f                   	pop    %edi
80101191:	5d                   	pop    %ebp
		end_op();
80101192:	e9 99 1a 00 00       	jmp    80102c30 <end_op>
80101197:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010119e:	00 
8010119f:	90                   	nop
		pipeclose(ff.pipe, ff.writable);
801011a0:	0f be 5d e7          	movsbl -0x19(%ebp),%ebx
801011a4:	83 ec 08             	sub    $0x8,%esp
801011a7:	53                   	push   %ebx
801011a8:	56                   	push   %esi
801011a9:	e8 a2 23 00 00       	call   80103550 <pipeclose>
801011ae:	83 c4 10             	add    $0x10,%esp
}
801011b1:	8d 65 f4             	lea    -0xc(%ebp),%esp
801011b4:	5b                   	pop    %ebx
801011b5:	5e                   	pop    %esi
801011b6:	5f                   	pop    %edi
801011b7:	5d                   	pop    %ebp
801011b8:	c3                   	ret
		panic("fileclose");
801011b9:	83 ec 0c             	sub    $0xc,%esp
801011bc:	68 dd 80 10 80       	push   $0x801080dd
801011c1:	e8 ba f1 ff ff       	call   80100380 <panic>
801011c6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801011cd:	00 
801011ce:	66 90                	xchg   %ax,%ax

801011d0 <filestat>:

// Get metadata about file f.
int
filestat(struct file *f, struct stat *st)
{
801011d0:	55                   	push   %ebp
801011d1:	89 e5                	mov    %esp,%ebp
801011d3:	53                   	push   %ebx
801011d4:	83 ec 04             	sub    $0x4,%esp
801011d7:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if (f->type == FD_INODE) {
801011da:	83 3b 02             	cmpl   $0x2,(%ebx)
801011dd:	75 31                	jne    80101210 <filestat+0x40>
		ilock(f->ip);
801011df:	83 ec 0c             	sub    $0xc,%esp
801011e2:	ff 73 10             	push   0x10(%ebx)
801011e5:	e8 76 08 00 00       	call   80101a60 <ilock>
		stati(f->ip, st);
801011ea:	58                   	pop    %eax
801011eb:	5a                   	pop    %edx
801011ec:	ff 75 0c             	push   0xc(%ebp)
801011ef:	ff 73 10             	push   0x10(%ebx)
801011f2:	e8 69 0b 00 00       	call   80101d60 <stati>
		iunlock(f->ip);
801011f7:	59                   	pop    %ecx
801011f8:	ff 73 10             	push   0x10(%ebx)
801011fb:	e8 60 09 00 00       	call   80101b60 <iunlock>
		return 0;
	}
	return -1;
}
80101200:	8b 5d fc             	mov    -0x4(%ebp),%ebx
		return 0;
80101203:	83 c4 10             	add    $0x10,%esp
80101206:	31 c0                	xor    %eax,%eax
}
80101208:	c9                   	leave
80101209:	c3                   	ret
8010120a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80101210:	8b 5d fc             	mov    -0x4(%ebp),%ebx
	return -1;
80101213:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80101218:	c9                   	leave
80101219:	c3                   	ret
8010121a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80101220 <fileread>:

// Read from file f.
int
fileread(struct file *f, char *addr, int n)
{
80101220:	55                   	push   %ebp
80101221:	89 e5                	mov    %esp,%ebp
80101223:	57                   	push   %edi
80101224:	56                   	push   %esi
80101225:	53                   	push   %ebx
80101226:	83 ec 0c             	sub    $0xc,%esp
80101229:	8b 5d 08             	mov    0x8(%ebp),%ebx
8010122c:	8b 75 0c             	mov    0xc(%ebp),%esi
8010122f:	8b 7d 10             	mov    0x10(%ebp),%edi
	int r;

	if (f->readable == 0)
80101232:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
80101236:	74 60                	je     80101298 <fileread+0x78>
		return -1;
	if (f->type == FD_PIPE)
80101238:	8b 03                	mov    (%ebx),%eax
8010123a:	83 f8 01             	cmp    $0x1,%eax
8010123d:	74 41                	je     80101280 <fileread+0x60>
		return piperead(f->pipe, addr, n);
	if (f->type == FD_INODE) {
8010123f:	83 f8 02             	cmp    $0x2,%eax
80101242:	75 5b                	jne    8010129f <fileread+0x7f>
		ilock(f->ip);
80101244:	83 ec 0c             	sub    $0xc,%esp
80101247:	ff 73 10             	push   0x10(%ebx)
8010124a:	e8 11 08 00 00       	call   80101a60 <ilock>
		if ((r = readi(f->ip, addr, f->off, n)) > 0)
8010124f:	57                   	push   %edi
80101250:	ff 73 14             	push   0x14(%ebx)
80101253:	56                   	push   %esi
80101254:	ff 73 10             	push   0x10(%ebx)
80101257:	e8 54 0b 00 00       	call   80101db0 <readi>
8010125c:	83 c4 20             	add    $0x20,%esp
8010125f:	89 c6                	mov    %eax,%esi
80101261:	85 c0                	test   %eax,%eax
80101263:	7e 03                	jle    80101268 <fileread+0x48>
			f->off += r;
80101265:	01 43 14             	add    %eax,0x14(%ebx)
		iunlock(f->ip);
80101268:	83 ec 0c             	sub    $0xc,%esp
8010126b:	ff 73 10             	push   0x10(%ebx)
8010126e:	e8 ed 08 00 00       	call   80101b60 <iunlock>
		return r;
80101273:	83 c4 10             	add    $0x10,%esp
	}
	panic("fileread");
}
80101276:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101279:	89 f0                	mov    %esi,%eax
8010127b:	5b                   	pop    %ebx
8010127c:	5e                   	pop    %esi
8010127d:	5f                   	pop    %edi
8010127e:	5d                   	pop    %ebp
8010127f:	c3                   	ret
		return piperead(f->pipe, addr, n);
80101280:	8b 43 0c             	mov    0xc(%ebx),%eax
80101283:	89 45 08             	mov    %eax,0x8(%ebp)
}
80101286:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101289:	5b                   	pop    %ebx
8010128a:	5e                   	pop    %esi
8010128b:	5f                   	pop    %edi
8010128c:	5d                   	pop    %ebp
		return piperead(f->pipe, addr, n);
8010128d:	e9 7e 24 00 00       	jmp    80103710 <piperead>
80101292:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		return -1;
80101298:	be ff ff ff ff       	mov    $0xffffffff,%esi
8010129d:	eb d7                	jmp    80101276 <fileread+0x56>
	panic("fileread");
8010129f:	83 ec 0c             	sub    $0xc,%esp
801012a2:	68 e7 80 10 80       	push   $0x801080e7
801012a7:	e8 d4 f0 ff ff       	call   80100380 <panic>
801012ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

801012b0 <filewrite>:

// Write to file f.
int
filewrite(struct file *f, char *addr, int n)
{
801012b0:	55                   	push   %ebp
801012b1:	89 e5                	mov    %esp,%ebp
801012b3:	57                   	push   %edi
801012b4:	56                   	push   %esi
801012b5:	53                   	push   %ebx
801012b6:	83 ec 1c             	sub    $0x1c,%esp
801012b9:	8b 45 0c             	mov    0xc(%ebp),%eax
801012bc:	8b 5d 08             	mov    0x8(%ebp),%ebx
801012bf:	89 45 dc             	mov    %eax,-0x24(%ebp)
801012c2:	8b 45 10             	mov    0x10(%ebp),%eax
	int r;

	if (f->writable == 0)
801012c5:	80 7b 09 00          	cmpb   $0x0,0x9(%ebx)
{
801012c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (f->writable == 0)
801012cc:	0f 84 bb 00 00 00    	je     8010138d <filewrite+0xdd>
		return -1;
	if (f->type == FD_PIPE)
801012d2:	8b 03                	mov    (%ebx),%eax
801012d4:	83 f8 01             	cmp    $0x1,%eax
801012d7:	0f 84 bf 00 00 00    	je     8010139c <filewrite+0xec>
		return pipewrite(f->pipe, addr, n);
	if (f->type == FD_INODE) {
801012dd:	83 f8 02             	cmp    $0x2,%eax
801012e0:	0f 85 c8 00 00 00    	jne    801013ae <filewrite+0xfe>
		// and 2 blocks of slop for non-aligned writes.
		// this really belongs lower down, since writei()
		// might be writing a device like the console.
		int max = ((MAXOPBLOCKS - 1 - 1 - 2) / 2) * 512;
		int i = 0;
		while (i < n) {
801012e6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
		int i = 0;
801012e9:	31 f6                	xor    %esi,%esi
		while (i < n) {
801012eb:	85 c0                	test   %eax,%eax
801012ed:	7f 30                	jg     8010131f <filewrite+0x6f>
801012ef:	e9 94 00 00 00       	jmp    80101388 <filewrite+0xd8>
801012f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
				n1 = max;

			begin_op();
			ilock(f->ip);
			if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
				f->off += r;
801012f8:	01 43 14             	add    %eax,0x14(%ebx)
			iunlock(f->ip);
801012fb:	83 ec 0c             	sub    $0xc,%esp
				f->off += r;
801012fe:	89 45 e0             	mov    %eax,-0x20(%ebp)
			iunlock(f->ip);
80101301:	ff 73 10             	push   0x10(%ebx)
80101304:	e8 57 08 00 00       	call   80101b60 <iunlock>
			end_op();
80101309:	e8 22 19 00 00       	call   80102c30 <end_op>

			if (r < 0)
				break;
			if (r != n1)
8010130e:	8b 45 e0             	mov    -0x20(%ebp),%eax
80101311:	83 c4 10             	add    $0x10,%esp
80101314:	39 c7                	cmp    %eax,%edi
80101316:	75 5c                	jne    80101374 <filewrite+0xc4>
				panic("short filewrite");
			i += r;
80101318:	01 fe                	add    %edi,%esi
		while (i < n) {
8010131a:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
8010131d:	7e 69                	jle    80101388 <filewrite+0xd8>
			int n1 = n - i;
8010131f:	8b 7d e4             	mov    -0x1c(%ebp),%edi
			if (n1 > max)
80101322:	b8 00 06 00 00       	mov    $0x600,%eax
			int n1 = n - i;
80101327:	29 f7                	sub    %esi,%edi
			if (n1 > max)
80101329:	39 c7                	cmp    %eax,%edi
8010132b:	0f 4f f8             	cmovg  %eax,%edi
			begin_op();
8010132e:	e8 8d 18 00 00       	call   80102bc0 <begin_op>
			ilock(f->ip);
80101333:	83 ec 0c             	sub    $0xc,%esp
80101336:	ff 73 10             	push   0x10(%ebx)
80101339:	e8 22 07 00 00       	call   80101a60 <ilock>
			if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
8010133e:	57                   	push   %edi
8010133f:	ff 73 14             	push   0x14(%ebx)
80101342:	8b 45 dc             	mov    -0x24(%ebp),%eax
80101345:	01 f0                	add    %esi,%eax
80101347:	50                   	push   %eax
80101348:	ff 73 10             	push   0x10(%ebx)
8010134b:	e8 70 0b 00 00       	call   80101ec0 <writei>
80101350:	83 c4 20             	add    $0x20,%esp
80101353:	85 c0                	test   %eax,%eax
80101355:	7f a1                	jg     801012f8 <filewrite+0x48>
80101357:	89 45 e0             	mov    %eax,-0x20(%ebp)
			iunlock(f->ip);
8010135a:	83 ec 0c             	sub    $0xc,%esp
8010135d:	ff 73 10             	push   0x10(%ebx)
80101360:	e8 fb 07 00 00       	call   80101b60 <iunlock>
			end_op();
80101365:	e8 c6 18 00 00       	call   80102c30 <end_op>
			if (r < 0)
8010136a:	8b 45 e0             	mov    -0x20(%ebp),%eax
8010136d:	83 c4 10             	add    $0x10,%esp
80101370:	85 c0                	test   %eax,%eax
80101372:	75 14                	jne    80101388 <filewrite+0xd8>
				panic("short filewrite");
80101374:	83 ec 0c             	sub    $0xc,%esp
80101377:	68 f0 80 10 80       	push   $0x801080f0
8010137c:	e8 ff ef ff ff       	call   80100380 <panic>
80101381:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		}
		return i == n ? n : -1;
80101388:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
8010138b:	74 05                	je     80101392 <filewrite+0xe2>
8010138d:	be ff ff ff ff       	mov    $0xffffffff,%esi
	}
	panic("filewrite");
}
80101392:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101395:	89 f0                	mov    %esi,%eax
80101397:	5b                   	pop    %ebx
80101398:	5e                   	pop    %esi
80101399:	5f                   	pop    %edi
8010139a:	5d                   	pop    %ebp
8010139b:	c3                   	ret
		return pipewrite(f->pipe, addr, n);
8010139c:	8b 43 0c             	mov    0xc(%ebx),%eax
8010139f:	89 45 08             	mov    %eax,0x8(%ebp)
}
801013a2:	8d 65 f4             	lea    -0xc(%ebp),%esp
801013a5:	5b                   	pop    %ebx
801013a6:	5e                   	pop    %esi
801013a7:	5f                   	pop    %edi
801013a8:	5d                   	pop    %ebp
		return pipewrite(f->pipe, addr, n);
801013a9:	e9 42 22 00 00       	jmp    801035f0 <pipewrite>
	panic("filewrite");
801013ae:	83 ec 0c             	sub    $0xc,%esp
801013b1:	68 f6 80 10 80       	push   $0x801080f6
801013b6:	e8 c5 ef ff ff       	call   80100380 <panic>
801013bb:	66 90                	xchg   %ax,%ax
801013bd:	66 90                	xchg   %ax,%ax
801013bf:	90                   	nop

801013c0 <balloc>:
// Blocks.

// Allocate a zeroed disk block.
static uint
balloc(uint dev)
{
801013c0:	55                   	push   %ebp
801013c1:	89 e5                	mov    %esp,%ebp
801013c3:	57                   	push   %edi
801013c4:	56                   	push   %esi
801013c5:	53                   	push   %ebx
801013c6:	83 ec 1c             	sub    $0x1c,%esp
	int b, bi, m;
	struct buf *bp;

	bp = 0;
	for (b = 0; b < sb.size; b += BPB) {
801013c9:	8b 0d d4 e7 12 80    	mov    0x8012e7d4,%ecx
{
801013cf:	89 45 dc             	mov    %eax,-0x24(%ebp)
	for (b = 0; b < sb.size; b += BPB) {
801013d2:	85 c9                	test   %ecx,%ecx
801013d4:	0f 84 8c 00 00 00    	je     80101466 <balloc+0xa6>
801013da:	31 ff                	xor    %edi,%edi
		bp = bread(dev, BBLOCK(b, sb));
801013dc:	89 f8                	mov    %edi,%eax
801013de:	83 ec 08             	sub    $0x8,%esp
801013e1:	89 fe                	mov    %edi,%esi
801013e3:	c1 f8 0f             	sar    $0xf,%eax
801013e6:	03 05 ec e7 12 80    	add    0x8012e7ec,%eax
801013ec:	50                   	push   %eax
801013ed:	ff 75 dc             	push   -0x24(%ebp)
801013f0:	e8 db ec ff ff       	call   801000d0 <bread>
801013f5:	89 7d d8             	mov    %edi,-0x28(%ebp)
801013f8:	83 c4 10             	add    $0x10,%esp
801013fb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		for (bi = 0; bi < BPB && b + bi < sb.size; bi++) {
801013fe:	a1 d4 e7 12 80       	mov    0x8012e7d4,%eax
80101403:	89 45 e0             	mov    %eax,-0x20(%ebp)
80101406:	31 c0                	xor    %eax,%eax
80101408:	eb 32                	jmp    8010143c <balloc+0x7c>
8010140a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
			m = 1 << (bi % 8);
80101410:	89 c1                	mov    %eax,%ecx
80101412:	bb 01 00 00 00       	mov    $0x1,%ebx
			if ((bp->data[bi / 8] & m) == 0) { // Is block free?
80101417:	8b 7d e4             	mov    -0x1c(%ebp),%edi
			m = 1 << (bi % 8);
8010141a:	83 e1 07             	and    $0x7,%ecx
8010141d:	d3 e3                	shl    %cl,%ebx
			if ((bp->data[bi / 8] & m) == 0) { // Is block free?
8010141f:	89 c1                	mov    %eax,%ecx
80101421:	c1 f9 03             	sar    $0x3,%ecx
80101424:	0f b6 7c 0f 5c       	movzbl 0x5c(%edi,%ecx,1),%edi
80101429:	89 fa                	mov    %edi,%edx
8010142b:	85 df                	test   %ebx,%edi
8010142d:	74 49                	je     80101478 <balloc+0xb8>
		for (bi = 0; bi < BPB && b + bi < sb.size; bi++) {
8010142f:	83 c0 01             	add    $0x1,%eax
80101432:	83 c6 01             	add    $0x1,%esi
80101435:	3d 00 80 00 00       	cmp    $0x8000,%eax
8010143a:	74 07                	je     80101443 <balloc+0x83>
8010143c:	8b 55 e0             	mov    -0x20(%ebp),%edx
8010143f:	39 d6                	cmp    %edx,%esi
80101441:	72 cd                	jb     80101410 <balloc+0x50>
				brelse(bp);
				bzero(dev, b + bi);
				return b + bi;
			}
		}
		brelse(bp);
80101443:	8b 7d d8             	mov    -0x28(%ebp),%edi
80101446:	83 ec 0c             	sub    $0xc,%esp
80101449:	ff 75 e4             	push   -0x1c(%ebp)
	for (b = 0; b < sb.size; b += BPB) {
8010144c:	81 c7 00 80 00 00    	add    $0x8000,%edi
		brelse(bp);
80101452:	e8 99 ed ff ff       	call   801001f0 <brelse>
	for (b = 0; b < sb.size; b += BPB) {
80101457:	83 c4 10             	add    $0x10,%esp
8010145a:	3b 3d d4 e7 12 80    	cmp    0x8012e7d4,%edi
80101460:	0f 82 76 ff ff ff    	jb     801013dc <balloc+0x1c>
	}
	panic("balloc: out of blocks");
80101466:	83 ec 0c             	sub    $0xc,%esp
80101469:	68 00 81 10 80       	push   $0x80108100
8010146e:	e8 0d ef ff ff       	call   80100380 <panic>
80101473:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
				bp->data[bi / 8] |= m; // Mark block in use.
80101478:	8b 7d e4             	mov    -0x1c(%ebp),%edi
				log_write(bp);
8010147b:	83 ec 0c             	sub    $0xc,%esp
				bp->data[bi / 8] |= m; // Mark block in use.
8010147e:	09 da                	or     %ebx,%edx
80101480:	88 54 0f 5c          	mov    %dl,0x5c(%edi,%ecx,1)
				log_write(bp);
80101484:	57                   	push   %edi
80101485:	e8 16 19 00 00       	call   80102da0 <log_write>
				brelse(bp);
8010148a:	89 3c 24             	mov    %edi,(%esp)
8010148d:	e8 5e ed ff ff       	call   801001f0 <brelse>
	bp = bread(dev, bno);
80101492:	58                   	pop    %eax
80101493:	5a                   	pop    %edx
80101494:	56                   	push   %esi
80101495:	ff 75 dc             	push   -0x24(%ebp)
80101498:	e8 33 ec ff ff       	call   801000d0 <bread>
	memset(bp->data, 0, BSIZE);
8010149d:	83 c4 0c             	add    $0xc,%esp
	bp = bread(dev, bno);
801014a0:	89 c3                	mov    %eax,%ebx
	memset(bp->data, 0, BSIZE);
801014a2:	8d 40 5c             	lea    0x5c(%eax),%eax
801014a5:	68 00 10 00 00       	push   $0x1000
801014aa:	6a 00                	push   $0x0
801014ac:	50                   	push   %eax
801014ad:	e8 de 32 00 00       	call   80104790 <memset>
	log_write(bp);
801014b2:	89 1c 24             	mov    %ebx,(%esp)
801014b5:	e8 e6 18 00 00       	call   80102da0 <log_write>
	brelse(bp);
801014ba:	89 1c 24             	mov    %ebx,(%esp)
801014bd:	e8 2e ed ff ff       	call   801001f0 <brelse>
}
801014c2:	8d 65 f4             	lea    -0xc(%ebp),%esp
801014c5:	89 f0                	mov    %esi,%eax
801014c7:	5b                   	pop    %ebx
801014c8:	5e                   	pop    %esi
801014c9:	5f                   	pop    %edi
801014ca:	5d                   	pop    %ebp
801014cb:	c3                   	ret
801014cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

801014d0 <iget>:
// Find the inode with number inum on device dev
// and return the in-memory copy. Does not lock
// the inode and does not read it from disk.
static struct inode *
iget(uint dev, uint inum)
{
801014d0:	55                   	push   %ebp
801014d1:	89 e5                	mov    %esp,%ebp
801014d3:	57                   	push   %edi
	struct inode *ip, *empty;

	acquire(&icache.lock);

	// Is the inode already cached?
	empty = 0;
801014d4:	31 ff                	xor    %edi,%edi
{
801014d6:	56                   	push   %esi
801014d7:	89 c6                	mov    %eax,%esi
801014d9:	53                   	push   %ebx
	for (ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++) {
801014da:	bb b4 cb 12 80       	mov    $0x8012cbb4,%ebx
{
801014df:	83 ec 28             	sub    $0x28,%esp
801014e2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
	acquire(&icache.lock);
801014e5:	68 80 cb 12 80       	push   $0x8012cb80
801014ea:	e8 a1 31 00 00       	call   80104690 <acquire>
	for (ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++) {
801014ef:	8b 55 e4             	mov    -0x1c(%ebp),%edx
	acquire(&icache.lock);
801014f2:	83 c4 10             	add    $0x10,%esp
801014f5:	eb 1b                	jmp    80101512 <iget+0x42>
801014f7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801014fe:	00 
801014ff:	90                   	nop
		if (ip->ref > 0 && ip->dev == dev && ip->inum == inum) {
80101500:	39 33                	cmp    %esi,(%ebx)
80101502:	74 6c                	je     80101570 <iget+0xa0>
	for (ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++) {
80101504:	81 c3 90 00 00 00    	add    $0x90,%ebx
8010150a:	81 fb d4 e7 12 80    	cmp    $0x8012e7d4,%ebx
80101510:	74 26                	je     80101538 <iget+0x68>
		if (ip->ref > 0 && ip->dev == dev && ip->inum == inum) {
80101512:	8b 43 08             	mov    0x8(%ebx),%eax
80101515:	85 c0                	test   %eax,%eax
80101517:	7f e7                	jg     80101500 <iget+0x30>
			ip->ref++;
			release(&icache.lock);
			return ip;
		}
		if (empty == 0 && ip->ref == 0) // Remember empty slot.
80101519:	85 ff                	test   %edi,%edi
8010151b:	75 e7                	jne    80101504 <iget+0x34>
8010151d:	85 c0                	test   %eax,%eax
8010151f:	75 76                	jne    80101597 <iget+0xc7>
			empty = ip;
80101521:	89 df                	mov    %ebx,%edi
	for (ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++) {
80101523:	81 c3 90 00 00 00    	add    $0x90,%ebx
80101529:	81 fb d4 e7 12 80    	cmp    $0x8012e7d4,%ebx
8010152f:	75 e1                	jne    80101512 <iget+0x42>
80101531:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
	}

	// Recycle an inode cache entry.
	if (empty == 0)
80101538:	85 ff                	test   %edi,%edi
8010153a:	74 79                	je     801015b5 <iget+0xe5>
	ip = empty;
	ip->dev = dev;
	ip->inum = inum;
	ip->ref = 1;
	ip->valid = 0;
	release(&icache.lock);
8010153c:	83 ec 0c             	sub    $0xc,%esp
	ip->dev = dev;
8010153f:	89 37                	mov    %esi,(%edi)
	ip->inum = inum;
80101541:	89 57 04             	mov    %edx,0x4(%edi)
	ip->ref = 1;
80101544:	c7 47 08 01 00 00 00 	movl   $0x1,0x8(%edi)
	ip->valid = 0;
8010154b:	c7 47 4c 00 00 00 00 	movl   $0x0,0x4c(%edi)
	release(&icache.lock);
80101552:	68 80 cb 12 80       	push   $0x8012cb80
80101557:	e8 d4 30 00 00       	call   80104630 <release>

	return ip;
8010155c:	83 c4 10             	add    $0x10,%esp
}
8010155f:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101562:	89 f8                	mov    %edi,%eax
80101564:	5b                   	pop    %ebx
80101565:	5e                   	pop    %esi
80101566:	5f                   	pop    %edi
80101567:	5d                   	pop    %ebp
80101568:	c3                   	ret
80101569:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		if (ip->ref > 0 && ip->dev == dev && ip->inum == inum) {
80101570:	39 53 04             	cmp    %edx,0x4(%ebx)
80101573:	75 8f                	jne    80101504 <iget+0x34>
			ip->ref++;
80101575:	83 c0 01             	add    $0x1,%eax
			release(&icache.lock);
80101578:	83 ec 0c             	sub    $0xc,%esp
			return ip;
8010157b:	89 df                	mov    %ebx,%edi
			ip->ref++;
8010157d:	89 43 08             	mov    %eax,0x8(%ebx)
			release(&icache.lock);
80101580:	68 80 cb 12 80       	push   $0x8012cb80
80101585:	e8 a6 30 00 00       	call   80104630 <release>
			return ip;
8010158a:	83 c4 10             	add    $0x10,%esp
}
8010158d:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101590:	89 f8                	mov    %edi,%eax
80101592:	5b                   	pop    %ebx
80101593:	5e                   	pop    %esi
80101594:	5f                   	pop    %edi
80101595:	5d                   	pop    %ebp
80101596:	c3                   	ret
	for (ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++) {
80101597:	81 c3 90 00 00 00    	add    $0x90,%ebx
8010159d:	81 fb d4 e7 12 80    	cmp    $0x8012e7d4,%ebx
801015a3:	74 10                	je     801015b5 <iget+0xe5>
		if (ip->ref > 0 && ip->dev == dev && ip->inum == inum) {
801015a5:	8b 43 08             	mov    0x8(%ebx),%eax
801015a8:	85 c0                	test   %eax,%eax
801015aa:	0f 8f 50 ff ff ff    	jg     80101500 <iget+0x30>
801015b0:	e9 68 ff ff ff       	jmp    8010151d <iget+0x4d>
		panic("iget: no inodes");
801015b5:	83 ec 0c             	sub    $0xc,%esp
801015b8:	68 16 81 10 80       	push   $0x80108116
801015bd:	e8 be ed ff ff       	call   80100380 <panic>
801015c2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801015c9:	00 
801015ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

801015d0 <bfree>:
{
801015d0:	55                   	push   %ebp
801015d1:	89 c1                	mov    %eax,%ecx
	bp = bread(dev, BBLOCK(b, sb));
801015d3:	89 d0                	mov    %edx,%eax
801015d5:	c1 e8 0f             	shr    $0xf,%eax
{
801015d8:	89 e5                	mov    %esp,%ebp
801015da:	56                   	push   %esi
801015db:	53                   	push   %ebx
	bp = bread(dev, BBLOCK(b, sb));
801015dc:	03 05 ec e7 12 80    	add    0x8012e7ec,%eax
{
801015e2:	89 d3                	mov    %edx,%ebx
	bp = bread(dev, BBLOCK(b, sb));
801015e4:	83 ec 08             	sub    $0x8,%esp
801015e7:	50                   	push   %eax
801015e8:	51                   	push   %ecx
801015e9:	e8 e2 ea ff ff       	call   801000d0 <bread>
	m = 1 << (bi % 8);
801015ee:	89 d9                	mov    %ebx,%ecx
	if ((bp->data[bi / 8] & m) == 0)
801015f0:	c1 fb 03             	sar    $0x3,%ebx
801015f3:	83 c4 10             	add    $0x10,%esp
	bp = bread(dev, BBLOCK(b, sb));
801015f6:	89 c6                	mov    %eax,%esi
	m = 1 << (bi % 8);
801015f8:	83 e1 07             	and    $0x7,%ecx
801015fb:	b8 01 00 00 00       	mov    $0x1,%eax
	if ((bp->data[bi / 8] & m) == 0)
80101600:	81 e3 ff 0f 00 00    	and    $0xfff,%ebx
	m = 1 << (bi % 8);
80101606:	d3 e0                	shl    %cl,%eax
	if ((bp->data[bi / 8] & m) == 0)
80101608:	0f b6 4c 1e 5c       	movzbl 0x5c(%esi,%ebx,1),%ecx
8010160d:	85 c1                	test   %eax,%ecx
8010160f:	74 23                	je     80101634 <bfree+0x64>
	bp->data[bi / 8] &= ~m;
80101611:	f7 d0                	not    %eax
	log_write(bp);
80101613:	83 ec 0c             	sub    $0xc,%esp
	bp->data[bi / 8] &= ~m;
80101616:	21 c8                	and    %ecx,%eax
80101618:	88 44 1e 5c          	mov    %al,0x5c(%esi,%ebx,1)
	log_write(bp);
8010161c:	56                   	push   %esi
8010161d:	e8 7e 17 00 00       	call   80102da0 <log_write>
	brelse(bp);
80101622:	89 34 24             	mov    %esi,(%esp)
80101625:	e8 c6 eb ff ff       	call   801001f0 <brelse>
}
8010162a:	83 c4 10             	add    $0x10,%esp
8010162d:	8d 65 f8             	lea    -0x8(%ebp),%esp
80101630:	5b                   	pop    %ebx
80101631:	5e                   	pop    %esi
80101632:	5d                   	pop    %ebp
80101633:	c3                   	ret
		panic("freeing free block");
80101634:	83 ec 0c             	sub    $0xc,%esp
80101637:	68 26 81 10 80       	push   $0x80108126
8010163c:	e8 3f ed ff ff       	call   80100380 <panic>
80101641:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80101648:	00 
80101649:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80101650 <bmap>:

// Return the disk block address of the nth block in inode ip.
// If there is no such block, bmap allocates one.
static uint
bmap(struct inode *ip, uint bn)
{
80101650:	55                   	push   %ebp
80101651:	89 e5                	mov    %esp,%ebp
80101653:	57                   	push   %edi
80101654:	56                   	push   %esi
80101655:	89 c6                	mov    %eax,%esi
80101657:	53                   	push   %ebx
80101658:	83 ec 1c             	sub    $0x1c,%esp
	uint addr, *a;
	struct buf *bp;

	if (bn < NDIRECT) {
8010165b:	83 fa 06             	cmp    $0x6,%edx
8010165e:	0f 86 8c 00 00 00    	jbe    801016f0 <bmap+0xa0>
		if ((addr = ip->addrs[bn]) == 0)
			ip->addrs[bn] = addr = balloc(ip->dev);
		return addr;
	}
	bn -= NDIRECT;
80101664:	8d 5a f9             	lea    -0x7(%edx),%ebx

	if (bn < NINDIRECT) {
80101667:	81 fb ff 03 00 00    	cmp    $0x3ff,%ebx
8010166d:	0f 87 9d 00 00 00    	ja     80101710 <bmap+0xc0>
		// Load indirect block, allocating if necessary.
		if ((addr = ip->addrs[NDIRECT]) == 0)
80101673:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
80101679:	85 c0                	test   %eax,%eax
8010167b:	74 5b                	je     801016d8 <bmap+0x88>
			ip->addrs[NDIRECT] = addr = balloc(ip->dev);
		bp = bread(ip->dev, addr);
8010167d:	83 ec 08             	sub    $0x8,%esp
80101680:	50                   	push   %eax
80101681:	ff 36                	push   (%esi)
80101683:	e8 48 ea ff ff       	call   801000d0 <bread>
		a = (uint *)bp->data;
		if ((addr = a[bn]) == 0) {
80101688:	83 c4 10             	add    $0x10,%esp
8010168b:	8d 5c 98 5c          	lea    0x5c(%eax,%ebx,4),%ebx
		bp = bread(ip->dev, addr);
8010168f:	89 c2                	mov    %eax,%edx
		if ((addr = a[bn]) == 0) {
80101691:	8b 3b                	mov    (%ebx),%edi
80101693:	85 ff                	test   %edi,%edi
80101695:	74 19                	je     801016b0 <bmap+0x60>
			a[bn] = addr = balloc(ip->dev);
			log_write(bp);
		}
		brelse(bp);
80101697:	83 ec 0c             	sub    $0xc,%esp
8010169a:	52                   	push   %edx
8010169b:	e8 50 eb ff ff       	call   801001f0 <brelse>
801016a0:	83 c4 10             	add    $0x10,%esp
		return addr;
	}

	panic("bmap: out of range");
}
801016a3:	8d 65 f4             	lea    -0xc(%ebp),%esp
801016a6:	89 f8                	mov    %edi,%eax
801016a8:	5b                   	pop    %ebx
801016a9:	5e                   	pop    %esi
801016aa:	5f                   	pop    %edi
801016ab:	5d                   	pop    %ebp
801016ac:	c3                   	ret
801016ad:	8d 76 00             	lea    0x0(%esi),%esi
801016b0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			a[bn] = addr = balloc(ip->dev);
801016b3:	8b 06                	mov    (%esi),%eax
801016b5:	e8 06 fd ff ff       	call   801013c0 <balloc>
			log_write(bp);
801016ba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
801016bd:	83 ec 0c             	sub    $0xc,%esp
			a[bn] = addr = balloc(ip->dev);
801016c0:	89 03                	mov    %eax,(%ebx)
801016c2:	89 c7                	mov    %eax,%edi
			log_write(bp);
801016c4:	52                   	push   %edx
801016c5:	e8 d6 16 00 00       	call   80102da0 <log_write>
801016ca:	8b 55 e4             	mov    -0x1c(%ebp),%edx
801016cd:	83 c4 10             	add    $0x10,%esp
801016d0:	eb c5                	jmp    80101697 <bmap+0x47>
801016d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
			ip->addrs[NDIRECT] = addr = balloc(ip->dev);
801016d8:	8b 06                	mov    (%esi),%eax
801016da:	e8 e1 fc ff ff       	call   801013c0 <balloc>
801016df:	89 86 8c 00 00 00    	mov    %eax,0x8c(%esi)
801016e5:	eb 96                	jmp    8010167d <bmap+0x2d>
801016e7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801016ee:	00 
801016ef:	90                   	nop
		if ((addr = ip->addrs[bn]) == 0)
801016f0:	8d 5a 1c             	lea    0x1c(%edx),%ebx
801016f3:	8b 3c 98             	mov    (%eax,%ebx,4),%edi
801016f6:	85 ff                	test   %edi,%edi
801016f8:	75 a9                	jne    801016a3 <bmap+0x53>
			ip->addrs[bn] = addr = balloc(ip->dev);
801016fa:	8b 00                	mov    (%eax),%eax
801016fc:	e8 bf fc ff ff       	call   801013c0 <balloc>
80101701:	89 04 9e             	mov    %eax,(%esi,%ebx,4)
80101704:	89 c7                	mov    %eax,%edi
}
80101706:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101709:	5b                   	pop    %ebx
8010170a:	89 f8                	mov    %edi,%eax
8010170c:	5e                   	pop    %esi
8010170d:	5f                   	pop    %edi
8010170e:	5d                   	pop    %ebp
8010170f:	c3                   	ret
	panic("bmap: out of range");
80101710:	83 ec 0c             	sub    $0xc,%esp
80101713:	68 39 81 10 80       	push   $0x80108139
80101718:	e8 63 ec ff ff       	call   80100380 <panic>
8010171d:	8d 76 00             	lea    0x0(%esi),%esi

80101720 <readsb>:
{
80101720:	55                   	push   %ebp
80101721:	89 e5                	mov    %esp,%ebp
80101723:	56                   	push   %esi
80101724:	53                   	push   %ebx
80101725:	8b 75 0c             	mov    0xc(%ebp),%esi
	bp = bread(dev, 1);
80101728:	83 ec 08             	sub    $0x8,%esp
8010172b:	6a 01                	push   $0x1
8010172d:	ff 75 08             	push   0x8(%ebp)
80101730:	e8 9b e9 ff ff       	call   801000d0 <bread>
	memmove(sb, bp->data, sizeof(*sb));
80101735:	83 c4 0c             	add    $0xc,%esp
	bp = bread(dev, 1);
80101738:	89 c3                	mov    %eax,%ebx
	memmove(sb, bp->data, sizeof(*sb));
8010173a:	8d 40 5c             	lea    0x5c(%eax),%eax
8010173d:	6a 1c                	push   $0x1c
8010173f:	50                   	push   %eax
80101740:	56                   	push   %esi
80101741:	e8 da 30 00 00       	call   80104820 <memmove>
	brelse(bp);
80101746:	89 5d 08             	mov    %ebx,0x8(%ebp)
80101749:	83 c4 10             	add    $0x10,%esp
}
8010174c:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010174f:	5b                   	pop    %ebx
80101750:	5e                   	pop    %esi
80101751:	5d                   	pop    %ebp
	brelse(bp);
80101752:	e9 99 ea ff ff       	jmp    801001f0 <brelse>
80101757:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010175e:	00 
8010175f:	90                   	nop

80101760 <iinit>:
{
80101760:	55                   	push   %ebp
80101761:	89 e5                	mov    %esp,%ebp
80101763:	53                   	push   %ebx
80101764:	bb c0 cb 12 80       	mov    $0x8012cbc0,%ebx
80101769:	83 ec 0c             	sub    $0xc,%esp
	initlock(&icache.lock, "icache");
8010176c:	68 4c 81 10 80       	push   $0x8010814c
80101771:	68 80 cb 12 80       	push   $0x8012cb80
80101776:	e8 25 2d 00 00       	call   801044a0 <initlock>
	for (i = 0; i < NINODE; i++) {
8010177b:	83 c4 10             	add    $0x10,%esp
8010177e:	66 90                	xchg   %ax,%ax
		initsleeplock(&icache.inode[i].lock, "inode");
80101780:	83 ec 08             	sub    $0x8,%esp
80101783:	68 53 81 10 80       	push   $0x80108153
80101788:	53                   	push   %ebx
	for (i = 0; i < NINODE; i++) {
80101789:	81 c3 90 00 00 00    	add    $0x90,%ebx
		initsleeplock(&icache.inode[i].lock, "inode");
8010178f:	e8 dc 2b 00 00       	call   80104370 <initsleeplock>
	for (i = 0; i < NINODE; i++) {
80101794:	83 c4 10             	add    $0x10,%esp
80101797:	81 fb e0 e7 12 80    	cmp    $0x8012e7e0,%ebx
8010179d:	75 e1                	jne    80101780 <iinit+0x20>
	bp = bread(dev, 1);
8010179f:	83 ec 08             	sub    $0x8,%esp
801017a2:	6a 01                	push   $0x1
801017a4:	ff 75 08             	push   0x8(%ebp)
801017a7:	e8 24 e9 ff ff       	call   801000d0 <bread>
	memmove(sb, bp->data, sizeof(*sb));
801017ac:	83 c4 0c             	add    $0xc,%esp
	bp = bread(dev, 1);
801017af:	89 c3                	mov    %eax,%ebx
	memmove(sb, bp->data, sizeof(*sb));
801017b1:	8d 40 5c             	lea    0x5c(%eax),%eax
801017b4:	6a 1c                	push   $0x1c
801017b6:	50                   	push   %eax
801017b7:	68 d4 e7 12 80       	push   $0x8012e7d4
801017bc:	e8 5f 30 00 00       	call   80104820 <memmove>
	brelse(bp);
801017c1:	89 1c 24             	mov    %ebx,(%esp)
801017c4:	e8 27 ea ff ff       	call   801001f0 <brelse>
	cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
801017c9:	ff 35 ec e7 12 80    	push   0x8012e7ec
801017cf:	ff 35 e8 e7 12 80    	push   0x8012e7e8
801017d5:	ff 35 e4 e7 12 80    	push   0x8012e7e4
801017db:	ff 35 e0 e7 12 80    	push   0x8012e7e0
801017e1:	ff 35 dc e7 12 80    	push   0x8012e7dc
801017e7:	ff 35 d8 e7 12 80    	push   0x8012e7d8
801017ed:	ff 35 d4 e7 12 80    	push   0x8012e7d4
801017f3:	68 8c 87 10 80       	push   $0x8010878c
801017f8:	e8 53 ef ff ff       	call   80100750 <cprintf>
}
801017fd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80101800:	83 c4 30             	add    $0x30,%esp
80101803:	c9                   	leave
80101804:	c3                   	ret
80101805:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010180c:	00 
8010180d:	8d 76 00             	lea    0x0(%esi),%esi

80101810 <ialloc>:
{
80101810:	55                   	push   %ebp
80101811:	89 e5                	mov    %esp,%ebp
80101813:	57                   	push   %edi
80101814:	56                   	push   %esi
80101815:	53                   	push   %ebx
80101816:	83 ec 3c             	sub    $0x3c,%esp
	for (inum = 1; inum < sb.ninodes; inum++) {
80101819:	83 3d dc e7 12 80 01 	cmpl   $0x1,0x8012e7dc
80101820:	0f 86 21 01 00 00    	jbe    80101947 <ialloc+0x137>
80101826:	bb 01 00 00 00       	mov    $0x1,%ebx
8010182b:	eb 1e                	jmp    8010184b <ialloc+0x3b>
8010182d:	8d 76 00             	lea    0x0(%esi),%esi
		brelse(bp);
80101830:	83 ec 0c             	sub    $0xc,%esp
	for (inum = 1; inum < sb.ninodes; inum++) {
80101833:	83 c3 01             	add    $0x1,%ebx
		brelse(bp);
80101836:	57                   	push   %edi
80101837:	e8 b4 e9 ff ff       	call   801001f0 <brelse>
	for (inum = 1; inum < sb.ninodes; inum++) {
8010183c:	83 c4 10             	add    $0x10,%esp
8010183f:	3b 1d dc e7 12 80    	cmp    0x8012e7dc,%ebx
80101845:	0f 83 fc 00 00 00    	jae    80101947 <ialloc+0x137>
		bp = bread(dev, IBLOCK(inum, sb));
8010184b:	89 d8                	mov    %ebx,%eax
8010184d:	83 ec 08             	sub    $0x8,%esp
80101850:	c1 e8 06             	shr    $0x6,%eax
80101853:	03 05 e8 e7 12 80    	add    0x8012e7e8,%eax
80101859:	50                   	push   %eax
8010185a:	ff 75 08             	push   0x8(%ebp)
8010185d:	e8 6e e8 ff ff       	call   801000d0 <bread>
		if (!S_ISANY(dip->mode)) { // a free inode
80101862:	83 c4 10             	add    $0x10,%esp
		bp = bread(dev, IBLOCK(inum, sb));
80101865:	89 c7                	mov    %eax,%edi
		dip = (struct dinode *)bp->data + inum % IPB;
80101867:	89 d8                	mov    %ebx,%eax
80101869:	83 e0 3f             	and    $0x3f,%eax
8010186c:	c1 e0 06             	shl    $0x6,%eax
8010186f:	8d 74 07 5c          	lea    0x5c(%edi,%eax,1),%esi
		if (!S_ISANY(dip->mode)) { // a free inode
80101873:	8b 4e 0c             	mov    0xc(%esi),%ecx
80101876:	89 c8                	mov    %ecx,%eax
80101878:	89 ca                	mov    %ecx,%edx
8010187a:	25 00 b0 00 00       	and    $0xb000,%eax
8010187f:	81 e2 00 f0 00 00    	and    $0xf000,%edx
80101885:	3d 00 20 00 00       	cmp    $0x2000,%eax
8010188a:	0f 94 45 c7          	sete   -0x39(%ebp)
8010188e:	81 fa 00 40 00 00    	cmp    $0x4000,%edx
80101894:	0f 94 c0             	sete   %al
80101897:	81 e1 00 d0 00 00    	and    $0xd000,%ecx
8010189d:	0a 45 c7             	or     -0x39(%ebp),%al
801018a0:	81 f9 00 80 00 00    	cmp    $0x8000,%ecx
801018a6:	0f 94 c1             	sete   %cl
801018a9:	08 c1                	or     %al,%cl
801018ab:	75 83                	jne    80101830 <ialloc+0x20>
801018ad:	81 fa 00 10 00 00    	cmp    $0x1000,%edx
801018b3:	0f 84 77 ff ff ff    	je     80101830 <ialloc+0x20>
			memset(dip, 0, sizeof(*dip));
801018b9:	83 ec 04             	sub    $0x4,%esp
801018bc:	6a 40                	push   $0x40
801018be:	6a 00                	push   $0x0
801018c0:	56                   	push   %esi
801018c1:	e8 ca 2e 00 00       	call   80104790 <memset>
			dip->mode = mode;
801018c6:	8b 45 0c             	mov    0xc(%ebp),%eax
			dip->gid = DEFAULT_GID;
801018c9:	c7 46 10 00 00 00 00 	movl   $0x0,0x10(%esi)
			dip->mode = mode;
801018d0:	89 46 0c             	mov    %eax,0xc(%esi)
			cmostime(&rtc);
801018d3:	8d 45 d0             	lea    -0x30(%ebp),%eax
801018d6:	89 04 24             	mov    %eax,(%esp)
801018d9:	e8 62 62 00 00       	call   80107b40 <cmostime>
			dip->ctime = RTC_TO_UNIX(rtc);
801018de:	6b 55 d4 3c          	imul   $0x3c,-0x2c(%ebp),%edx
801018e2:	69 45 d8 10 0e 00 00 	imul   $0xe10,-0x28(%ebp),%eax
801018e9:	01 d0                	add    %edx,%eax
801018eb:	69 55 e0 00 8d 27 00 	imul   $0x278d00,-0x20(%ebp),%edx
801018f2:	03 45 d0             	add    -0x30(%ebp),%eax
801018f5:	01 d0                	add    %edx,%eax
801018f7:	69 55 dc 80 51 01 00 	imul   $0x15180,-0x24(%ebp),%edx
801018fe:	01 d0                	add    %edx,%eax
80101900:	69 55 e4 80 33 e1 01 	imul   $0x1e13380,-0x1c(%ebp),%edx
80101907:	8d 94 10 00 a8 9d 50 	lea    0x509da800(%eax,%edx,1),%edx
8010190e:	89 56 14             	mov    %edx,0x14(%esi)
			dip->atime = RTC_TO_UNIX(rtc);
80101911:	69 55 e4 80 33 e1 01 	imul   $0x1e13380,-0x1c(%ebp),%edx
80101918:	8d 84 10 00 a8 9d 50 	lea    0x509da800(%eax,%edx,1),%eax
8010191f:	89 46 18             	mov    %eax,0x18(%esi)
			dip->mtime = RTC_TO_UNIX(rtc);
80101922:	89 46 1c             	mov    %eax,0x1c(%esi)
			log_write(bp); // mark it allocated on the disk
80101925:	89 3c 24             	mov    %edi,(%esp)
80101928:	e8 73 14 00 00       	call   80102da0 <log_write>
			brelse(bp);
8010192d:	89 3c 24             	mov    %edi,(%esp)
80101930:	e8 bb e8 ff ff       	call   801001f0 <brelse>
			return iget(dev, inum);
80101935:	8b 45 08             	mov    0x8(%ebp),%eax
80101938:	89 da                	mov    %ebx,%edx
8010193a:	e8 91 fb ff ff       	call   801014d0 <iget>
}
8010193f:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101942:	5b                   	pop    %ebx
80101943:	5e                   	pop    %esi
80101944:	5f                   	pop    %edi
80101945:	5d                   	pop    %ebp
80101946:	c3                   	ret
	panic("ialloc: no inodes");
80101947:	83 ec 0c             	sub    $0xc,%esp
8010194a:	68 59 81 10 80       	push   $0x80108159
8010194f:	e8 2c ea ff ff       	call   80100380 <panic>
80101954:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010195b:	00 
8010195c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80101960 <iupdate>:
{
80101960:	55                   	push   %ebp
80101961:	89 e5                	mov    %esp,%ebp
80101963:	57                   	push   %edi
80101964:	56                   	push   %esi
80101965:	53                   	push   %ebx
80101966:	83 ec 34             	sub    $0x34,%esp
80101969:	8b 5d 08             	mov    0x8(%ebp),%ebx
	bp = bread(ip->dev, IBLOCK(ip->inum, sb));
8010196c:	8b 43 04             	mov    0x4(%ebx),%eax
	memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
8010196f:	83 c3 70             	add    $0x70,%ebx
	bp = bread(ip->dev, IBLOCK(ip->inum, sb));
80101972:	c1 e8 06             	shr    $0x6,%eax
80101975:	03 05 e8 e7 12 80    	add    0x8012e7e8,%eax
8010197b:	50                   	push   %eax
8010197c:	ff 73 90             	push   -0x70(%ebx)
8010197f:	e8 4c e7 ff ff       	call   801000d0 <bread>
80101984:	89 c7                	mov    %eax,%edi
	dip = (struct dinode *)bp->data + ip->inum % IPB;
80101986:	8b 43 94             	mov    -0x6c(%ebx),%eax
80101989:	83 e0 3f             	and    $0x3f,%eax
8010198c:	c1 e0 06             	shl    $0x6,%eax
8010198f:	8d 74 07 5c          	lea    0x5c(%edi,%eax,1),%esi
	dip->major = ip->major;
80101993:	0f b7 43 e0          	movzwl -0x20(%ebx),%eax
	memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
80101997:	83 c6 20             	add    $0x20,%esi
	dip->major = ip->major;
8010199a:	66 89 46 e0          	mov    %ax,-0x20(%esi)
	dip->minor = ip->minor;
8010199e:	0f b7 43 e2          	movzwl -0x1e(%ebx),%eax
801019a2:	66 89 46 e2          	mov    %ax,-0x1e(%esi)
	dip->nlink = ip->nlink;
801019a6:	0f b7 43 e4          	movzwl -0x1c(%ebx),%eax
801019aa:	66 89 46 e4          	mov    %ax,-0x1c(%esi)
	dip->size = ip->size;
801019ae:	8b 43 e8             	mov    -0x18(%ebx),%eax
801019b1:	89 46 e8             	mov    %eax,-0x18(%esi)
	dip->mode = ip->mode;
801019b4:	8b 43 ec             	mov    -0x14(%ebx),%eax
801019b7:	89 46 ec             	mov    %eax,-0x14(%esi)
	cmostime(&rtc);
801019ba:	8d 45 d0             	lea    -0x30(%ebp),%eax
801019bd:	89 04 24             	mov    %eax,(%esp)
801019c0:	e8 7b 61 00 00       	call   80107b40 <cmostime>
	dip->mtime = RTC_TO_UNIX(rtc);
801019c5:	69 55 d8 10 0e 00 00 	imul   $0xe10,-0x28(%ebp),%edx
801019cc:	8b 45 d0             	mov    -0x30(%ebp),%eax
	memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
801019cf:	83 c4 0c             	add    $0xc,%esp
	dip->mtime = RTC_TO_UNIX(rtc);
801019d2:	8d 84 02 00 a8 9d 50 	lea    0x509da800(%edx,%eax,1),%eax
801019d9:	6b 55 d4 3c          	imul   $0x3c,-0x2c(%ebp),%edx
801019dd:	01 d0                	add    %edx,%eax
801019df:	69 55 e0 00 8d 27 00 	imul   $0x278d00,-0x20(%ebp),%edx
801019e6:	01 d0                	add    %edx,%eax
801019e8:	69 55 dc 80 51 01 00 	imul   $0x15180,-0x24(%ebp),%edx
801019ef:	01 d0                	add    %edx,%eax
801019f1:	69 55 e4 80 33 e1 01 	imul   $0x1e13380,-0x1c(%ebp),%edx
801019f8:	01 d0                	add    %edx,%eax
801019fa:	89 46 fc             	mov    %eax,-0x4(%esi)
	dip->atime = RTC_TO_UNIX(rtc);
801019fd:	89 46 f8             	mov    %eax,-0x8(%esi)
	dip->ctime = ip->ctime;
80101a00:	8b 43 f4             	mov    -0xc(%ebx),%eax
80101a03:	89 46 f4             	mov    %eax,-0xc(%esi)
	memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
80101a06:	6a 20                	push   $0x20
80101a08:	53                   	push   %ebx
80101a09:	56                   	push   %esi
80101a0a:	e8 11 2e 00 00       	call   80104820 <memmove>
	log_write(bp);
80101a0f:	89 3c 24             	mov    %edi,(%esp)
80101a12:	e8 89 13 00 00       	call   80102da0 <log_write>
	brelse(bp);
80101a17:	89 3c 24             	mov    %edi,(%esp)
80101a1a:	e8 d1 e7 ff ff       	call   801001f0 <brelse>
}
80101a1f:	83 c4 10             	add    $0x10,%esp
80101a22:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101a25:	5b                   	pop    %ebx
80101a26:	5e                   	pop    %esi
80101a27:	5f                   	pop    %edi
80101a28:	5d                   	pop    %ebp
80101a29:	c3                   	ret
80101a2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80101a30 <idup>:
{
80101a30:	55                   	push   %ebp
80101a31:	89 e5                	mov    %esp,%ebp
80101a33:	53                   	push   %ebx
80101a34:	83 ec 10             	sub    $0x10,%esp
80101a37:	8b 5d 08             	mov    0x8(%ebp),%ebx
	acquire(&icache.lock);
80101a3a:	68 80 cb 12 80       	push   $0x8012cb80
80101a3f:	e8 4c 2c 00 00       	call   80104690 <acquire>
	ip->ref++;
80101a44:	83 43 08 01          	addl   $0x1,0x8(%ebx)
	release(&icache.lock);
80101a48:	c7 04 24 80 cb 12 80 	movl   $0x8012cb80,(%esp)
80101a4f:	e8 dc 2b 00 00       	call   80104630 <release>
}
80101a54:	89 d8                	mov    %ebx,%eax
80101a56:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80101a59:	c9                   	leave
80101a5a:	c3                   	ret
80101a5b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

80101a60 <ilock>:
{
80101a60:	55                   	push   %ebp
80101a61:	89 e5                	mov    %esp,%ebp
80101a63:	56                   	push   %esi
80101a64:	53                   	push   %ebx
80101a65:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if (ip == 0 || ip->ref < 1)
80101a68:	85 db                	test   %ebx,%ebx
80101a6a:	0f 84 d7 00 00 00    	je     80101b47 <ilock+0xe7>
80101a70:	8b 4b 08             	mov    0x8(%ebx),%ecx
80101a73:	85 c9                	test   %ecx,%ecx
80101a75:	0f 8e cc 00 00 00    	jle    80101b47 <ilock+0xe7>
	acquiresleep(&ip->lock);
80101a7b:	83 ec 0c             	sub    $0xc,%esp
80101a7e:	8d 43 0c             	lea    0xc(%ebx),%eax
80101a81:	50                   	push   %eax
80101a82:	e8 29 29 00 00       	call   801043b0 <acquiresleep>
	if (ip->valid == 0) {
80101a87:	8b 53 4c             	mov    0x4c(%ebx),%edx
80101a8a:	83 c4 10             	add    $0x10,%esp
80101a8d:	85 d2                	test   %edx,%edx
80101a8f:	74 0f                	je     80101aa0 <ilock+0x40>
}
80101a91:	8d 65 f8             	lea    -0x8(%ebp),%esp
80101a94:	5b                   	pop    %ebx
80101a95:	5e                   	pop    %esi
80101a96:	5d                   	pop    %ebp
80101a97:	c3                   	ret
80101a98:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80101a9f:	00 
		bp = bread(ip->dev, IBLOCK(ip->inum, sb));
80101aa0:	8b 43 04             	mov    0x4(%ebx),%eax
80101aa3:	83 ec 08             	sub    $0x8,%esp
80101aa6:	c1 e8 06             	shr    $0x6,%eax
80101aa9:	03 05 e8 e7 12 80    	add    0x8012e7e8,%eax
80101aaf:	50                   	push   %eax
80101ab0:	ff 33                	push   (%ebx)
80101ab2:	e8 19 e6 ff ff       	call   801000d0 <bread>
		memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
80101ab7:	83 c4 0c             	add    $0xc,%esp
		bp = bread(ip->dev, IBLOCK(ip->inum, sb));
80101aba:	89 c6                	mov    %eax,%esi
		dip = (struct dinode *)bp->data + ip->inum % IPB;
80101abc:	8b 43 04             	mov    0x4(%ebx),%eax
80101abf:	83 e0 3f             	and    $0x3f,%eax
80101ac2:	c1 e0 06             	shl    $0x6,%eax
80101ac5:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
		ip->major = dip->major;
80101ac9:	0f b7 10             	movzwl (%eax),%edx
		memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
80101acc:	83 c0 20             	add    $0x20,%eax
		ip->major = dip->major;
80101acf:	66 89 53 50          	mov    %dx,0x50(%ebx)
		ip->minor = dip->minor;
80101ad3:	0f b7 50 e2          	movzwl -0x1e(%eax),%edx
80101ad7:	66 89 53 52          	mov    %dx,0x52(%ebx)
		ip->nlink = dip->nlink;
80101adb:	0f b7 50 e4          	movzwl -0x1c(%eax),%edx
80101adf:	66 89 53 54          	mov    %dx,0x54(%ebx)
		ip->size = dip->size;
80101ae3:	8b 50 e8             	mov    -0x18(%eax),%edx
80101ae6:	89 53 58             	mov    %edx,0x58(%ebx)
		ip->mode = dip->mode;
80101ae9:	8b 50 ec             	mov    -0x14(%eax),%edx
80101aec:	89 53 5c             	mov    %edx,0x5c(%ebx)
		ip->uid = dip->uid;
80101aef:	0f b7 50 f2          	movzwl -0xe(%eax),%edx
80101af3:	66 89 53 62          	mov    %dx,0x62(%ebx)
		ip->gid = dip->gid;
80101af7:	0f b7 50 f0          	movzwl -0x10(%eax),%edx
80101afb:	66 89 53 60          	mov    %dx,0x60(%ebx)
		ip->atime = dip->atime;
80101aff:	8b 50 f8             	mov    -0x8(%eax),%edx
80101b02:	89 53 68             	mov    %edx,0x68(%ebx)
		ip->ctime = dip->ctime;
80101b05:	8b 50 f4             	mov    -0xc(%eax),%edx
80101b08:	89 53 64             	mov    %edx,0x64(%ebx)
		ip->mtime = dip->mtime;
80101b0b:	8b 50 fc             	mov    -0x4(%eax),%edx
80101b0e:	89 53 6c             	mov    %edx,0x6c(%ebx)
		memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
80101b11:	6a 20                	push   $0x20
80101b13:	50                   	push   %eax
80101b14:	8d 43 70             	lea    0x70(%ebx),%eax
80101b17:	50                   	push   %eax
80101b18:	e8 03 2d 00 00       	call   80104820 <memmove>
		brelse(bp);
80101b1d:	89 34 24             	mov    %esi,(%esp)
80101b20:	e8 cb e6 ff ff       	call   801001f0 <brelse>
		if (ip->mode == 0)
80101b25:	8b 43 5c             	mov    0x5c(%ebx),%eax
		ip->valid = 1;
80101b28:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
		if (ip->mode == 0)
80101b2f:	83 c4 10             	add    $0x10,%esp
80101b32:	85 c0                	test   %eax,%eax
80101b34:	0f 85 57 ff ff ff    	jne    80101a91 <ilock+0x31>
			panic("ilock: no mode");
80101b3a:	83 ec 0c             	sub    $0xc,%esp
80101b3d:	68 71 81 10 80       	push   $0x80108171
80101b42:	e8 39 e8 ff ff       	call   80100380 <panic>
		panic("ilock");
80101b47:	83 ec 0c             	sub    $0xc,%esp
80101b4a:	68 6b 81 10 80       	push   $0x8010816b
80101b4f:	e8 2c e8 ff ff       	call   80100380 <panic>
80101b54:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80101b5b:	00 
80101b5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80101b60 <iunlock>:
{
80101b60:	55                   	push   %ebp
80101b61:	89 e5                	mov    %esp,%ebp
80101b63:	56                   	push   %esi
80101b64:	53                   	push   %ebx
80101b65:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if (ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
80101b68:	85 db                	test   %ebx,%ebx
80101b6a:	74 28                	je     80101b94 <iunlock+0x34>
80101b6c:	83 ec 0c             	sub    $0xc,%esp
80101b6f:	8d 73 0c             	lea    0xc(%ebx),%esi
80101b72:	56                   	push   %esi
80101b73:	e8 d8 28 00 00       	call   80104450 <holdingsleep>
80101b78:	83 c4 10             	add    $0x10,%esp
80101b7b:	85 c0                	test   %eax,%eax
80101b7d:	74 15                	je     80101b94 <iunlock+0x34>
80101b7f:	8b 43 08             	mov    0x8(%ebx),%eax
80101b82:	85 c0                	test   %eax,%eax
80101b84:	7e 0e                	jle    80101b94 <iunlock+0x34>
	releasesleep(&ip->lock);
80101b86:	89 75 08             	mov    %esi,0x8(%ebp)
}
80101b89:	8d 65 f8             	lea    -0x8(%ebp),%esp
80101b8c:	5b                   	pop    %ebx
80101b8d:	5e                   	pop    %esi
80101b8e:	5d                   	pop    %ebp
	releasesleep(&ip->lock);
80101b8f:	e9 7c 28 00 00       	jmp    80104410 <releasesleep>
		panic("iunlock");
80101b94:	83 ec 0c             	sub    $0xc,%esp
80101b97:	68 80 81 10 80       	push   $0x80108180
80101b9c:	e8 df e7 ff ff       	call   80100380 <panic>
80101ba1:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80101ba8:	00 
80101ba9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80101bb0 <iput>:
{
80101bb0:	55                   	push   %ebp
80101bb1:	89 e5                	mov    %esp,%ebp
80101bb3:	57                   	push   %edi
80101bb4:	56                   	push   %esi
80101bb5:	53                   	push   %ebx
80101bb6:	83 ec 28             	sub    $0x28,%esp
80101bb9:	8b 5d 08             	mov    0x8(%ebp),%ebx
	acquiresleep(&ip->lock);
80101bbc:	8d 7b 0c             	lea    0xc(%ebx),%edi
80101bbf:	57                   	push   %edi
80101bc0:	e8 eb 27 00 00       	call   801043b0 <acquiresleep>
	if (ip->valid && ip->nlink == 0) {
80101bc5:	8b 43 4c             	mov    0x4c(%ebx),%eax
80101bc8:	83 c4 10             	add    $0x10,%esp
80101bcb:	85 c0                	test   %eax,%eax
80101bcd:	74 07                	je     80101bd6 <iput+0x26>
80101bcf:	66 83 7b 54 00       	cmpw   $0x0,0x54(%ebx)
80101bd4:	74 32                	je     80101c08 <iput+0x58>
	releasesleep(&ip->lock);
80101bd6:	83 ec 0c             	sub    $0xc,%esp
80101bd9:	57                   	push   %edi
80101bda:	e8 31 28 00 00       	call   80104410 <releasesleep>
	acquire(&icache.lock);
80101bdf:	c7 04 24 80 cb 12 80 	movl   $0x8012cb80,(%esp)
80101be6:	e8 a5 2a 00 00       	call   80104690 <acquire>
	ip->ref--;
80101beb:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
	release(&icache.lock);
80101bef:	83 c4 10             	add    $0x10,%esp
80101bf2:	c7 45 08 80 cb 12 80 	movl   $0x8012cb80,0x8(%ebp)
}
80101bf9:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101bfc:	5b                   	pop    %ebx
80101bfd:	5e                   	pop    %esi
80101bfe:	5f                   	pop    %edi
80101bff:	5d                   	pop    %ebp
	release(&icache.lock);
80101c00:	e9 2b 2a 00 00       	jmp    80104630 <release>
80101c05:	8d 76 00             	lea    0x0(%esi),%esi
		acquire(&icache.lock);
80101c08:	83 ec 0c             	sub    $0xc,%esp
80101c0b:	68 80 cb 12 80       	push   $0x8012cb80
80101c10:	e8 7b 2a 00 00       	call   80104690 <acquire>
		int r = ip->ref;
80101c15:	8b 73 08             	mov    0x8(%ebx),%esi
		release(&icache.lock);
80101c18:	c7 04 24 80 cb 12 80 	movl   $0x8012cb80,(%esp)
80101c1f:	e8 0c 2a 00 00       	call   80104630 <release>
		if (r == 1) {
80101c24:	83 c4 10             	add    $0x10,%esp
80101c27:	83 fe 01             	cmp    $0x1,%esi
80101c2a:	75 aa                	jne    80101bd6 <iput+0x26>
80101c2c:	8d 8b 8c 00 00 00    	lea    0x8c(%ebx),%ecx
80101c32:	89 7d e4             	mov    %edi,-0x1c(%ebp)
80101c35:	8d 73 70             	lea    0x70(%ebx),%esi
80101c38:	89 df                	mov    %ebx,%edi
80101c3a:	89 cb                	mov    %ecx,%ebx
80101c3c:	eb 09                	jmp    80101c47 <iput+0x97>
80101c3e:	66 90                	xchg   %ax,%ax
{
	int i, j;
	struct buf *bp;
	uint *a;

	for (i = 0; i < NDIRECT; i++) {
80101c40:	83 c6 04             	add    $0x4,%esi
80101c43:	39 de                	cmp    %ebx,%esi
80101c45:	74 19                	je     80101c60 <iput+0xb0>
		if (ip->addrs[i]) {
80101c47:	8b 16                	mov    (%esi),%edx
80101c49:	85 d2                	test   %edx,%edx
80101c4b:	74 f3                	je     80101c40 <iput+0x90>
			bfree(ip->dev, ip->addrs[i]);
80101c4d:	8b 07                	mov    (%edi),%eax
80101c4f:	e8 7c f9 ff ff       	call   801015d0 <bfree>
			ip->addrs[i] = 0;
80101c54:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
80101c5a:	eb e4                	jmp    80101c40 <iput+0x90>
80101c5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
		}
	}

	if (ip->addrs[NDIRECT]) {
80101c60:	89 fb                	mov    %edi,%ebx
80101c62:	8b 7d e4             	mov    -0x1c(%ebp),%edi
80101c65:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
80101c6b:	85 c0                	test   %eax,%eax
80101c6d:	75 2e                	jne    80101c9d <iput+0xed>
		bfree(ip->dev, ip->addrs[NDIRECT]);
		ip->addrs[NDIRECT] = 0;
	}

	ip->size = 0;
	iupdate(ip);
80101c6f:	83 ec 0c             	sub    $0xc,%esp
	ip->size = 0;
80101c72:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
	iupdate(ip);
80101c79:	53                   	push   %ebx
80101c7a:	e8 e1 fc ff ff       	call   80101960 <iupdate>
			ip->mode = 0;
80101c7f:	c7 43 5c 00 00 00 00 	movl   $0x0,0x5c(%ebx)
			iupdate(ip);
80101c86:	89 1c 24             	mov    %ebx,(%esp)
80101c89:	e8 d2 fc ff ff       	call   80101960 <iupdate>
			ip->valid = 0;
80101c8e:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%ebx)
80101c95:	83 c4 10             	add    $0x10,%esp
80101c98:	e9 39 ff ff ff       	jmp    80101bd6 <iput+0x26>
		bp = bread(ip->dev, ip->addrs[NDIRECT]);
80101c9d:	83 ec 08             	sub    $0x8,%esp
80101ca0:	50                   	push   %eax
80101ca1:	ff 33                	push   (%ebx)
80101ca3:	e8 28 e4 ff ff       	call   801000d0 <bread>
		for (j = 0; j < NINDIRECT; j++) {
80101ca8:	89 7d e4             	mov    %edi,-0x1c(%ebp)
80101cab:	83 c4 10             	add    $0x10,%esp
80101cae:	8d 88 5c 10 00 00    	lea    0x105c(%eax),%ecx
80101cb4:	89 45 e0             	mov    %eax,-0x20(%ebp)
80101cb7:	8d 70 5c             	lea    0x5c(%eax),%esi
80101cba:	89 cf                	mov    %ecx,%edi
80101cbc:	eb 09                	jmp    80101cc7 <iput+0x117>
80101cbe:	66 90                	xchg   %ax,%ax
80101cc0:	83 c6 04             	add    $0x4,%esi
80101cc3:	39 fe                	cmp    %edi,%esi
80101cc5:	74 0f                	je     80101cd6 <iput+0x126>
			if (a[j])
80101cc7:	8b 16                	mov    (%esi),%edx
80101cc9:	85 d2                	test   %edx,%edx
80101ccb:	74 f3                	je     80101cc0 <iput+0x110>
				bfree(ip->dev, a[j]);
80101ccd:	8b 03                	mov    (%ebx),%eax
80101ccf:	e8 fc f8 ff ff       	call   801015d0 <bfree>
80101cd4:	eb ea                	jmp    80101cc0 <iput+0x110>
		brelse(bp);
80101cd6:	8b 45 e0             	mov    -0x20(%ebp),%eax
80101cd9:	83 ec 0c             	sub    $0xc,%esp
80101cdc:	8b 7d e4             	mov    -0x1c(%ebp),%edi
80101cdf:	50                   	push   %eax
80101ce0:	e8 0b e5 ff ff       	call   801001f0 <brelse>
		bfree(ip->dev, ip->addrs[NDIRECT]);
80101ce5:	8b 93 8c 00 00 00    	mov    0x8c(%ebx),%edx
80101ceb:	8b 03                	mov    (%ebx),%eax
80101ced:	e8 de f8 ff ff       	call   801015d0 <bfree>
		ip->addrs[NDIRECT] = 0;
80101cf2:	83 c4 10             	add    $0x10,%esp
80101cf5:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%ebx)
80101cfc:	00 00 00 
80101cff:	e9 6b ff ff ff       	jmp    80101c6f <iput+0xbf>
80101d04:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80101d0b:	00 
80101d0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80101d10 <iunlockput>:
{
80101d10:	55                   	push   %ebp
80101d11:	89 e5                	mov    %esp,%ebp
80101d13:	56                   	push   %esi
80101d14:	53                   	push   %ebx
80101d15:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if (ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
80101d18:	85 db                	test   %ebx,%ebx
80101d1a:	74 34                	je     80101d50 <iunlockput+0x40>
80101d1c:	83 ec 0c             	sub    $0xc,%esp
80101d1f:	8d 73 0c             	lea    0xc(%ebx),%esi
80101d22:	56                   	push   %esi
80101d23:	e8 28 27 00 00       	call   80104450 <holdingsleep>
80101d28:	83 c4 10             	add    $0x10,%esp
80101d2b:	85 c0                	test   %eax,%eax
80101d2d:	74 21                	je     80101d50 <iunlockput+0x40>
80101d2f:	8b 43 08             	mov    0x8(%ebx),%eax
80101d32:	85 c0                	test   %eax,%eax
80101d34:	7e 1a                	jle    80101d50 <iunlockput+0x40>
	releasesleep(&ip->lock);
80101d36:	83 ec 0c             	sub    $0xc,%esp
80101d39:	56                   	push   %esi
80101d3a:	e8 d1 26 00 00       	call   80104410 <releasesleep>
	iput(ip);
80101d3f:	89 5d 08             	mov    %ebx,0x8(%ebp)
80101d42:	83 c4 10             	add    $0x10,%esp
}
80101d45:	8d 65 f8             	lea    -0x8(%ebp),%esp
80101d48:	5b                   	pop    %ebx
80101d49:	5e                   	pop    %esi
80101d4a:	5d                   	pop    %ebp
	iput(ip);
80101d4b:	e9 60 fe ff ff       	jmp    80101bb0 <iput>
		panic("iunlock");
80101d50:	83 ec 0c             	sub    $0xc,%esp
80101d53:	68 80 81 10 80       	push   $0x80108180
80101d58:	e8 23 e6 ff ff       	call   80100380 <panic>
80101d5d:	8d 76 00             	lea    0x0(%esi),%esi

80101d60 <stati>:

// Copy stat information from inode.
// Caller must hold ip->lock.
void
stati(struct inode *ip, struct stat *st)
{
80101d60:	55                   	push   %ebp
80101d61:	89 e5                	mov    %esp,%ebp
80101d63:	8b 55 08             	mov    0x8(%ebp),%edx
80101d66:	8b 45 0c             	mov    0xc(%ebp),%eax
	st->st_dev = ip->dev;
80101d69:	8b 0a                	mov    (%edx),%ecx
80101d6b:	89 08                	mov    %ecx,(%eax)
	st->st_ino = ip->inum;
80101d6d:	8b 4a 04             	mov    0x4(%edx),%ecx
80101d70:	89 48 04             	mov    %ecx,0x4(%eax)
	st->st_nlink = ip->nlink;
80101d73:	0f b7 4a 54          	movzwl 0x54(%edx),%ecx
80101d77:	66 89 48 08          	mov    %cx,0x8(%eax)
	st->st_size = ip->size;
80101d7b:	8b 4a 58             	mov    0x58(%edx),%ecx
80101d7e:	89 48 0c             	mov    %ecx,0xc(%eax)
	st->st_mode = ip->mode;
80101d81:	8b 4a 5c             	mov    0x5c(%edx),%ecx
80101d84:	89 48 10             	mov    %ecx,0x10(%eax)
	st->st_uid = ip->uid;
80101d87:	0f b7 4a 62          	movzwl 0x62(%edx),%ecx
80101d8b:	66 89 48 14          	mov    %cx,0x14(%eax)
	st->st_gid = ip->gid;
80101d8f:	0f b7 4a 60          	movzwl 0x60(%edx),%ecx
80101d93:	66 89 48 16          	mov    %cx,0x16(%eax)
	st->st_atime = ip->atime;
80101d97:	8b 4a 68             	mov    0x68(%edx),%ecx
80101d9a:	89 48 1c             	mov    %ecx,0x1c(%eax)
	st->st_ctime = ip->ctime;
80101d9d:	8b 4a 64             	mov    0x64(%edx),%ecx
80101da0:	89 48 18             	mov    %ecx,0x18(%eax)
	st->st_mtime = ip->mtime;
80101da3:	8b 52 6c             	mov    0x6c(%edx),%edx
80101da6:	89 50 20             	mov    %edx,0x20(%eax)
}
80101da9:	5d                   	pop    %ebp
80101daa:	c3                   	ret
80101dab:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

80101db0 <readi>:

// Read data from inode.
// Caller must hold ip->lock.
int
readi(struct inode *ip, char *dst, uint off, uint n)
{
80101db0:	55                   	push   %ebp
80101db1:	89 e5                	mov    %esp,%ebp
80101db3:	57                   	push   %edi
80101db4:	56                   	push   %esi
80101db5:	53                   	push   %ebx
80101db6:	83 ec 1c             	sub    $0x1c,%esp
80101db9:	8b 45 08             	mov    0x8(%ebp),%eax
80101dbc:	8b 75 0c             	mov    0xc(%ebp),%esi
80101dbf:	8b 7d 10             	mov    0x10(%ebp),%edi
	uint tot, m;
	struct buf *bp;

	if (S_ISBLK(ip->mode)) {
80101dc2:	8b 50 5c             	mov    0x5c(%eax),%edx
{
80101dc5:	89 75 e0             	mov    %esi,-0x20(%ebp)
80101dc8:	8b 75 14             	mov    0x14(%ebp),%esi
	if (S_ISBLK(ip->mode)) {
80101dcb:	81 e2 00 f0 00 00    	and    $0xf000,%edx
{
80101dd1:	89 75 e4             	mov    %esi,-0x1c(%ebp)
	if (S_ISBLK(ip->mode)) {
80101dd4:	81 fa 00 60 00 00    	cmp    $0x6000,%edx
80101dda:	0f 84 b0 00 00 00    	je     80101e90 <readi+0xe0>
		if (ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
			return -1;
		return devsw[ip->major].read(ip, dst, n);
	}

	if (off > ip->size || off + n < off)
80101de0:	8b 50 58             	mov    0x58(%eax),%edx
80101de3:	39 fa                	cmp    %edi,%edx
80101de5:	0f 82 c6 00 00 00    	jb     80101eb1 <readi+0x101>
80101deb:	8b 75 e4             	mov    -0x1c(%ebp),%esi
80101dee:	31 db                	xor    %ebx,%ebx
80101df0:	89 f1                	mov    %esi,%ecx
80101df2:	01 f9                	add    %edi,%ecx
80101df4:	0f 92 c3             	setb   %bl
80101df7:	89 5d dc             	mov    %ebx,-0x24(%ebp)
80101dfa:	0f 82 b1 00 00 00    	jb     80101eb1 <readi+0x101>
		return -1;
	if (off + n > ip->size)
		n = ip->size - off;
80101e00:	89 d3                	mov    %edx,%ebx
80101e02:	29 fb                	sub    %edi,%ebx
80101e04:	39 ca                	cmp    %ecx,%edx
80101e06:	89 d9                	mov    %ebx,%ecx
80101e08:	0f 43 ce             	cmovae %esi,%ecx
80101e0b:	89 4d e4             	mov    %ecx,-0x1c(%ebp)

	for (tot = 0; tot < n; tot += m, off += m, dst += m) {
80101e0e:	85 c9                	test   %ecx,%ecx
80101e10:	74 72                	je     80101e84 <readi+0xd4>
		bp = bread(ip->dev, bmap(ip, off / BSIZE));
		m = min(n - tot, BSIZE - off % BSIZE);
80101e12:	89 45 d8             	mov    %eax,-0x28(%ebp)
80101e15:	8b 75 dc             	mov    -0x24(%ebp),%esi
80101e18:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80101e1f:	00 
		bp = bread(ip->dev, bmap(ip, off / BSIZE));
80101e20:	8b 5d d8             	mov    -0x28(%ebp),%ebx
80101e23:	89 fa                	mov    %edi,%edx
80101e25:	c1 ea 0c             	shr    $0xc,%edx
80101e28:	89 d8                	mov    %ebx,%eax
80101e2a:	e8 21 f8 ff ff       	call   80101650 <bmap>
80101e2f:	83 ec 08             	sub    $0x8,%esp
80101e32:	50                   	push   %eax
80101e33:	ff 33                	push   (%ebx)
80101e35:	e8 96 e2 ff ff       	call   801000d0 <bread>
		m = min(n - tot, BSIZE - off % BSIZE);
80101e3a:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
80101e3d:	b9 00 10 00 00       	mov    $0x1000,%ecx
		bp = bread(ip->dev, bmap(ip, off / BSIZE));
80101e42:	89 c2                	mov    %eax,%edx
		m = min(n - tot, BSIZE - off % BSIZE);
80101e44:	89 f8                	mov    %edi,%eax
80101e46:	25 ff 0f 00 00       	and    $0xfff,%eax
80101e4b:	29 f3                	sub    %esi,%ebx
80101e4d:	29 c1                	sub    %eax,%ecx
		memmove(dst, bp->data + off % BSIZE, m);
80101e4f:	8d 44 02 5c          	lea    0x5c(%edx,%eax,1),%eax
		m = min(n - tot, BSIZE - off % BSIZE);
80101e53:	39 d9                	cmp    %ebx,%ecx
80101e55:	0f 46 d9             	cmovbe %ecx,%ebx
		memmove(dst, bp->data + off % BSIZE, m);
80101e58:	83 c4 0c             	add    $0xc,%esp
80101e5b:	53                   	push   %ebx
	for (tot = 0; tot < n; tot += m, off += m, dst += m) {
80101e5c:	01 de                	add    %ebx,%esi
80101e5e:	01 df                	add    %ebx,%edi
		memmove(dst, bp->data + off % BSIZE, m);
80101e60:	89 55 dc             	mov    %edx,-0x24(%ebp)
80101e63:	50                   	push   %eax
80101e64:	ff 75 e0             	push   -0x20(%ebp)
80101e67:	e8 b4 29 00 00       	call   80104820 <memmove>
		brelse(bp);
80101e6c:	8b 55 dc             	mov    -0x24(%ebp),%edx
80101e6f:	89 14 24             	mov    %edx,(%esp)
80101e72:	e8 79 e3 ff ff       	call   801001f0 <brelse>
	for (tot = 0; tot < n; tot += m, off += m, dst += m) {
80101e77:	01 5d e0             	add    %ebx,-0x20(%ebp)
80101e7a:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
80101e7d:	83 c4 10             	add    $0x10,%esp
80101e80:	39 de                	cmp    %ebx,%esi
80101e82:	72 9c                	jb     80101e20 <readi+0x70>
	}
	return n;
80101e84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
80101e87:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101e8a:	5b                   	pop    %ebx
80101e8b:	5e                   	pop    %esi
80101e8c:	5f                   	pop    %edi
80101e8d:	5d                   	pop    %ebp
80101e8e:	c3                   	ret
80101e8f:	90                   	nop
		if (ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
80101e90:	0f bf 50 50          	movswl 0x50(%eax),%edx
80101e94:	66 83 fa 09          	cmp    $0x9,%dx
80101e98:	77 17                	ja     80101eb1 <readi+0x101>
80101e9a:	8b 14 d5 20 cb 12 80 	mov    -0x7fed34e0(,%edx,8),%edx
80101ea1:	85 d2                	test   %edx,%edx
80101ea3:	74 0c                	je     80101eb1 <readi+0x101>
		return devsw[ip->major].read(ip, dst, n);
80101ea5:	89 75 10             	mov    %esi,0x10(%ebp)
}
80101ea8:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101eab:	5b                   	pop    %ebx
80101eac:	5e                   	pop    %esi
80101ead:	5f                   	pop    %edi
80101eae:	5d                   	pop    %ebp
		return devsw[ip->major].read(ip, dst, n);
80101eaf:	ff e2                	jmp    *%edx
			return -1;
80101eb1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101eb6:	eb cf                	jmp    80101e87 <readi+0xd7>
80101eb8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80101ebf:	00 

80101ec0 <writei>:

// Write data to inode.
// Caller must hold ip->lock.
int
writei(struct inode *ip, char *src, uint off, uint n)
{
80101ec0:	55                   	push   %ebp
80101ec1:	89 e5                	mov    %esp,%ebp
80101ec3:	57                   	push   %edi
80101ec4:	56                   	push   %esi
80101ec5:	53                   	push   %ebx
80101ec6:	83 ec 1c             	sub    $0x1c,%esp
80101ec9:	8b 45 0c             	mov    0xc(%ebp),%eax
80101ecc:	8b 55 08             	mov    0x8(%ebp),%edx
80101ecf:	8b 7d 10             	mov    0x10(%ebp),%edi
80101ed2:	89 45 dc             	mov    %eax,-0x24(%ebp)
80101ed5:	8b 45 14             	mov    0x14(%ebp),%eax
80101ed8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	uint tot, m;
	struct buf *bp;

	if (S_ISBLK(ip->mode)) {
80101edb:	8b 42 5c             	mov    0x5c(%edx),%eax
80101ede:	25 00 f0 00 00       	and    $0xf000,%eax
80101ee3:	3d 00 60 00 00       	cmp    $0x6000,%eax
80101ee8:	0f 84 c2 00 00 00    	je     80101fb0 <writei+0xf0>
		if (ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
			return -1;
		return devsw[ip->major].write(ip, src, n);
	}

	if (off > ip->size || off + n < off)
80101eee:	39 7a 58             	cmp    %edi,0x58(%edx)
80101ef1:	0f 82 f2 00 00 00    	jb     80101fe9 <writei+0x129>
		return -1;
	if (off + n > MAXFILE * BSIZE)
80101ef7:	8b 75 e0             	mov    -0x20(%ebp),%esi
80101efa:	89 f0                	mov    %esi,%eax
80101efc:	01 f8                	add    %edi,%eax
80101efe:	0f 82 e5 00 00 00    	jb     80101fe9 <writei+0x129>
80101f04:	3d 00 70 40 00       	cmp    $0x407000,%eax
80101f09:	0f 87 da 00 00 00    	ja     80101fe9 <writei+0x129>
		return -1;

	for (tot = 0; tot < n; tot += m, off += m, src += m) {
80101f0f:	85 f6                	test   %esi,%esi
80101f11:	0f 84 86 00 00 00    	je     80101f9d <writei+0xdd>
80101f17:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		bp = bread(ip->dev, bmap(ip, off / BSIZE));
		m = min(n - tot, BSIZE - off % BSIZE);
80101f1e:	89 55 d8             	mov    %edx,-0x28(%ebp)
80101f21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		bp = bread(ip->dev, bmap(ip, off / BSIZE));
80101f28:	8b 75 d8             	mov    -0x28(%ebp),%esi
80101f2b:	89 fa                	mov    %edi,%edx
80101f2d:	c1 ea 0c             	shr    $0xc,%edx
80101f30:	89 f0                	mov    %esi,%eax
80101f32:	e8 19 f7 ff ff       	call   80101650 <bmap>
80101f37:	83 ec 08             	sub    $0x8,%esp
80101f3a:	50                   	push   %eax
80101f3b:	ff 36                	push   (%esi)
80101f3d:	e8 8e e1 ff ff       	call   801000d0 <bread>
		m = min(n - tot, BSIZE - off % BSIZE);
80101f42:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80101f45:	8b 5d e0             	mov    -0x20(%ebp),%ebx
80101f48:	b9 00 10 00 00       	mov    $0x1000,%ecx
		bp = bread(ip->dev, bmap(ip, off / BSIZE));
80101f4d:	89 c6                	mov    %eax,%esi
		m = min(n - tot, BSIZE - off % BSIZE);
80101f4f:	89 f8                	mov    %edi,%eax
80101f51:	25 ff 0f 00 00       	and    $0xfff,%eax
80101f56:	29 d3                	sub    %edx,%ebx
80101f58:	29 c1                	sub    %eax,%ecx
		memmove(bp->data + off % BSIZE, src, m);
80101f5a:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
		m = min(n - tot, BSIZE - off % BSIZE);
80101f5e:	39 d9                	cmp    %ebx,%ecx
80101f60:	0f 46 d9             	cmovbe %ecx,%ebx
		memmove(bp->data + off % BSIZE, src, m);
80101f63:	83 c4 0c             	add    $0xc,%esp
80101f66:	53                   	push   %ebx
	for (tot = 0; tot < n; tot += m, off += m, src += m) {
80101f67:	01 df                	add    %ebx,%edi
		memmove(bp->data + off % BSIZE, src, m);
80101f69:	ff 75 dc             	push   -0x24(%ebp)
80101f6c:	50                   	push   %eax
80101f6d:	e8 ae 28 00 00       	call   80104820 <memmove>
		log_write(bp);
80101f72:	89 34 24             	mov    %esi,(%esp)
80101f75:	e8 26 0e 00 00       	call   80102da0 <log_write>
		brelse(bp);
80101f7a:	89 34 24             	mov    %esi,(%esp)
80101f7d:	e8 6e e2 ff ff       	call   801001f0 <brelse>
	for (tot = 0; tot < n; tot += m, off += m, src += m) {
80101f82:	01 5d e4             	add    %ebx,-0x1c(%ebp)
80101f85:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80101f88:	83 c4 10             	add    $0x10,%esp
80101f8b:	01 5d dc             	add    %ebx,-0x24(%ebp)
80101f8e:	8b 5d e0             	mov    -0x20(%ebp),%ebx
80101f91:	39 d8                	cmp    %ebx,%eax
80101f93:	72 93                	jb     80101f28 <writei+0x68>
	}

	if (n > 0 && off > ip->size) {
80101f95:	8b 55 d8             	mov    -0x28(%ebp),%edx
80101f98:	39 7a 58             	cmp    %edi,0x58(%edx)
80101f9b:	72 3b                	jb     80101fd8 <writei+0x118>
		ip->size = off;
		iupdate(ip);
	}
	return n;
80101f9d:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
80101fa0:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101fa3:	5b                   	pop    %ebx
80101fa4:	5e                   	pop    %esi
80101fa5:	5f                   	pop    %edi
80101fa6:	5d                   	pop    %ebp
80101fa7:	c3                   	ret
80101fa8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80101faf:	00 
		if (ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
80101fb0:	0f bf 42 50          	movswl 0x50(%edx),%eax
80101fb4:	66 83 f8 09          	cmp    $0x9,%ax
80101fb8:	77 2f                	ja     80101fe9 <writei+0x129>
80101fba:	8b 04 c5 24 cb 12 80 	mov    -0x7fed34dc(,%eax,8),%eax
80101fc1:	85 c0                	test   %eax,%eax
80101fc3:	74 24                	je     80101fe9 <writei+0x129>
		return devsw[ip->major].write(ip, src, n);
80101fc5:	8b 7d e0             	mov    -0x20(%ebp),%edi
80101fc8:	89 7d 10             	mov    %edi,0x10(%ebp)
}
80101fcb:	8d 65 f4             	lea    -0xc(%ebp),%esp
80101fce:	5b                   	pop    %ebx
80101fcf:	5e                   	pop    %esi
80101fd0:	5f                   	pop    %edi
80101fd1:	5d                   	pop    %ebp
		return devsw[ip->major].write(ip, src, n);
80101fd2:	ff e0                	jmp    *%eax
80101fd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
		iupdate(ip);
80101fd8:	83 ec 0c             	sub    $0xc,%esp
		ip->size = off;
80101fdb:	89 7a 58             	mov    %edi,0x58(%edx)
		iupdate(ip);
80101fde:	52                   	push   %edx
80101fdf:	e8 7c f9 ff ff       	call   80101960 <iupdate>
80101fe4:	83 c4 10             	add    $0x10,%esp
80101fe7:	eb b4                	jmp    80101f9d <writei+0xdd>
			return -1;
80101fe9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80101fee:	eb b0                	jmp    80101fa0 <writei+0xe0>

80101ff0 <namecmp>:

// Directories

int
namecmp(const char *s, const char *t)
{
80101ff0:	55                   	push   %ebp
80101ff1:	89 e5                	mov    %esp,%ebp
80101ff3:	83 ec 0c             	sub    $0xc,%esp
	return strncmp(s, t, DIRSIZ);
80101ff6:	6a 0e                	push   $0xe
80101ff8:	ff 75 0c             	push   0xc(%ebp)
80101ffb:	ff 75 08             	push   0x8(%ebp)
80101ffe:	e8 8d 28 00 00       	call   80104890 <strncmp>
}
80102003:	c9                   	leave
80102004:	c3                   	ret
80102005:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010200c:	00 
8010200d:	8d 76 00             	lea    0x0(%esi),%esi

80102010 <dirlookup>:

// Look for a directory entry in a directory.
// If found, set *poff to byte offset of entry.
struct inode *
dirlookup(struct inode *dp, char *name, uint *poff)
{
80102010:	55                   	push   %ebp
80102011:	89 e5                	mov    %esp,%ebp
80102013:	57                   	push   %edi
80102014:	56                   	push   %esi
80102015:	53                   	push   %ebx
80102016:	83 ec 1c             	sub    $0x1c,%esp
80102019:	8b 5d 08             	mov    0x8(%ebp),%ebx
	uint off, inum;
	struct dirent de;

	if (!S_ISDIR(dp->mode))
8010201c:	8b 43 5c             	mov    0x5c(%ebx),%eax
8010201f:	25 00 f0 00 00       	and    $0xf000,%eax
80102024:	3d 00 40 00 00       	cmp    $0x4000,%eax
80102029:	0f 85 85 00 00 00    	jne    801020b4 <dirlookup+0xa4>
		panic("dirlookup not DIR");

	for (off = 0; off < dp->size; off += sizeof(de)) {
8010202f:	8b 53 58             	mov    0x58(%ebx),%edx
80102032:	31 ff                	xor    %edi,%edi
80102034:	8d 75 d8             	lea    -0x28(%ebp),%esi
80102037:	85 d2                	test   %edx,%edx
80102039:	74 3e                	je     80102079 <dirlookup+0x69>
8010203b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
		if (readi(dp, (char *)&de, off, sizeof(de)) != sizeof(de))
80102040:	6a 10                	push   $0x10
80102042:	57                   	push   %edi
80102043:	56                   	push   %esi
80102044:	53                   	push   %ebx
80102045:	e8 66 fd ff ff       	call   80101db0 <readi>
8010204a:	83 c4 10             	add    $0x10,%esp
8010204d:	83 f8 10             	cmp    $0x10,%eax
80102050:	75 55                	jne    801020a7 <dirlookup+0x97>
			panic("dirlookup read");
		if (de.inum == 0)
80102052:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
80102057:	74 18                	je     80102071 <dirlookup+0x61>
	return strncmp(s, t, DIRSIZ);
80102059:	83 ec 04             	sub    $0x4,%esp
8010205c:	8d 45 da             	lea    -0x26(%ebp),%eax
8010205f:	6a 0e                	push   $0xe
80102061:	50                   	push   %eax
80102062:	ff 75 0c             	push   0xc(%ebp)
80102065:	e8 26 28 00 00       	call   80104890 <strncmp>
			continue;
		if (namecmp(name, de.name) == 0) {
8010206a:	83 c4 10             	add    $0x10,%esp
8010206d:	85 c0                	test   %eax,%eax
8010206f:	74 17                	je     80102088 <dirlookup+0x78>
	for (off = 0; off < dp->size; off += sizeof(de)) {
80102071:	83 c7 10             	add    $0x10,%edi
80102074:	3b 7b 58             	cmp    0x58(%ebx),%edi
80102077:	72 c7                	jb     80102040 <dirlookup+0x30>
			return iget(dp->dev, inum);
		}
	}

	return 0;
}
80102079:	8d 65 f4             	lea    -0xc(%ebp),%esp
	return 0;
8010207c:	31 c0                	xor    %eax,%eax
}
8010207e:	5b                   	pop    %ebx
8010207f:	5e                   	pop    %esi
80102080:	5f                   	pop    %edi
80102081:	5d                   	pop    %ebp
80102082:	c3                   	ret
80102083:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
			if (poff)
80102088:	8b 45 10             	mov    0x10(%ebp),%eax
8010208b:	85 c0                	test   %eax,%eax
8010208d:	74 05                	je     80102094 <dirlookup+0x84>
				*poff = off;
8010208f:	8b 45 10             	mov    0x10(%ebp),%eax
80102092:	89 38                	mov    %edi,(%eax)
			inum = de.inum;
80102094:	0f b7 55 d8          	movzwl -0x28(%ebp),%edx
			return iget(dp->dev, inum);
80102098:	8b 03                	mov    (%ebx),%eax
8010209a:	e8 31 f4 ff ff       	call   801014d0 <iget>
}
8010209f:	8d 65 f4             	lea    -0xc(%ebp),%esp
801020a2:	5b                   	pop    %ebx
801020a3:	5e                   	pop    %esi
801020a4:	5f                   	pop    %edi
801020a5:	5d                   	pop    %ebp
801020a6:	c3                   	ret
			panic("dirlookup read");
801020a7:	83 ec 0c             	sub    $0xc,%esp
801020aa:	68 9a 81 10 80       	push   $0x8010819a
801020af:	e8 cc e2 ff ff       	call   80100380 <panic>
		panic("dirlookup not DIR");
801020b4:	83 ec 0c             	sub    $0xc,%esp
801020b7:	68 88 81 10 80       	push   $0x80108188
801020bc:	e8 bf e2 ff ff       	call   80100380 <panic>
801020c1:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801020c8:	00 
801020c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

801020d0 <namex>:
// path element into name, which must have room for DIRSIZ bytes.
// Must be called inside a transaction since it calls iput().
// iow, path -> inode.
static struct inode *
namex(char *path, int nameiparent, char *name)
{
801020d0:	55                   	push   %ebp
801020d1:	89 e5                	mov    %esp,%ebp
801020d3:	57                   	push   %edi
801020d4:	56                   	push   %esi
801020d5:	53                   	push   %ebx
801020d6:	89 c3                	mov    %eax,%ebx
801020d8:	83 ec 1c             	sub    $0x1c,%esp
	struct inode *ip, *next;

	if (*path == '/')
801020db:	80 38 2f             	cmpb   $0x2f,(%eax)
{
801020de:	89 55 dc             	mov    %edx,-0x24(%ebp)
801020e1:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
	if (*path == '/')
801020e4:	0f 84 ae 01 00 00    	je     80102298 <namex+0x1c8>
		ip = iget(ROOTDEV, ROOTINO);
	else
		ip = idup(myproc()->cwd); // increase refcount
801020ea:	e8 f1 18 00 00       	call   801039e0 <myproc>
	acquire(&icache.lock);
801020ef:	83 ec 0c             	sub    $0xc,%esp
		ip = idup(myproc()->cwd); // increase refcount
801020f2:	8b 70 6c             	mov    0x6c(%eax),%esi
	acquire(&icache.lock);
801020f5:	68 80 cb 12 80       	push   $0x8012cb80
801020fa:	e8 91 25 00 00       	call   80104690 <acquire>
	ip->ref++;
801020ff:	83 46 08 01          	addl   $0x1,0x8(%esi)
	release(&icache.lock);
80102103:	c7 04 24 80 cb 12 80 	movl   $0x8012cb80,(%esp)
8010210a:	e8 21 25 00 00       	call   80104630 <release>
8010210f:	83 c4 10             	add    $0x10,%esp
80102112:	eb 07                	jmp    8010211b <namex+0x4b>
80102114:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
		path++;
80102118:	83 c3 01             	add    $0x1,%ebx
	while (*path == '/')
8010211b:	0f b6 03             	movzbl (%ebx),%eax
8010211e:	3c 2f                	cmp    $0x2f,%al
80102120:	74 f6                	je     80102118 <namex+0x48>
	if (*path == 0)
80102122:	84 c0                	test   %al,%al
80102124:	0f 84 16 01 00 00    	je     80102240 <namex+0x170>
	while (*path != '/' && *path != 0)
8010212a:	0f b6 03             	movzbl (%ebx),%eax
8010212d:	84 c0                	test   %al,%al
8010212f:	0f 84 20 01 00 00    	je     80102255 <namex+0x185>
80102135:	89 df                	mov    %ebx,%edi
80102137:	3c 2f                	cmp    $0x2f,%al
80102139:	0f 84 16 01 00 00    	je     80102255 <namex+0x185>
8010213f:	90                   	nop
80102140:	0f b6 47 01          	movzbl 0x1(%edi),%eax
		path++;
80102144:	83 c7 01             	add    $0x1,%edi
	while (*path != '/' && *path != 0)
80102147:	3c 2f                	cmp    $0x2f,%al
80102149:	74 04                	je     8010214f <namex+0x7f>
8010214b:	84 c0                	test   %al,%al
8010214d:	75 f1                	jne    80102140 <namex+0x70>
	len = path - s;
8010214f:	89 f8                	mov    %edi,%eax
80102151:	29 d8                	sub    %ebx,%eax
	if (len >= DIRSIZ)
80102153:	83 f8 0d             	cmp    $0xd,%eax
80102156:	0f 8e b4 00 00 00    	jle    80102210 <namex+0x140>
		memmove(name, s, DIRSIZ);
8010215c:	83 ec 04             	sub    $0x4,%esp
8010215f:	6a 0e                	push   $0xe
80102161:	53                   	push   %ebx
80102162:	89 fb                	mov    %edi,%ebx
80102164:	ff 75 e4             	push   -0x1c(%ebp)
80102167:	e8 b4 26 00 00       	call   80104820 <memmove>
8010216c:	83 c4 10             	add    $0x10,%esp
	while (*path == '/')
8010216f:	80 3f 2f             	cmpb   $0x2f,(%edi)
80102172:	75 0c                	jne    80102180 <namex+0xb0>
80102174:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
		path++;
80102178:	83 c3 01             	add    $0x1,%ebx
	while (*path == '/')
8010217b:	80 3b 2f             	cmpb   $0x2f,(%ebx)
8010217e:	74 f8                	je     80102178 <namex+0xa8>

	while ((path = skipelem(path, name)) != 0) {
		ilock(ip);
80102180:	83 ec 0c             	sub    $0xc,%esp
80102183:	56                   	push   %esi
80102184:	e8 d7 f8 ff ff       	call   80101a60 <ilock>
		if (!S_ISDIR(ip->mode)) {
80102189:	8b 46 5c             	mov    0x5c(%esi),%eax
8010218c:	83 c4 10             	add    $0x10,%esp
8010218f:	25 00 f0 00 00       	and    $0xf000,%eax
80102194:	3d 00 40 00 00       	cmp    $0x4000,%eax
80102199:	0f 85 bf 00 00 00    	jne    8010225e <namex+0x18e>
			iunlockput(ip);
			return 0;
		}
		if (nameiparent && *path == '\0') {
8010219f:	8b 45 dc             	mov    -0x24(%ebp),%eax
801021a2:	85 c0                	test   %eax,%eax
801021a4:	74 09                	je     801021af <namex+0xdf>
801021a6:	80 3b 00             	cmpb   $0x0,(%ebx)
801021a9:	0f 84 ff 00 00 00    	je     801022ae <namex+0x1de>
			// Stop one level early.
			iunlock(ip);
			return ip;
		}
		if ((next = dirlookup(ip, name, 0)) == 0) {
801021af:	83 ec 04             	sub    $0x4,%esp
801021b2:	6a 00                	push   $0x0
801021b4:	ff 75 e4             	push   -0x1c(%ebp)
801021b7:	56                   	push   %esi
801021b8:	e8 53 fe ff ff       	call   80102010 <dirlookup>
801021bd:	83 c4 10             	add    $0x10,%esp
801021c0:	89 c7                	mov    %eax,%edi
801021c2:	85 c0                	test   %eax,%eax
801021c4:	0f 84 94 00 00 00    	je     8010225e <namex+0x18e>
	if (ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
801021ca:	8d 4e 0c             	lea    0xc(%esi),%ecx
801021cd:	83 ec 0c             	sub    $0xc,%esp
801021d0:	51                   	push   %ecx
801021d1:	89 4d e0             	mov    %ecx,-0x20(%ebp)
801021d4:	e8 77 22 00 00       	call   80104450 <holdingsleep>
801021d9:	83 c4 10             	add    $0x10,%esp
801021dc:	85 c0                	test   %eax,%eax
801021de:	0f 84 0a 01 00 00    	je     801022ee <namex+0x21e>
801021e4:	8b 56 08             	mov    0x8(%esi),%edx
801021e7:	85 d2                	test   %edx,%edx
801021e9:	0f 8e ff 00 00 00    	jle    801022ee <namex+0x21e>
	releasesleep(&ip->lock);
801021ef:	8b 4d e0             	mov    -0x20(%ebp),%ecx
801021f2:	83 ec 0c             	sub    $0xc,%esp
801021f5:	51                   	push   %ecx
801021f6:	e8 15 22 00 00       	call   80104410 <releasesleep>
	iput(ip);
801021fb:	89 34 24             	mov    %esi,(%esp)
			iunlockput(ip);
			return 0;
		}
		iunlockput(ip);
		ip = next;
801021fe:	89 fe                	mov    %edi,%esi
	iput(ip);
80102200:	e8 ab f9 ff ff       	call   80101bb0 <iput>
80102205:	83 c4 10             	add    $0x10,%esp
	while (*path == '/')
80102208:	e9 0e ff ff ff       	jmp    8010211b <namex+0x4b>
8010220d:	8d 76 00             	lea    0x0(%esi),%esi
		name[len] = 0;
80102210:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80102213:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
		memmove(name, s, len);
80102216:	83 ec 04             	sub    $0x4,%esp
80102219:	89 4d e0             	mov    %ecx,-0x20(%ebp)
8010221c:	50                   	push   %eax
8010221d:	53                   	push   %ebx
		name[len] = 0;
8010221e:	89 fb                	mov    %edi,%ebx
		memmove(name, s, len);
80102220:	ff 75 e4             	push   -0x1c(%ebp)
80102223:	e8 f8 25 00 00       	call   80104820 <memmove>
		name[len] = 0;
80102228:	8b 4d e0             	mov    -0x20(%ebp),%ecx
8010222b:	83 c4 10             	add    $0x10,%esp
8010222e:	c6 01 00             	movb   $0x0,(%ecx)
80102231:	e9 39 ff ff ff       	jmp    8010216f <namex+0x9f>
80102236:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010223d:	00 
8010223e:	66 90                	xchg   %ax,%ax
	}
	if (nameiparent) {
80102240:	8b 45 dc             	mov    -0x24(%ebp),%eax
80102243:	85 c0                	test   %eax,%eax
80102245:	0f 85 93 00 00 00    	jne    801022de <namex+0x20e>
		iput(ip);
		return 0;
	}
	return ip;
}
8010224b:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010224e:	89 f0                	mov    %esi,%eax
80102250:	5b                   	pop    %ebx
80102251:	5e                   	pop    %esi
80102252:	5f                   	pop    %edi
80102253:	5d                   	pop    %ebp
80102254:	c3                   	ret
	while (*path != '/' && *path != 0)
80102255:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
80102258:	89 df                	mov    %ebx,%edi
8010225a:	31 c0                	xor    %eax,%eax
8010225c:	eb b8                	jmp    80102216 <namex+0x146>
	if (ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
8010225e:	83 ec 0c             	sub    $0xc,%esp
80102261:	8d 5e 0c             	lea    0xc(%esi),%ebx
80102264:	53                   	push   %ebx
80102265:	e8 e6 21 00 00       	call   80104450 <holdingsleep>
8010226a:	83 c4 10             	add    $0x10,%esp
8010226d:	85 c0                	test   %eax,%eax
8010226f:	74 7d                	je     801022ee <namex+0x21e>
80102271:	8b 4e 08             	mov    0x8(%esi),%ecx
80102274:	85 c9                	test   %ecx,%ecx
80102276:	7e 76                	jle    801022ee <namex+0x21e>
	releasesleep(&ip->lock);
80102278:	83 ec 0c             	sub    $0xc,%esp
8010227b:	53                   	push   %ebx
8010227c:	e8 8f 21 00 00       	call   80104410 <releasesleep>
	iput(ip);
80102281:	89 34 24             	mov    %esi,(%esp)
			return 0;
80102284:	31 f6                	xor    %esi,%esi
	iput(ip);
80102286:	e8 25 f9 ff ff       	call   80101bb0 <iput>
			return 0;
8010228b:	83 c4 10             	add    $0x10,%esp
}
8010228e:	8d 65 f4             	lea    -0xc(%ebp),%esp
80102291:	89 f0                	mov    %esi,%eax
80102293:	5b                   	pop    %ebx
80102294:	5e                   	pop    %esi
80102295:	5f                   	pop    %edi
80102296:	5d                   	pop    %ebp
80102297:	c3                   	ret
		ip = iget(ROOTDEV, ROOTINO);
80102298:	ba 01 00 00 00       	mov    $0x1,%edx
8010229d:	b8 01 00 00 00       	mov    $0x1,%eax
801022a2:	e8 29 f2 ff ff       	call   801014d0 <iget>
801022a7:	89 c6                	mov    %eax,%esi
801022a9:	e9 6d fe ff ff       	jmp    8010211b <namex+0x4b>
	if (ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
801022ae:	83 ec 0c             	sub    $0xc,%esp
801022b1:	8d 5e 0c             	lea    0xc(%esi),%ebx
801022b4:	53                   	push   %ebx
801022b5:	e8 96 21 00 00       	call   80104450 <holdingsleep>
801022ba:	83 c4 10             	add    $0x10,%esp
801022bd:	85 c0                	test   %eax,%eax
801022bf:	74 2d                	je     801022ee <namex+0x21e>
801022c1:	8b 7e 08             	mov    0x8(%esi),%edi
801022c4:	85 ff                	test   %edi,%edi
801022c6:	7e 26                	jle    801022ee <namex+0x21e>
	releasesleep(&ip->lock);
801022c8:	83 ec 0c             	sub    $0xc,%esp
801022cb:	53                   	push   %ebx
801022cc:	e8 3f 21 00 00       	call   80104410 <releasesleep>
}
801022d1:	83 c4 10             	add    $0x10,%esp
}
801022d4:	8d 65 f4             	lea    -0xc(%ebp),%esp
801022d7:	89 f0                	mov    %esi,%eax
801022d9:	5b                   	pop    %ebx
801022da:	5e                   	pop    %esi
801022db:	5f                   	pop    %edi
801022dc:	5d                   	pop    %ebp
801022dd:	c3                   	ret
		iput(ip);
801022de:	83 ec 0c             	sub    $0xc,%esp
801022e1:	56                   	push   %esi
			return 0;
801022e2:	31 f6                	xor    %esi,%esi
		iput(ip);
801022e4:	e8 c7 f8 ff ff       	call   80101bb0 <iput>
		return 0;
801022e9:	83 c4 10             	add    $0x10,%esp
801022ec:	eb a0                	jmp    8010228e <namex+0x1be>
		panic("iunlock");
801022ee:	83 ec 0c             	sub    $0xc,%esp
801022f1:	68 80 81 10 80       	push   $0x80108180
801022f6:	e8 85 e0 ff ff       	call   80100380 <panic>
801022fb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

80102300 <dirlink>:
{
80102300:	55                   	push   %ebp
80102301:	89 e5                	mov    %esp,%ebp
80102303:	57                   	push   %edi
80102304:	56                   	push   %esi
80102305:	53                   	push   %ebx
80102306:	83 ec 20             	sub    $0x20,%esp
80102309:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if ((ip = dirlookup(dp, name, 0)) != 0) {
8010230c:	6a 00                	push   $0x0
8010230e:	ff 75 0c             	push   0xc(%ebp)
80102311:	53                   	push   %ebx
80102312:	e8 f9 fc ff ff       	call   80102010 <dirlookup>
80102317:	83 c4 10             	add    $0x10,%esp
8010231a:	85 c0                	test   %eax,%eax
8010231c:	75 67                	jne    80102385 <dirlink+0x85>
	for (off = 0; off < dp->size; off += sizeof(de)) {
8010231e:	8b 7b 58             	mov    0x58(%ebx),%edi
80102321:	8d 75 d8             	lea    -0x28(%ebp),%esi
80102324:	85 ff                	test   %edi,%edi
80102326:	74 29                	je     80102351 <dirlink+0x51>
80102328:	31 ff                	xor    %edi,%edi
8010232a:	8d 75 d8             	lea    -0x28(%ebp),%esi
8010232d:	eb 09                	jmp    80102338 <dirlink+0x38>
8010232f:	90                   	nop
80102330:	83 c7 10             	add    $0x10,%edi
80102333:	3b 7b 58             	cmp    0x58(%ebx),%edi
80102336:	73 19                	jae    80102351 <dirlink+0x51>
		if (readi(dp, (char *)&de, off, sizeof(de)) != sizeof(de))
80102338:	6a 10                	push   $0x10
8010233a:	57                   	push   %edi
8010233b:	56                   	push   %esi
8010233c:	53                   	push   %ebx
8010233d:	e8 6e fa ff ff       	call   80101db0 <readi>
80102342:	83 c4 10             	add    $0x10,%esp
80102345:	83 f8 10             	cmp    $0x10,%eax
80102348:	75 4e                	jne    80102398 <dirlink+0x98>
		if (de.inum == 0)
8010234a:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
8010234f:	75 df                	jne    80102330 <dirlink+0x30>
	strncpy(de.name, name, DIRSIZ);
80102351:	83 ec 04             	sub    $0x4,%esp
80102354:	8d 45 da             	lea    -0x26(%ebp),%eax
80102357:	6a 0e                	push   $0xe
80102359:	ff 75 0c             	push   0xc(%ebp)
8010235c:	50                   	push   %eax
8010235d:	e8 7e 25 00 00       	call   801048e0 <strncpy>
	de.inum = inum;
80102362:	8b 45 10             	mov    0x10(%ebp),%eax
80102365:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
	if (writei(dp, (char *)&de, off, sizeof(de)) != sizeof(de))
80102369:	6a 10                	push   $0x10
8010236b:	57                   	push   %edi
8010236c:	56                   	push   %esi
8010236d:	53                   	push   %ebx
8010236e:	e8 4d fb ff ff       	call   80101ec0 <writei>
80102373:	83 c4 20             	add    $0x20,%esp
80102376:	83 f8 10             	cmp    $0x10,%eax
80102379:	75 2a                	jne    801023a5 <dirlink+0xa5>
	return 0;
8010237b:	31 c0                	xor    %eax,%eax
}
8010237d:	8d 65 f4             	lea    -0xc(%ebp),%esp
80102380:	5b                   	pop    %ebx
80102381:	5e                   	pop    %esi
80102382:	5f                   	pop    %edi
80102383:	5d                   	pop    %ebp
80102384:	c3                   	ret
		iput(ip);
80102385:	83 ec 0c             	sub    $0xc,%esp
80102388:	50                   	push   %eax
80102389:	e8 22 f8 ff ff       	call   80101bb0 <iput>
		return -1;
8010238e:	83 c4 10             	add    $0x10,%esp
80102391:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80102396:	eb e5                	jmp    8010237d <dirlink+0x7d>
			panic("dirlink read");
80102398:	83 ec 0c             	sub    $0xc,%esp
8010239b:	68 a9 81 10 80       	push   $0x801081a9
801023a0:	e8 db df ff ff       	call   80100380 <panic>
		panic("dirlink");
801023a5:	83 ec 0c             	sub    $0xc,%esp
801023a8:	68 c7 84 10 80       	push   $0x801084c7
801023ad:	e8 ce df ff ff       	call   80100380 <panic>
801023b2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801023b9:	00 
801023ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

801023c0 <namei>:

struct inode *
namei(char *path)
{
801023c0:	55                   	push   %ebp
	char name[DIRSIZ];
	return namex(path, 0, name);
801023c1:	31 d2                	xor    %edx,%edx
{
801023c3:	89 e5                	mov    %esp,%ebp
801023c5:	83 ec 18             	sub    $0x18,%esp
	return namex(path, 0, name);
801023c8:	8b 45 08             	mov    0x8(%ebp),%eax
801023cb:	8d 4d ea             	lea    -0x16(%ebp),%ecx
801023ce:	e8 fd fc ff ff       	call   801020d0 <namex>
}
801023d3:	c9                   	leave
801023d4:	c3                   	ret
801023d5:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801023dc:	00 
801023dd:	8d 76 00             	lea    0x0(%esi),%esi

801023e0 <nameiparent>:

struct inode *
nameiparent(char *path, char *name)
{
801023e0:	55                   	push   %ebp
	return namex(path, 1, name);
801023e1:	ba 01 00 00 00       	mov    $0x1,%edx
{
801023e6:	89 e5                	mov    %esp,%ebp
	return namex(path, 1, name);
801023e8:	8b 4d 0c             	mov    0xc(%ebp),%ecx
801023eb:	8b 45 08             	mov    0x8(%ebp),%eax
}
801023ee:	5d                   	pop    %ebp
	return namex(path, 1, name);
801023ef:	e9 dc fc ff ff       	jmp    801020d0 <namex>
801023f4:	66 90                	xchg   %ax,%ax
801023f6:	66 90                	xchg   %ax,%ax
801023f8:	66 90                	xchg   %ax,%ax
801023fa:	66 90                	xchg   %ax,%ax
801023fc:	66 90                	xchg   %ax,%ax
801023fe:	66 90                	xchg   %ax,%ax

80102400 <idestart>:
}

// Start the request for b.  Caller must hold idelock.
static void
idestart(struct buf *b)
{
80102400:	55                   	push   %ebp
80102401:	89 e5                	mov    %esp,%ebp
80102403:	57                   	push   %edi
80102404:	56                   	push   %esi
80102405:	53                   	push   %ebx
80102406:	83 ec 0c             	sub    $0xc,%esp
	if (b == 0)
80102409:	85 c0                	test   %eax,%eax
8010240b:	0f 84 b4 00 00 00    	je     801024c5 <idestart+0xc5>
		panic("idestart");
	if (b->blockno >= FSSIZE)
80102411:	8b 70 08             	mov    0x8(%eax),%esi
80102414:	89 c3                	mov    %eax,%ebx
80102416:	81 fe b7 0b 00 00    	cmp    $0xbb7,%esi
8010241c:	0f 87 96 00 00 00    	ja     801024b8 <idestart+0xb8>
		panic("incorrect blockno");
	const int sector_per_block = BSIZE / SECTOR_SIZE;
	int sector = b->blockno * sector_per_block;
80102422:	c1 e6 03             	shl    $0x3,%esi
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
80102425:	b9 f7 01 00 00       	mov    $0x1f7,%ecx
8010242a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80102430:	89 ca                	mov    %ecx,%edx
80102432:	ec                   	in     (%dx),%al
	while (((r = inb(0x1f7)) & (IDE_BSY | IDE_DRDY)) != IDE_DRDY)
80102433:	83 e0 c0             	and    $0xffffffc0,%eax
80102436:	3c 40                	cmp    $0x40,%al
80102438:	75 f6                	jne    80102430 <idestart+0x30>
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
8010243a:	31 ff                	xor    %edi,%edi
8010243c:	ba f6 03 00 00       	mov    $0x3f6,%edx
80102441:	89 f8                	mov    %edi,%eax
80102443:	ee                   	out    %al,(%dx)
80102444:	b8 08 00 00 00       	mov    $0x8,%eax
80102449:	ba f2 01 00 00       	mov    $0x1f2,%edx
8010244e:	ee                   	out    %al,(%dx)
8010244f:	ba f3 01 00 00       	mov    $0x1f3,%edx
80102454:	89 f0                	mov    %esi,%eax
80102456:	ee                   	out    %al,(%dx)

	idewait(0);
	outb(0x3f6, 0); // generate interrupt
	outb(0x1f2, sector_per_block); // number of sectors
	outb(0x1f3, sector & 0xff);
	outb(0x1f4, (sector >> 8) & 0xff);
80102457:	89 f0                	mov    %esi,%eax
80102459:	ba f4 01 00 00       	mov    $0x1f4,%edx
8010245e:	c1 f8 08             	sar    $0x8,%eax
80102461:	ee                   	out    %al,(%dx)
80102462:	ba f5 01 00 00       	mov    $0x1f5,%edx
80102467:	89 f8                	mov    %edi,%eax
80102469:	ee                   	out    %al,(%dx)
	outb(0x1f5, (sector >> 16) & 0xff);
	outb(0x1f6, 0xe0 | ((b->dev & 1) << 4) | ((sector >> 24) & 0x0f));
8010246a:	0f b6 43 04          	movzbl 0x4(%ebx),%eax
8010246e:	ba f6 01 00 00       	mov    $0x1f6,%edx
80102473:	c1 e0 04             	shl    $0x4,%eax
80102476:	83 e0 10             	and    $0x10,%eax
80102479:	83 c8 e0             	or     $0xffffffe0,%eax
8010247c:	ee                   	out    %al,(%dx)
	if (b->flags & B_DIRTY) {
8010247d:	f6 03 04             	testb  $0x4,(%ebx)
80102480:	75 16                	jne    80102498 <idestart+0x98>
80102482:	b8 c4 ff ff ff       	mov    $0xffffffc4,%eax
80102487:	89 ca                	mov    %ecx,%edx
80102489:	ee                   	out    %al,(%dx)
		outb(0x1f7, write_cmd);
		outsl(0x1f0, b->data, BSIZE / 4);
	} else {
		outb(0x1f7, read_cmd);
	}
}
8010248a:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010248d:	5b                   	pop    %ebx
8010248e:	5e                   	pop    %esi
8010248f:	5f                   	pop    %edi
80102490:	5d                   	pop    %ebp
80102491:	c3                   	ret
80102492:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80102498:	b8 c5 ff ff ff       	mov    $0xffffffc5,%eax
8010249d:	89 ca                	mov    %ecx,%edx
8010249f:	ee                   	out    %al,(%dx)
	__asm__ __volatile__("cld; rep outsl"
801024a0:	b9 00 04 00 00       	mov    $0x400,%ecx
		outsl(0x1f0, b->data, BSIZE / 4);
801024a5:	8d 73 5c             	lea    0x5c(%ebx),%esi
801024a8:	ba f0 01 00 00       	mov    $0x1f0,%edx
801024ad:	fc                   	cld
801024ae:	f3 6f                	rep outsl %ds:(%esi),(%dx)
}
801024b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
801024b3:	5b                   	pop    %ebx
801024b4:	5e                   	pop    %esi
801024b5:	5f                   	pop    %edi
801024b6:	5d                   	pop    %ebp
801024b7:	c3                   	ret
		panic("incorrect blockno");
801024b8:	83 ec 0c             	sub    $0xc,%esp
801024bb:	68 bf 81 10 80       	push   $0x801081bf
801024c0:	e8 bb de ff ff       	call   80100380 <panic>
		panic("idestart");
801024c5:	83 ec 0c             	sub    $0xc,%esp
801024c8:	68 b6 81 10 80       	push   $0x801081b6
801024cd:	e8 ae de ff ff       	call   80100380 <panic>
801024d2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801024d9:	00 
801024da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

801024e0 <ideinit>:
{
801024e0:	55                   	push   %ebp
801024e1:	89 e5                	mov    %esp,%ebp
801024e3:	83 ec 10             	sub    $0x10,%esp
	initlock(&idelock, "ide");
801024e6:	68 d1 81 10 80       	push   $0x801081d1
801024eb:	68 20 e8 12 80       	push   $0x8012e820
801024f0:	e8 ab 1f 00 00       	call   801044a0 <initlock>
	ioapicenable(IRQ_IDE, ncpu - 1);
801024f5:	58                   	pop    %eax
801024f6:	a1 84 e9 12 80       	mov    0x8012e984,%eax
801024fb:	5a                   	pop    %edx
801024fc:	83 e8 01             	sub    $0x1,%eax
801024ff:	50                   	push   %eax
80102500:	6a 0e                	push   $0xe
80102502:	e8 99 02 00 00       	call   801027a0 <ioapicenable>
	while (((r = inb(0x1f7)) & (IDE_BSY | IDE_DRDY)) != IDE_DRDY)
80102507:	83 c4 10             	add    $0x10,%esp
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
8010250a:	b9 f7 01 00 00       	mov    $0x1f7,%ecx
8010250f:	90                   	nop
80102510:	89 ca                	mov    %ecx,%edx
80102512:	ec                   	in     (%dx),%al
80102513:	83 e0 c0             	and    $0xffffffc0,%eax
80102516:	3c 40                	cmp    $0x40,%al
80102518:	75 f6                	jne    80102510 <ideinit+0x30>
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
8010251a:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
8010251f:	ba f6 01 00 00       	mov    $0x1f6,%edx
80102524:	ee                   	out    %al,(%dx)
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
80102525:	89 ca                	mov    %ecx,%edx
80102527:	ec                   	in     (%dx),%al
		if (inb(0x1f7) != 0) {
80102528:	84 c0                	test   %al,%al
8010252a:	75 1e                	jne    8010254a <ideinit+0x6a>
8010252c:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
80102531:	ba f7 01 00 00       	mov    $0x1f7,%edx
80102536:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010253d:	00 
8010253e:	66 90                	xchg   %ax,%ax
	for (i = 0; i < 1000; i++) {
80102540:	83 e9 01             	sub    $0x1,%ecx
80102543:	74 0f                	je     80102554 <ideinit+0x74>
80102545:	ec                   	in     (%dx),%al
		if (inb(0x1f7) != 0) {
80102546:	84 c0                	test   %al,%al
80102548:	74 f6                	je     80102540 <ideinit+0x60>
			havedisk1 = 1;
8010254a:	c7 05 00 e8 12 80 01 	movl   $0x1,0x8012e800
80102551:	00 00 00 
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
80102554:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
80102559:	ba f6 01 00 00       	mov    $0x1f6,%edx
8010255e:	ee                   	out    %al,(%dx)
}
8010255f:	c9                   	leave
80102560:	c3                   	ret
80102561:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80102568:	00 
80102569:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80102570 <ideintr>:

// Interrupt handler.
void
ideintr(void)
{
80102570:	55                   	push   %ebp
80102571:	89 e5                	mov    %esp,%ebp
80102573:	57                   	push   %edi
80102574:	56                   	push   %esi
80102575:	53                   	push   %ebx
80102576:	83 ec 18             	sub    $0x18,%esp
	struct buf *b;

	// First queued buffer is the active request.
	acquire(&idelock);
80102579:	68 20 e8 12 80       	push   $0x8012e820
8010257e:	e8 0d 21 00 00       	call   80104690 <acquire>

	if ((b = idequeue) == 0) {
80102583:	8b 1d 04 e8 12 80    	mov    0x8012e804,%ebx
80102589:	83 c4 10             	add    $0x10,%esp
8010258c:	85 db                	test   %ebx,%ebx
8010258e:	74 63                	je     801025f3 <ideintr+0x83>
		release(&idelock);
		return;
	}
	idequeue = b->qnext;
80102590:	8b 43 58             	mov    0x58(%ebx),%eax
80102593:	a3 04 e8 12 80       	mov    %eax,0x8012e804

	// Read data if needed.
	if (!(b->flags & B_DIRTY) && idewait(1) >= 0)
80102598:	8b 33                	mov    (%ebx),%esi
8010259a:	f7 c6 04 00 00 00    	test   $0x4,%esi
801025a0:	75 2f                	jne    801025d1 <ideintr+0x61>
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
801025a2:	ba f7 01 00 00       	mov    $0x1f7,%edx
801025a7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801025ae:	00 
801025af:	90                   	nop
801025b0:	ec                   	in     (%dx),%al
	while (((r = inb(0x1f7)) & (IDE_BSY | IDE_DRDY)) != IDE_DRDY)
801025b1:	89 c1                	mov    %eax,%ecx
801025b3:	83 e1 c0             	and    $0xffffffc0,%ecx
801025b6:	80 f9 40             	cmp    $0x40,%cl
801025b9:	75 f5                	jne    801025b0 <ideintr+0x40>
	if (checkerr && (r & (IDE_DF | IDE_ERR)) != 0)
801025bb:	a8 21                	test   $0x21,%al
801025bd:	75 12                	jne    801025d1 <ideintr+0x61>
		insl(0x1f0, b->data, BSIZE / 4);
801025bf:	8d 7b 5c             	lea    0x5c(%ebx),%edi
	__asm__ __volatile__("cld; rep insl"
801025c2:	b9 00 04 00 00       	mov    $0x400,%ecx
801025c7:	ba f0 01 00 00       	mov    $0x1f0,%edx
801025cc:	fc                   	cld
801025cd:	f3 6d                	rep insl (%dx),%es:(%edi)

	// Wake process waiting for this buf.
	b->flags |= B_VALID;
801025cf:	8b 33                	mov    (%ebx),%esi
	b->flags &= ~B_DIRTY;
801025d1:	83 e6 fb             	and    $0xfffffffb,%esi
	wakeup(b);
801025d4:	83 ec 0c             	sub    $0xc,%esp
	b->flags &= ~B_DIRTY;
801025d7:	83 ce 02             	or     $0x2,%esi
801025da:	89 33                	mov    %esi,(%ebx)
	wakeup(b);
801025dc:	53                   	push   %ebx
801025dd:	e8 ce 1b 00 00       	call   801041b0 <wakeup>

	// Start disk on next buf in queue.
	if (idequeue != 0)
801025e2:	a1 04 e8 12 80       	mov    0x8012e804,%eax
801025e7:	83 c4 10             	add    $0x10,%esp
801025ea:	85 c0                	test   %eax,%eax
801025ec:	74 05                	je     801025f3 <ideintr+0x83>
		idestart(idequeue);
801025ee:	e8 0d fe ff ff       	call   80102400 <idestart>
		release(&idelock);
801025f3:	83 ec 0c             	sub    $0xc,%esp
801025f6:	68 20 e8 12 80       	push   $0x8012e820
801025fb:	e8 30 20 00 00       	call   80104630 <release>

	release(&idelock);
}
80102600:	8d 65 f4             	lea    -0xc(%ebp),%esp
80102603:	5b                   	pop    %ebx
80102604:	5e                   	pop    %esi
80102605:	5f                   	pop    %edi
80102606:	5d                   	pop    %ebp
80102607:	c3                   	ret
80102608:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010260f:	00 

80102610 <iderw>:
// Sync buf with disk.
// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
// Else if B_VALID is not set, read buf from disk, set B_VALID.
void
iderw(struct buf *b)
{
80102610:	55                   	push   %ebp
80102611:	89 e5                	mov    %esp,%ebp
80102613:	53                   	push   %ebx
80102614:	83 ec 10             	sub    $0x10,%esp
80102617:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct buf **pp;

	if (!holdingsleep(&b->lock))
8010261a:	8d 43 0c             	lea    0xc(%ebx),%eax
8010261d:	50                   	push   %eax
8010261e:	e8 2d 1e 00 00       	call   80104450 <holdingsleep>
80102623:	83 c4 10             	add    $0x10,%esp
80102626:	85 c0                	test   %eax,%eax
80102628:	0f 84 c3 00 00 00    	je     801026f1 <iderw+0xe1>
		panic("iderw: buf not locked");
	if ((b->flags & (B_VALID | B_DIRTY)) == B_VALID)
8010262e:	8b 03                	mov    (%ebx),%eax
80102630:	83 e0 06             	and    $0x6,%eax
80102633:	83 f8 02             	cmp    $0x2,%eax
80102636:	0f 84 a8 00 00 00    	je     801026e4 <iderw+0xd4>
		panic("iderw: nothing to do");
	if (b->dev != 0 && !havedisk1)
8010263c:	8b 53 04             	mov    0x4(%ebx),%edx
8010263f:	85 d2                	test   %edx,%edx
80102641:	74 0d                	je     80102650 <iderw+0x40>
80102643:	a1 00 e8 12 80       	mov    0x8012e800,%eax
80102648:	85 c0                	test   %eax,%eax
8010264a:	0f 84 87 00 00 00    	je     801026d7 <iderw+0xc7>
		panic("iderw: ide disk 1 not present");

	acquire(&idelock); //DOC:acquire-lock
80102650:	83 ec 0c             	sub    $0xc,%esp
80102653:	68 20 e8 12 80       	push   $0x8012e820
80102658:	e8 33 20 00 00       	call   80104690 <acquire>

	// Append b to idequeue.
	b->qnext = 0;
	for (pp = &idequeue; *pp; pp = &(*pp)->qnext) //DOC:insert-queue
8010265d:	a1 04 e8 12 80       	mov    0x8012e804,%eax
	b->qnext = 0;
80102662:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
	for (pp = &idequeue; *pp; pp = &(*pp)->qnext) //DOC:insert-queue
80102669:	83 c4 10             	add    $0x10,%esp
8010266c:	85 c0                	test   %eax,%eax
8010266e:	74 60                	je     801026d0 <iderw+0xc0>
80102670:	89 c2                	mov    %eax,%edx
80102672:	8b 40 58             	mov    0x58(%eax),%eax
80102675:	85 c0                	test   %eax,%eax
80102677:	75 f7                	jne    80102670 <iderw+0x60>
80102679:	83 c2 58             	add    $0x58,%edx
		;
	*pp = b;
8010267c:	89 1a                	mov    %ebx,(%edx)

	// Start disk if necessary.
	if (idequeue == b)
8010267e:	39 1d 04 e8 12 80    	cmp    %ebx,0x8012e804
80102684:	74 3a                	je     801026c0 <iderw+0xb0>
		idestart(b);

	// Wait for request to finish.
	while ((b->flags & (B_VALID | B_DIRTY)) != B_VALID) {
80102686:	8b 03                	mov    (%ebx),%eax
80102688:	83 e0 06             	and    $0x6,%eax
8010268b:	83 f8 02             	cmp    $0x2,%eax
8010268e:	74 1b                	je     801026ab <iderw+0x9b>
		sleep(b, &idelock);
80102690:	83 ec 08             	sub    $0x8,%esp
80102693:	68 20 e8 12 80       	push   $0x8012e820
80102698:	53                   	push   %ebx
80102699:	e8 52 1a 00 00       	call   801040f0 <sleep>
	while ((b->flags & (B_VALID | B_DIRTY)) != B_VALID) {
8010269e:	8b 03                	mov    (%ebx),%eax
801026a0:	83 c4 10             	add    $0x10,%esp
801026a3:	83 e0 06             	and    $0x6,%eax
801026a6:	83 f8 02             	cmp    $0x2,%eax
801026a9:	75 e5                	jne    80102690 <iderw+0x80>
	}

	release(&idelock);
801026ab:	c7 45 08 20 e8 12 80 	movl   $0x8012e820,0x8(%ebp)
}
801026b2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801026b5:	c9                   	leave
	release(&idelock);
801026b6:	e9 75 1f 00 00       	jmp    80104630 <release>
801026bb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
		idestart(b);
801026c0:	89 d8                	mov    %ebx,%eax
801026c2:	e8 39 fd ff ff       	call   80102400 <idestart>
801026c7:	eb bd                	jmp    80102686 <iderw+0x76>
801026c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
	for (pp = &idequeue; *pp; pp = &(*pp)->qnext) //DOC:insert-queue
801026d0:	ba 04 e8 12 80       	mov    $0x8012e804,%edx
801026d5:	eb a5                	jmp    8010267c <iderw+0x6c>
		panic("iderw: ide disk 1 not present");
801026d7:	83 ec 0c             	sub    $0xc,%esp
801026da:	68 00 82 10 80       	push   $0x80108200
801026df:	e8 9c dc ff ff       	call   80100380 <panic>
		panic("iderw: nothing to do");
801026e4:	83 ec 0c             	sub    $0xc,%esp
801026e7:	68 eb 81 10 80       	push   $0x801081eb
801026ec:	e8 8f dc ff ff       	call   80100380 <panic>
		panic("iderw: buf not locked");
801026f1:	83 ec 0c             	sub    $0xc,%esp
801026f4:	68 d5 81 10 80       	push   $0x801081d5
801026f9:	e8 82 dc ff ff       	call   80100380 <panic>
801026fe:	66 90                	xchg   %ax,%ax

80102700 <ioapicinit>:
	ioapic->data = data;
}

void
ioapicinit(void)
{
80102700:	55                   	push   %ebp
80102701:	89 e5                	mov    %esp,%ebp
80102703:	56                   	push   %esi
80102704:	53                   	push   %ebx
	int i, id, maxintr;

	ioapic = (volatile struct ioapic *)IOAPIC;
80102705:	c7 05 54 e8 12 80 00 	movl   $0xfec00000,0x8012e854
8010270c:	00 c0 fe 
	ioapic->reg = reg;
8010270f:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
80102716:	00 00 00 
	return ioapic->data;
80102719:	8b 15 54 e8 12 80    	mov    0x8012e854,%edx
8010271f:	8b 72 10             	mov    0x10(%edx),%esi
	ioapic->reg = reg;
80102722:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
	return ioapic->data;
80102728:	8b 1d 54 e8 12 80    	mov    0x8012e854,%ebx
	maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
	id = ioapicread(REG_ID) >> 24;
	if (id != ioapicid)
8010272e:	0f b6 15 80 e9 12 80 	movzbl 0x8012e980,%edx
	maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
80102735:	c1 ee 10             	shr    $0x10,%esi
80102738:	89 f0                	mov    %esi,%eax
8010273a:	0f b6 f0             	movzbl %al,%esi
	return ioapic->data;
8010273d:	8b 43 10             	mov    0x10(%ebx),%eax
	id = ioapicread(REG_ID) >> 24;
80102740:	c1 e8 18             	shr    $0x18,%eax
	if (id != ioapicid)
80102743:	39 c2                	cmp    %eax,%edx
80102745:	74 16                	je     8010275d <ioapicinit+0x5d>
		cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
80102747:	83 ec 0c             	sub    $0xc,%esp
8010274a:	68 e0 87 10 80       	push   $0x801087e0
8010274f:	e8 fc df ff ff       	call   80100750 <cprintf>
	ioapic->reg = reg;
80102754:	8b 1d 54 e8 12 80    	mov    0x8012e854,%ebx
8010275a:	83 c4 10             	add    $0x10,%esp
{
8010275d:	ba 10 00 00 00       	mov    $0x10,%edx
80102762:	31 c0                	xor    %eax,%eax
80102764:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
	ioapic->reg = reg;
80102768:	89 13                	mov    %edx,(%ebx)
8010276a:	8d 48 20             	lea    0x20(%eax),%ecx
	ioapic->data = data;
8010276d:	8b 1d 54 e8 12 80    	mov    0x8012e854,%ebx

	// Mark all interrupts edge-triggered, active high, disabled,
	// and not routed to any CPUs.
	for (i = 0; i <= maxintr; i++) {
80102773:	83 c0 01             	add    $0x1,%eax
80102776:	81 c9 00 00 01 00    	or     $0x10000,%ecx
	ioapic->data = data;
8010277c:	89 4b 10             	mov    %ecx,0x10(%ebx)
	ioapic->reg = reg;
8010277f:	8d 4a 01             	lea    0x1(%edx),%ecx
	for (i = 0; i <= maxintr; i++) {
80102782:	83 c2 02             	add    $0x2,%edx
	ioapic->reg = reg;
80102785:	89 0b                	mov    %ecx,(%ebx)
	ioapic->data = data;
80102787:	8b 1d 54 e8 12 80    	mov    0x8012e854,%ebx
8010278d:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
	for (i = 0; i <= maxintr; i++) {
80102794:	39 c6                	cmp    %eax,%esi
80102796:	7d d0                	jge    80102768 <ioapicinit+0x68>
		ioapicwrite(REG_TABLE + 2 * i, INT_DISABLED | (T_IRQ0 + i));
		ioapicwrite(REG_TABLE + 2 * i + 1, 0);
	}
}
80102798:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010279b:	5b                   	pop    %ebx
8010279c:	5e                   	pop    %esi
8010279d:	5d                   	pop    %ebp
8010279e:	c3                   	ret
8010279f:	90                   	nop

801027a0 <ioapicenable>:

void
ioapicenable(int irq, int cpunum)
{
801027a0:	55                   	push   %ebp
	ioapic->reg = reg;
801027a1:	8b 0d 54 e8 12 80    	mov    0x8012e854,%ecx
{
801027a7:	89 e5                	mov    %esp,%ebp
801027a9:	8b 45 08             	mov    0x8(%ebp),%eax
	// Mark interrupt edge-triggered, active high,
	// enabled, and routed to the given cpunum,
	// which happens to be that cpu's APIC ID.
	ioapicwrite(REG_TABLE + 2 * irq, T_IRQ0 + irq);
801027ac:	8d 50 20             	lea    0x20(%eax),%edx
801027af:	8d 44 00 10          	lea    0x10(%eax,%eax,1),%eax
	ioapic->reg = reg;
801027b3:	89 01                	mov    %eax,(%ecx)
	ioapic->data = data;
801027b5:	8b 0d 54 e8 12 80    	mov    0x8012e854,%ecx
	ioapicwrite(REG_TABLE + 2 * irq + 1, cpunum << 24);
801027bb:	83 c0 01             	add    $0x1,%eax
	ioapic->data = data;
801027be:	89 51 10             	mov    %edx,0x10(%ecx)
	ioapicwrite(REG_TABLE + 2 * irq + 1, cpunum << 24);
801027c1:	8b 55 0c             	mov    0xc(%ebp),%edx
	ioapic->reg = reg;
801027c4:	89 01                	mov    %eax,(%ecx)
	ioapic->data = data;
801027c6:	a1 54 e8 12 80       	mov    0x8012e854,%eax
	ioapicwrite(REG_TABLE + 2 * irq + 1, cpunum << 24);
801027cb:	c1 e2 18             	shl    $0x18,%edx
	ioapic->data = data;
801027ce:	89 50 10             	mov    %edx,0x10(%eax)
}
801027d1:	5d                   	pop    %ebp
801027d2:	c3                   	ret
801027d3:	66 90                	xchg   %ax,%ax
801027d5:	66 90                	xchg   %ax,%ax
801027d7:	66 90                	xchg   %ax,%ax
801027d9:	66 90                	xchg   %ax,%ax
801027db:	66 90                	xchg   %ax,%ax
801027dd:	66 90                	xchg   %ax,%ax
801027df:	90                   	nop

801027e0 <kfree>:
// which normally should have been returned by a
// call to kalloc().  (The exception is when
// initializing the allocator; see kinit above.)
void
kfree(char *v)
{
801027e0:	55                   	push   %ebp
801027e1:	89 e5                	mov    %esp,%ebp
801027e3:	53                   	push   %ebx
801027e4:	83 ec 04             	sub    $0x4,%esp
801027e7:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct run *r;

	if ((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
801027ea:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
801027f0:	75 76                	jne    80102868 <kfree+0x88>
801027f2:	81 fb 90 a2 13 80    	cmp    $0x8013a290,%ebx
801027f8:	72 6e                	jb     80102868 <kfree+0x88>
801027fa:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
80102800:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
80102805:	77 61                	ja     80102868 <kfree+0x88>
		panic("kfree");

	// Fill with junk to catch dangling refs.
	memset(v, 1, PGSIZE);
80102807:	83 ec 04             	sub    $0x4,%esp
8010280a:	68 00 10 00 00       	push   $0x1000
8010280f:	6a 01                	push   $0x1
80102811:	53                   	push   %ebx
80102812:	e8 79 1f 00 00       	call   80104790 <memset>

	if (kmem.use_lock)
80102817:	8b 15 94 e8 12 80    	mov    0x8012e894,%edx
8010281d:	83 c4 10             	add    $0x10,%esp
80102820:	85 d2                	test   %edx,%edx
80102822:	75 1c                	jne    80102840 <kfree+0x60>
		acquire(&kmem.lock);
	r = (struct run *)v;
	r->next = kmem.freelist;
80102824:	a1 98 e8 12 80       	mov    0x8012e898,%eax
80102829:	89 03                	mov    %eax,(%ebx)
	kmem.freelist = r;
	if (kmem.use_lock)
8010282b:	a1 94 e8 12 80       	mov    0x8012e894,%eax
	kmem.freelist = r;
80102830:	89 1d 98 e8 12 80    	mov    %ebx,0x8012e898
	if (kmem.use_lock)
80102836:	85 c0                	test   %eax,%eax
80102838:	75 1e                	jne    80102858 <kfree+0x78>
		release(&kmem.lock);
}
8010283a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010283d:	c9                   	leave
8010283e:	c3                   	ret
8010283f:	90                   	nop
		acquire(&kmem.lock);
80102840:	83 ec 0c             	sub    $0xc,%esp
80102843:	68 60 e8 12 80       	push   $0x8012e860
80102848:	e8 43 1e 00 00       	call   80104690 <acquire>
8010284d:	83 c4 10             	add    $0x10,%esp
80102850:	eb d2                	jmp    80102824 <kfree+0x44>
80102852:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		release(&kmem.lock);
80102858:	c7 45 08 60 e8 12 80 	movl   $0x8012e860,0x8(%ebp)
}
8010285f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80102862:	c9                   	leave
		release(&kmem.lock);
80102863:	e9 c8 1d 00 00       	jmp    80104630 <release>
		panic("kfree");
80102868:	83 ec 0c             	sub    $0xc,%esp
8010286b:	68 1e 82 10 80       	push   $0x8010821e
80102870:	e8 0b db ff ff       	call   80100380 <panic>
80102875:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010287c:	00 
8010287d:	8d 76 00             	lea    0x0(%esi),%esi

80102880 <freerange>:
{
80102880:	55                   	push   %ebp
80102881:	89 e5                	mov    %esp,%ebp
80102883:	56                   	push   %esi
80102884:	53                   	push   %ebx
	p = (char *)PGROUNDUP((uint)vstart);
80102885:	8b 45 08             	mov    0x8(%ebp),%eax
{
80102888:	8b 75 0c             	mov    0xc(%ebp),%esi
	p = (char *)PGROUNDUP((uint)vstart);
8010288b:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
80102891:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
	for (; p + PGSIZE <= (char *)vend; p += PGSIZE)
80102897:	81 c3 00 10 00 00    	add    $0x1000,%ebx
8010289d:	39 de                	cmp    %ebx,%esi
8010289f:	72 23                	jb     801028c4 <freerange+0x44>
801028a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		kfree(p);
801028a8:	83 ec 0c             	sub    $0xc,%esp
801028ab:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
	for (; p + PGSIZE <= (char *)vend; p += PGSIZE)
801028b1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
		kfree(p);
801028b7:	50                   	push   %eax
801028b8:	e8 23 ff ff ff       	call   801027e0 <kfree>
	for (; p + PGSIZE <= (char *)vend; p += PGSIZE)
801028bd:	83 c4 10             	add    $0x10,%esp
801028c0:	39 de                	cmp    %ebx,%esi
801028c2:	73 e4                	jae    801028a8 <freerange+0x28>
}
801028c4:	8d 65 f8             	lea    -0x8(%ebp),%esp
801028c7:	5b                   	pop    %ebx
801028c8:	5e                   	pop    %esi
801028c9:	5d                   	pop    %ebp
801028ca:	c3                   	ret
801028cb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

801028d0 <kinit2>:
{
801028d0:	55                   	push   %ebp
801028d1:	89 e5                	mov    %esp,%ebp
801028d3:	56                   	push   %esi
801028d4:	53                   	push   %ebx
	p = (char *)PGROUNDUP((uint)vstart);
801028d5:	8b 45 08             	mov    0x8(%ebp),%eax
{
801028d8:	8b 75 0c             	mov    0xc(%ebp),%esi
	p = (char *)PGROUNDUP((uint)vstart);
801028db:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
801028e1:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
	for (; p + PGSIZE <= (char *)vend; p += PGSIZE)
801028e7:	81 c3 00 10 00 00    	add    $0x1000,%ebx
801028ed:	39 de                	cmp    %ebx,%esi
801028ef:	72 23                	jb     80102914 <kinit2+0x44>
801028f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		kfree(p);
801028f8:	83 ec 0c             	sub    $0xc,%esp
801028fb:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
	for (; p + PGSIZE <= (char *)vend; p += PGSIZE)
80102901:	81 c3 00 10 00 00    	add    $0x1000,%ebx
		kfree(p);
80102907:	50                   	push   %eax
80102908:	e8 d3 fe ff ff       	call   801027e0 <kfree>
	for (; p + PGSIZE <= (char *)vend; p += PGSIZE)
8010290d:	83 c4 10             	add    $0x10,%esp
80102910:	39 de                	cmp    %ebx,%esi
80102912:	73 e4                	jae    801028f8 <kinit2+0x28>
	kmem.use_lock = 1;
80102914:	c7 05 94 e8 12 80 01 	movl   $0x1,0x8012e894
8010291b:	00 00 00 
}
8010291e:	8d 65 f8             	lea    -0x8(%ebp),%esp
80102921:	5b                   	pop    %ebx
80102922:	5e                   	pop    %esi
80102923:	5d                   	pop    %ebp
80102924:	c3                   	ret
80102925:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010292c:	00 
8010292d:	8d 76 00             	lea    0x0(%esi),%esi

80102930 <kinit1>:
{
80102930:	55                   	push   %ebp
80102931:	89 e5                	mov    %esp,%ebp
80102933:	56                   	push   %esi
80102934:	53                   	push   %ebx
80102935:	8b 75 0c             	mov    0xc(%ebp),%esi
	initlock(&kmem.lock, "kmem");
80102938:	83 ec 08             	sub    $0x8,%esp
8010293b:	68 24 82 10 80       	push   $0x80108224
80102940:	68 60 e8 12 80       	push   $0x8012e860
80102945:	e8 56 1b 00 00       	call   801044a0 <initlock>
	p = (char *)PGROUNDUP((uint)vstart);
8010294a:	8b 45 08             	mov    0x8(%ebp),%eax
	for (; p + PGSIZE <= (char *)vend; p += PGSIZE)
8010294d:	83 c4 10             	add    $0x10,%esp
	kmem.use_lock = 0;
80102950:	c7 05 94 e8 12 80 00 	movl   $0x0,0x8012e894
80102957:	00 00 00 
	p = (char *)PGROUNDUP((uint)vstart);
8010295a:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
80102960:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
	for (; p + PGSIZE <= (char *)vend; p += PGSIZE)
80102966:	81 c3 00 10 00 00    	add    $0x1000,%ebx
8010296c:	39 de                	cmp    %ebx,%esi
8010296e:	72 1c                	jb     8010298c <kinit1+0x5c>
		kfree(p);
80102970:	83 ec 0c             	sub    $0xc,%esp
80102973:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
	for (; p + PGSIZE <= (char *)vend; p += PGSIZE)
80102979:	81 c3 00 10 00 00    	add    $0x1000,%ebx
		kfree(p);
8010297f:	50                   	push   %eax
80102980:	e8 5b fe ff ff       	call   801027e0 <kfree>
	for (; p + PGSIZE <= (char *)vend; p += PGSIZE)
80102985:	83 c4 10             	add    $0x10,%esp
80102988:	39 de                	cmp    %ebx,%esi
8010298a:	73 e4                	jae    80102970 <kinit1+0x40>
}
8010298c:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010298f:	5b                   	pop    %ebx
80102990:	5e                   	pop    %esi
80102991:	5d                   	pop    %ebp
80102992:	c3                   	ret
80102993:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010299a:	00 
8010299b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

801029a0 <kalloc>:
// Allocate one 4096-byte page of physical memory.
// Returns a pointer that the kernel can use.
// Returns 0 if the memory cannot be allocated.
char *
kalloc(void)
{
801029a0:	55                   	push   %ebp
801029a1:	89 e5                	mov    %esp,%ebp
801029a3:	53                   	push   %ebx
801029a4:	83 ec 04             	sub    $0x4,%esp
	struct run *r;

	if (kmem.use_lock)
801029a7:	a1 94 e8 12 80       	mov    0x8012e894,%eax
801029ac:	85 c0                	test   %eax,%eax
801029ae:	75 20                	jne    801029d0 <kalloc+0x30>
		acquire(&kmem.lock);
	r = kmem.freelist;
801029b0:	8b 1d 98 e8 12 80    	mov    0x8012e898,%ebx
	if (r)
801029b6:	85 db                	test   %ebx,%ebx
801029b8:	74 07                	je     801029c1 <kalloc+0x21>
		kmem.freelist = r->next;
801029ba:	8b 03                	mov    (%ebx),%eax
801029bc:	a3 98 e8 12 80       	mov    %eax,0x8012e898
	if (kmem.use_lock)
		release(&kmem.lock);
	return (char *)r;
}
801029c1:	89 d8                	mov    %ebx,%eax
801029c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801029c6:	c9                   	leave
801029c7:	c3                   	ret
801029c8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801029cf:	00 
		acquire(&kmem.lock);
801029d0:	83 ec 0c             	sub    $0xc,%esp
801029d3:	68 60 e8 12 80       	push   $0x8012e860
801029d8:	e8 b3 1c 00 00       	call   80104690 <acquire>
	r = kmem.freelist;
801029dd:	8b 1d 98 e8 12 80    	mov    0x8012e898,%ebx
	if (kmem.use_lock)
801029e3:	a1 94 e8 12 80       	mov    0x8012e894,%eax
	if (r)
801029e8:	83 c4 10             	add    $0x10,%esp
801029eb:	85 db                	test   %ebx,%ebx
801029ed:	74 08                	je     801029f7 <kalloc+0x57>
		kmem.freelist = r->next;
801029ef:	8b 13                	mov    (%ebx),%edx
801029f1:	89 15 98 e8 12 80    	mov    %edx,0x8012e898
	if (kmem.use_lock)
801029f7:	85 c0                	test   %eax,%eax
801029f9:	74 c6                	je     801029c1 <kalloc+0x21>
		release(&kmem.lock);
801029fb:	83 ec 0c             	sub    $0xc,%esp
801029fe:	68 60 e8 12 80       	push   $0x8012e860
80102a03:	e8 28 1c 00 00       	call   80104630 <release>
}
80102a08:	89 d8                	mov    %ebx,%eax
		release(&kmem.lock);
80102a0a:	83 c4 10             	add    $0x10,%esp
}
80102a0d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80102a10:	c9                   	leave
80102a11:	c3                   	ret
80102a12:	66 90                	xchg   %ax,%ax
80102a14:	66 90                	xchg   %ax,%ax
80102a16:	66 90                	xchg   %ax,%ax
80102a18:	66 90                	xchg   %ax,%ax
80102a1a:	66 90                	xchg   %ax,%ax
80102a1c:	66 90                	xchg   %ax,%ax
80102a1e:	66 90                	xchg   %ax,%ax

80102a20 <install_trans>:
static void
install_trans(void)
{
	int tail;

	for (tail = 0; tail < log.lh.n; tail++) {
80102a20:	8b 0d e8 e8 12 80    	mov    0x8012e8e8,%ecx
80102a26:	85 c9                	test   %ecx,%ecx
80102a28:	0f 8e 8a 00 00 00    	jle    80102ab8 <install_trans+0x98>
{
80102a2e:	55                   	push   %ebp
80102a2f:	89 e5                	mov    %esp,%ebp
80102a31:	57                   	push   %edi
	for (tail = 0; tail < log.lh.n; tail++) {
80102a32:	31 ff                	xor    %edi,%edi
{
80102a34:	56                   	push   %esi
80102a35:	53                   	push   %ebx
80102a36:	83 ec 0c             	sub    $0xc,%esp
80102a39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		struct buf *lbuf = bread(log.dev, log.start + tail + 1); // read log block
80102a40:	a1 d4 e8 12 80       	mov    0x8012e8d4,%eax
80102a45:	83 ec 08             	sub    $0x8,%esp
80102a48:	01 f8                	add    %edi,%eax
80102a4a:	83 c0 01             	add    $0x1,%eax
80102a4d:	50                   	push   %eax
80102a4e:	ff 35 e4 e8 12 80    	push   0x8012e8e4
80102a54:	e8 77 d6 ff ff       	call   801000d0 <bread>
80102a59:	89 c6                	mov    %eax,%esi
		struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
80102a5b:	58                   	pop    %eax
80102a5c:	5a                   	pop    %edx
80102a5d:	ff 34 bd ec e8 12 80 	push   -0x7fed1714(,%edi,4)
80102a64:	ff 35 e4 e8 12 80    	push   0x8012e8e4
	for (tail = 0; tail < log.lh.n; tail++) {
80102a6a:	83 c7 01             	add    $0x1,%edi
		struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
80102a6d:	e8 5e d6 ff ff       	call   801000d0 <bread>
		memmove(dbuf->data, lbuf->data, BSIZE); // copy block to dst
80102a72:	83 c4 0c             	add    $0xc,%esp
		struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
80102a75:	89 c3                	mov    %eax,%ebx
		memmove(dbuf->data, lbuf->data, BSIZE); // copy block to dst
80102a77:	8d 46 5c             	lea    0x5c(%esi),%eax
80102a7a:	68 00 10 00 00       	push   $0x1000
80102a7f:	50                   	push   %eax
80102a80:	8d 43 5c             	lea    0x5c(%ebx),%eax
80102a83:	50                   	push   %eax
80102a84:	e8 97 1d 00 00       	call   80104820 <memmove>
		bwrite(dbuf); // write dst to disk
80102a89:	89 1c 24             	mov    %ebx,(%esp)
80102a8c:	e8 1f d7 ff ff       	call   801001b0 <bwrite>
		brelse(lbuf);
80102a91:	89 34 24             	mov    %esi,(%esp)
80102a94:	e8 57 d7 ff ff       	call   801001f0 <brelse>
		brelse(dbuf);
80102a99:	89 1c 24             	mov    %ebx,(%esp)
80102a9c:	e8 4f d7 ff ff       	call   801001f0 <brelse>
	for (tail = 0; tail < log.lh.n; tail++) {
80102aa1:	83 c4 10             	add    $0x10,%esp
80102aa4:	39 3d e8 e8 12 80    	cmp    %edi,0x8012e8e8
80102aaa:	7f 94                	jg     80102a40 <install_trans+0x20>
	}
}
80102aac:	8d 65 f4             	lea    -0xc(%ebp),%esp
80102aaf:	5b                   	pop    %ebx
80102ab0:	5e                   	pop    %esi
80102ab1:	5f                   	pop    %edi
80102ab2:	5d                   	pop    %ebp
80102ab3:	c3                   	ret
80102ab4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80102ab8:	c3                   	ret
80102ab9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80102ac0 <write_head>:
// Write in-memory log header to disk.
// This is the true point at which the
// current transaction commits.
static void
write_head(void)
{
80102ac0:	55                   	push   %ebp
80102ac1:	89 e5                	mov    %esp,%ebp
80102ac3:	53                   	push   %ebx
80102ac4:	83 ec 0c             	sub    $0xc,%esp
	struct buf *buf = bread(log.dev, log.start);
80102ac7:	ff 35 d4 e8 12 80    	push   0x8012e8d4
80102acd:	ff 35 e4 e8 12 80    	push   0x8012e8e4
80102ad3:	e8 f8 d5 ff ff       	call   801000d0 <bread>
	struct logheader *hb = (struct logheader *)(buf->data);
	int i;
	hb->n = log.lh.n;
	for (i = 0; i < log.lh.n; i++) {
80102ad8:	83 c4 10             	add    $0x10,%esp
	struct buf *buf = bread(log.dev, log.start);
80102adb:	89 c3                	mov    %eax,%ebx
	hb->n = log.lh.n;
80102add:	a1 e8 e8 12 80       	mov    0x8012e8e8,%eax
80102ae2:	89 43 5c             	mov    %eax,0x5c(%ebx)
	for (i = 0; i < log.lh.n; i++) {
80102ae5:	85 c0                	test   %eax,%eax
80102ae7:	7e 19                	jle    80102b02 <write_head+0x42>
80102ae9:	31 d2                	xor    %edx,%edx
80102aeb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
		hb->block[i] = log.lh.block[i];
80102af0:	8b 0c 95 ec e8 12 80 	mov    -0x7fed1714(,%edx,4),%ecx
80102af7:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
	for (i = 0; i < log.lh.n; i++) {
80102afb:	83 c2 01             	add    $0x1,%edx
80102afe:	39 d0                	cmp    %edx,%eax
80102b00:	75 ee                	jne    80102af0 <write_head+0x30>
	}
	bwrite(buf);
80102b02:	83 ec 0c             	sub    $0xc,%esp
80102b05:	53                   	push   %ebx
80102b06:	e8 a5 d6 ff ff       	call   801001b0 <bwrite>
	brelse(buf);
80102b0b:	89 1c 24             	mov    %ebx,(%esp)
80102b0e:	e8 dd d6 ff ff       	call   801001f0 <brelse>
}
80102b13:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80102b16:	83 c4 10             	add    $0x10,%esp
80102b19:	c9                   	leave
80102b1a:	c3                   	ret
80102b1b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

80102b20 <initlog>:
{
80102b20:	55                   	push   %ebp
80102b21:	89 e5                	mov    %esp,%ebp
80102b23:	53                   	push   %ebx
80102b24:	83 ec 2c             	sub    $0x2c,%esp
80102b27:	8b 5d 08             	mov    0x8(%ebp),%ebx
	initlock(&log.lock, "log");
80102b2a:	68 29 82 10 80       	push   $0x80108229
80102b2f:	68 a0 e8 12 80       	push   $0x8012e8a0
80102b34:	e8 67 19 00 00       	call   801044a0 <initlock>
	readsb(dev, &sb);
80102b39:	58                   	pop    %eax
80102b3a:	8d 45 dc             	lea    -0x24(%ebp),%eax
80102b3d:	5a                   	pop    %edx
80102b3e:	50                   	push   %eax
80102b3f:	53                   	push   %ebx
80102b40:	e8 db eb ff ff       	call   80101720 <readsb>
	log.start = sb.logstart;
80102b45:	8b 45 ec             	mov    -0x14(%ebp),%eax
	struct buf *buf = bread(log.dev, log.start);
80102b48:	59                   	pop    %ecx
	log.dev = dev;
80102b49:	89 1d e4 e8 12 80    	mov    %ebx,0x8012e8e4
	log.size = sb.nlog;
80102b4f:	8b 55 e8             	mov    -0x18(%ebp),%edx
	log.start = sb.logstart;
80102b52:	a3 d4 e8 12 80       	mov    %eax,0x8012e8d4
	log.size = sb.nlog;
80102b57:	89 15 d8 e8 12 80    	mov    %edx,0x8012e8d8
	struct buf *buf = bread(log.dev, log.start);
80102b5d:	5a                   	pop    %edx
80102b5e:	50                   	push   %eax
80102b5f:	53                   	push   %ebx
80102b60:	e8 6b d5 ff ff       	call   801000d0 <bread>
	for (i = 0; i < log.lh.n; i++) {
80102b65:	83 c4 10             	add    $0x10,%esp
	log.lh.n = lh->n;
80102b68:	8b 58 5c             	mov    0x5c(%eax),%ebx
80102b6b:	89 1d e8 e8 12 80    	mov    %ebx,0x8012e8e8
	for (i = 0; i < log.lh.n; i++) {
80102b71:	85 db                	test   %ebx,%ebx
80102b73:	7e 1d                	jle    80102b92 <initlog+0x72>
80102b75:	31 d2                	xor    %edx,%edx
80102b77:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80102b7e:	00 
80102b7f:	90                   	nop
		log.lh.block[i] = lh->block[i];
80102b80:	8b 4c 90 60          	mov    0x60(%eax,%edx,4),%ecx
80102b84:	89 0c 95 ec e8 12 80 	mov    %ecx,-0x7fed1714(,%edx,4)
	for (i = 0; i < log.lh.n; i++) {
80102b8b:	83 c2 01             	add    $0x1,%edx
80102b8e:	39 d3                	cmp    %edx,%ebx
80102b90:	75 ee                	jne    80102b80 <initlog+0x60>
	brelse(buf);
80102b92:	83 ec 0c             	sub    $0xc,%esp
80102b95:	50                   	push   %eax
80102b96:	e8 55 d6 ff ff       	call   801001f0 <brelse>

static void
recover_from_log(void)
{
	read_head();
	install_trans(); // if committed, copy from log to disk
80102b9b:	e8 80 fe ff ff       	call   80102a20 <install_trans>
	log.lh.n = 0;
80102ba0:	c7 05 e8 e8 12 80 00 	movl   $0x0,0x8012e8e8
80102ba7:	00 00 00 
	write_head(); // clear the log
80102baa:	e8 11 ff ff ff       	call   80102ac0 <write_head>
}
80102baf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80102bb2:	83 c4 10             	add    $0x10,%esp
80102bb5:	c9                   	leave
80102bb6:	c3                   	ret
80102bb7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80102bbe:	00 
80102bbf:	90                   	nop

80102bc0 <begin_op>:
}

// called at the start of each FS system call.
void
begin_op(void)
{
80102bc0:	55                   	push   %ebp
80102bc1:	89 e5                	mov    %esp,%ebp
80102bc3:	83 ec 14             	sub    $0x14,%esp
	acquire(&log.lock);
80102bc6:	68 a0 e8 12 80       	push   $0x8012e8a0
80102bcb:	e8 c0 1a 00 00       	call   80104690 <acquire>
80102bd0:	83 c4 10             	add    $0x10,%esp
80102bd3:	eb 18                	jmp    80102bed <begin_op+0x2d>
80102bd5:	8d 76 00             	lea    0x0(%esi),%esi
	while (1) {
		if (log.committing) {
			sleep(&log, &log.lock);
80102bd8:	83 ec 08             	sub    $0x8,%esp
80102bdb:	68 a0 e8 12 80       	push   $0x8012e8a0
80102be0:	68 a0 e8 12 80       	push   $0x8012e8a0
80102be5:	e8 06 15 00 00       	call   801040f0 <sleep>
80102bea:	83 c4 10             	add    $0x10,%esp
		if (log.committing) {
80102bed:	a1 e0 e8 12 80       	mov    0x8012e8e0,%eax
80102bf2:	85 c0                	test   %eax,%eax
80102bf4:	75 e2                	jne    80102bd8 <begin_op+0x18>
		} else if (log.lh.n + (log.outstanding + 1) * MAXOPBLOCKS > LOGSIZE) {
80102bf6:	a1 dc e8 12 80       	mov    0x8012e8dc,%eax
80102bfb:	8b 15 e8 e8 12 80    	mov    0x8012e8e8,%edx
80102c01:	83 c0 01             	add    $0x1,%eax
80102c04:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
80102c07:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
80102c0a:	83 fa 1e             	cmp    $0x1e,%edx
80102c0d:	7f c9                	jg     80102bd8 <begin_op+0x18>
			// this op might exhaust log space; wait for commit.
			sleep(&log, &log.lock);
		} else {
			log.outstanding += 1;
			release(&log.lock);
80102c0f:	83 ec 0c             	sub    $0xc,%esp
			log.outstanding += 1;
80102c12:	a3 dc e8 12 80       	mov    %eax,0x8012e8dc
			release(&log.lock);
80102c17:	68 a0 e8 12 80       	push   $0x8012e8a0
80102c1c:	e8 0f 1a 00 00       	call   80104630 <release>
			break;
		}
	}
}
80102c21:	83 c4 10             	add    $0x10,%esp
80102c24:	c9                   	leave
80102c25:	c3                   	ret
80102c26:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80102c2d:	00 
80102c2e:	66 90                	xchg   %ax,%ax

80102c30 <end_op>:

// called at the end of each FS system call.
// commits if this was the last outstanding operation.
void
end_op(void)
{
80102c30:	55                   	push   %ebp
80102c31:	89 e5                	mov    %esp,%ebp
80102c33:	57                   	push   %edi
80102c34:	56                   	push   %esi
80102c35:	53                   	push   %ebx
80102c36:	83 ec 18             	sub    $0x18,%esp
	int do_commit = 0;

	acquire(&log.lock);
80102c39:	68 a0 e8 12 80       	push   $0x8012e8a0
80102c3e:	e8 4d 1a 00 00       	call   80104690 <acquire>
	log.outstanding -= 1;
80102c43:	a1 dc e8 12 80       	mov    0x8012e8dc,%eax
	if (log.committing)
80102c48:	8b 35 e0 e8 12 80    	mov    0x8012e8e0,%esi
80102c4e:	83 c4 10             	add    $0x10,%esp
	log.outstanding -= 1;
80102c51:	8d 58 ff             	lea    -0x1(%eax),%ebx
80102c54:	89 1d dc e8 12 80    	mov    %ebx,0x8012e8dc
	if (log.committing)
80102c5a:	85 f6                	test   %esi,%esi
80102c5c:	0f 85 22 01 00 00    	jne    80102d84 <end_op+0x154>
		panic("log.committing");
	if (log.outstanding == 0) {
80102c62:	85 db                	test   %ebx,%ebx
80102c64:	0f 85 f6 00 00 00    	jne    80102d60 <end_op+0x130>
		do_commit = 1;
		log.committing = 1;
80102c6a:	c7 05 e0 e8 12 80 01 	movl   $0x1,0x8012e8e0
80102c71:	00 00 00 
		// begin_op() may be waiting for log space,
		// and decrementing log.outstanding has decreased
		// the amount of reserved space.
		wakeup(&log);
	}
	release(&log.lock);
80102c74:	83 ec 0c             	sub    $0xc,%esp
80102c77:	68 a0 e8 12 80       	push   $0x8012e8a0
80102c7c:	e8 af 19 00 00       	call   80104630 <release>
}

static void
commit(void)
{
	if (log.lh.n > 0) {
80102c81:	8b 0d e8 e8 12 80    	mov    0x8012e8e8,%ecx
80102c87:	83 c4 10             	add    $0x10,%esp
80102c8a:	85 c9                	test   %ecx,%ecx
80102c8c:	7f 42                	jg     80102cd0 <end_op+0xa0>
		acquire(&log.lock);
80102c8e:	83 ec 0c             	sub    $0xc,%esp
80102c91:	68 a0 e8 12 80       	push   $0x8012e8a0
80102c96:	e8 f5 19 00 00       	call   80104690 <acquire>
		log.committing = 0;
80102c9b:	c7 05 e0 e8 12 80 00 	movl   $0x0,0x8012e8e0
80102ca2:	00 00 00 
		wakeup(&log);
80102ca5:	c7 04 24 a0 e8 12 80 	movl   $0x8012e8a0,(%esp)
80102cac:	e8 ff 14 00 00       	call   801041b0 <wakeup>
		release(&log.lock);
80102cb1:	c7 04 24 a0 e8 12 80 	movl   $0x8012e8a0,(%esp)
80102cb8:	e8 73 19 00 00       	call   80104630 <release>
80102cbd:	83 c4 10             	add    $0x10,%esp
}
80102cc0:	8d 65 f4             	lea    -0xc(%ebp),%esp
80102cc3:	5b                   	pop    %ebx
80102cc4:	5e                   	pop    %esi
80102cc5:	5f                   	pop    %edi
80102cc6:	5d                   	pop    %ebp
80102cc7:	c3                   	ret
80102cc8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80102ccf:	00 
		struct buf *to = bread(log.dev, log.start + tail + 1); // log block
80102cd0:	a1 d4 e8 12 80       	mov    0x8012e8d4,%eax
80102cd5:	83 ec 08             	sub    $0x8,%esp
80102cd8:	01 d8                	add    %ebx,%eax
80102cda:	83 c0 01             	add    $0x1,%eax
80102cdd:	50                   	push   %eax
80102cde:	ff 35 e4 e8 12 80    	push   0x8012e8e4
80102ce4:	e8 e7 d3 ff ff       	call   801000d0 <bread>
80102ce9:	89 c6                	mov    %eax,%esi
		struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
80102ceb:	58                   	pop    %eax
80102cec:	5a                   	pop    %edx
80102ced:	ff 34 9d ec e8 12 80 	push   -0x7fed1714(,%ebx,4)
80102cf4:	ff 35 e4 e8 12 80    	push   0x8012e8e4
	for (tail = 0; tail < log.lh.n; tail++) {
80102cfa:	83 c3 01             	add    $0x1,%ebx
		struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
80102cfd:	e8 ce d3 ff ff       	call   801000d0 <bread>
		memmove(to->data, from->data, BSIZE);
80102d02:	83 c4 0c             	add    $0xc,%esp
		struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
80102d05:	89 c7                	mov    %eax,%edi
		memmove(to->data, from->data, BSIZE);
80102d07:	8d 40 5c             	lea    0x5c(%eax),%eax
80102d0a:	68 00 10 00 00       	push   $0x1000
80102d0f:	50                   	push   %eax
80102d10:	8d 46 5c             	lea    0x5c(%esi),%eax
80102d13:	50                   	push   %eax
80102d14:	e8 07 1b 00 00       	call   80104820 <memmove>
		bwrite(to); // write the log
80102d19:	89 34 24             	mov    %esi,(%esp)
80102d1c:	e8 8f d4 ff ff       	call   801001b0 <bwrite>
		brelse(from);
80102d21:	89 3c 24             	mov    %edi,(%esp)
80102d24:	e8 c7 d4 ff ff       	call   801001f0 <brelse>
		brelse(to);
80102d29:	89 34 24             	mov    %esi,(%esp)
80102d2c:	e8 bf d4 ff ff       	call   801001f0 <brelse>
	for (tail = 0; tail < log.lh.n; tail++) {
80102d31:	83 c4 10             	add    $0x10,%esp
80102d34:	3b 1d e8 e8 12 80    	cmp    0x8012e8e8,%ebx
80102d3a:	7c 94                	jl     80102cd0 <end_op+0xa0>
		write_log(); // Write modified blocks from cache to log
		write_head(); // Write header to disk -- the real commit
80102d3c:	e8 7f fd ff ff       	call   80102ac0 <write_head>
		install_trans(); // Now install writes to home locations
80102d41:	e8 da fc ff ff       	call   80102a20 <install_trans>
		log.lh.n = 0;
80102d46:	c7 05 e8 e8 12 80 00 	movl   $0x0,0x8012e8e8
80102d4d:	00 00 00 
		write_head(); // Erase the transaction from the log
80102d50:	e8 6b fd ff ff       	call   80102ac0 <write_head>
80102d55:	e9 34 ff ff ff       	jmp    80102c8e <end_op+0x5e>
80102d5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		wakeup(&log);
80102d60:	83 ec 0c             	sub    $0xc,%esp
80102d63:	68 a0 e8 12 80       	push   $0x8012e8a0
80102d68:	e8 43 14 00 00       	call   801041b0 <wakeup>
	release(&log.lock);
80102d6d:	c7 04 24 a0 e8 12 80 	movl   $0x8012e8a0,(%esp)
80102d74:	e8 b7 18 00 00       	call   80104630 <release>
80102d79:	83 c4 10             	add    $0x10,%esp
}
80102d7c:	8d 65 f4             	lea    -0xc(%ebp),%esp
80102d7f:	5b                   	pop    %ebx
80102d80:	5e                   	pop    %esi
80102d81:	5f                   	pop    %edi
80102d82:	5d                   	pop    %ebp
80102d83:	c3                   	ret
		panic("log.committing");
80102d84:	83 ec 0c             	sub    $0xc,%esp
80102d87:	68 2d 82 10 80       	push   $0x8010822d
80102d8c:	e8 ef d5 ff ff       	call   80100380 <panic>
80102d91:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80102d98:	00 
80102d99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80102da0 <log_write>:
//   modify bp->data[]
//   log_write(bp)
//   brelse(bp)
void
log_write(struct buf *b)
{
80102da0:	55                   	push   %ebp
80102da1:	89 e5                	mov    %esp,%ebp
80102da3:	53                   	push   %ebx
80102da4:	83 ec 04             	sub    $0x4,%esp
	int i;

	if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
80102da7:	8b 15 e8 e8 12 80    	mov    0x8012e8e8,%edx
{
80102dad:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
80102db0:	83 fa 1d             	cmp    $0x1d,%edx
80102db3:	7f 7d                	jg     80102e32 <log_write+0x92>
80102db5:	a1 d8 e8 12 80       	mov    0x8012e8d8,%eax
80102dba:	83 e8 01             	sub    $0x1,%eax
80102dbd:	39 c2                	cmp    %eax,%edx
80102dbf:	7d 71                	jge    80102e32 <log_write+0x92>
		panic("too big a transaction");
	if (log.outstanding < 1)
80102dc1:	a1 dc e8 12 80       	mov    0x8012e8dc,%eax
80102dc6:	85 c0                	test   %eax,%eax
80102dc8:	7e 75                	jle    80102e3f <log_write+0x9f>
		panic("log_write outside of trans");

	acquire(&log.lock);
80102dca:	83 ec 0c             	sub    $0xc,%esp
80102dcd:	68 a0 e8 12 80       	push   $0x8012e8a0
80102dd2:	e8 b9 18 00 00       	call   80104690 <acquire>
	for (i = 0; i < log.lh.n; i++) {
		if (log.lh.block[i] == b->blockno) // log absorbtion
80102dd7:	8b 4b 08             	mov    0x8(%ebx),%ecx
	for (i = 0; i < log.lh.n; i++) {
80102dda:	83 c4 10             	add    $0x10,%esp
80102ddd:	31 c0                	xor    %eax,%eax
80102ddf:	8b 15 e8 e8 12 80    	mov    0x8012e8e8,%edx
80102de5:	85 d2                	test   %edx,%edx
80102de7:	7f 0e                	jg     80102df7 <log_write+0x57>
80102de9:	eb 15                	jmp    80102e00 <log_write+0x60>
80102deb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
80102df0:	83 c0 01             	add    $0x1,%eax
80102df3:	39 c2                	cmp    %eax,%edx
80102df5:	74 29                	je     80102e20 <log_write+0x80>
		if (log.lh.block[i] == b->blockno) // log absorbtion
80102df7:	39 0c 85 ec e8 12 80 	cmp    %ecx,-0x7fed1714(,%eax,4)
80102dfe:	75 f0                	jne    80102df0 <log_write+0x50>
			break;
	}
	log.lh.block[i] = b->blockno;
80102e00:	89 0c 85 ec e8 12 80 	mov    %ecx,-0x7fed1714(,%eax,4)
	if (i == log.lh.n)
80102e07:	39 c2                	cmp    %eax,%edx
80102e09:	74 1c                	je     80102e27 <log_write+0x87>
		log.lh.n++;
	b->flags |= B_DIRTY; // prevent eviction
80102e0b:	83 0b 04             	orl    $0x4,(%ebx)
	release(&log.lock);
}
80102e0e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
	release(&log.lock);
80102e11:	c7 45 08 a0 e8 12 80 	movl   $0x8012e8a0,0x8(%ebp)
}
80102e18:	c9                   	leave
	release(&log.lock);
80102e19:	e9 12 18 00 00       	jmp    80104630 <release>
80102e1e:	66 90                	xchg   %ax,%ax
	log.lh.block[i] = b->blockno;
80102e20:	89 0c 95 ec e8 12 80 	mov    %ecx,-0x7fed1714(,%edx,4)
		log.lh.n++;
80102e27:	83 c2 01             	add    $0x1,%edx
80102e2a:	89 15 e8 e8 12 80    	mov    %edx,0x8012e8e8
80102e30:	eb d9                	jmp    80102e0b <log_write+0x6b>
		panic("too big a transaction");
80102e32:	83 ec 0c             	sub    $0xc,%esp
80102e35:	68 3c 82 10 80       	push   $0x8010823c
80102e3a:	e8 41 d5 ff ff       	call   80100380 <panic>
		panic("log_write outside of trans");
80102e3f:	83 ec 0c             	sub    $0xc,%esp
80102e42:	68 52 82 10 80       	push   $0x80108252
80102e47:	e8 34 d5 ff ff       	call   80100380 <panic>
80102e4c:	66 90                	xchg   %ax,%ax
80102e4e:	66 90                	xchg   %ax,%ax

80102e50 <mpmain>:
}

// Common CPU setup code.
static void
mpmain(void)
{
80102e50:	55                   	push   %ebp
80102e51:	89 e5                	mov    %esp,%ebp
80102e53:	83 ec 08             	sub    $0x8,%esp
	cprintf("\eb1cpu%d: starting\eb0\n", my_cpu_id());
80102e56:	e8 55 0b 00 00       	call   801039b0 <my_cpu_id>
80102e5b:	83 ec 08             	sub    $0x8,%esp
80102e5e:	50                   	push   %eax
80102e5f:	68 6d 82 10 80       	push   $0x8010826d
80102e64:	e8 e7 d8 ff ff       	call   80100750 <cprintf>
	idtinit(); // load idt register
80102e69:	e8 d2 2e 00 00       	call   80105d40 <idtinit>
	xchg(&(mycpu()->started), 1); // tell startothers() we're up
80102e6e:	e8 dd 0a 00 00       	call   80103950 <mycpu>
80102e73:	89 c2                	mov    %eax,%edx
xchg(volatile uint *addr, uint newval)
{
	uint result;

	// The + in "+m" denotes a read-modify-write operand.
	__asm__ __volatile__("lock; xchgl %0, %1"
80102e75:	b8 01 00 00 00       	mov    $0x1,%eax
80102e7a:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
	scheduler(); // start running processes
80102e81:	e8 2a 0e 00 00       	call   80103cb0 <scheduler>
80102e86:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80102e8d:	00 
80102e8e:	66 90                	xchg   %ax,%ax

80102e90 <mpenter>:
{
80102e90:	55                   	push   %ebp
80102e91:	89 e5                	mov    %esp,%ebp
80102e93:	83 ec 08             	sub    $0x8,%esp
	switchkvm();
80102e96:	e8 b5 35 00 00       	call   80106450 <switchkvm>
	seginit();
80102e9b:	e8 20 35 00 00       	call   801063c0 <seginit>
	lapicinit();
80102ea0:	e8 5b 4a 00 00       	call   80107900 <lapicinit>
	mpmain();
80102ea5:	e8 a6 ff ff ff       	call   80102e50 <mpmain>
80102eaa:	66 90                	xchg   %ax,%ax
80102eac:	66 90                	xchg   %ax,%ax
80102eae:	66 90                	xchg   %ax,%ax

80102eb0 <main>:
{
80102eb0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
80102eb4:	83 e4 f0             	and    $0xfffffff0,%esp
80102eb7:	ff 71 fc             	push   -0x4(%ecx)
80102eba:	55                   	push   %ebp
80102ebb:	89 e5                	mov    %esp,%ebp
80102ebd:	53                   	push   %ebx
80102ebe:	51                   	push   %ecx
	kinit1(end, P2V(4 * 1024 * 1024)); // phys page allocator
80102ebf:	83 ec 08             	sub    $0x8,%esp
80102ec2:	68 00 00 40 80       	push   $0x80400000
80102ec7:	68 90 a2 13 80       	push   $0x8013a290
80102ecc:	e8 5f fa ff ff       	call   80102930 <kinit1>
	kvmalloc(); // kernel page table
80102ed1:	e8 3a 3a 00 00       	call   80106910 <kvmalloc>
	if (acpiinit())
80102ed6:	e8 55 4e 00 00       	call   80107d30 <acpiinit>
80102edb:	83 c4 10             	add    $0x10,%esp
80102ede:	85 c0                	test   %eax,%eax
80102ee0:	0f 85 06 01 00 00    	jne    80102fec <main+0x13c>
	lapicinit(); // interrupt controller
80102ee6:	e8 15 4a 00 00       	call   80107900 <lapicinit>
	seginit(); // segment descriptors
80102eeb:	e8 d0 34 00 00       	call   801063c0 <seginit>
	picinit(); // disable pic
80102ef0:	e8 4b 05 00 00       	call   80103440 <picinit>
	ioapicinit(); // another interrupt controller
80102ef5:	e8 06 f8 ff ff       	call   80102700 <ioapicinit>
	consoleinit(); // console hardware
80102efa:	e8 01 dd ff ff       	call   80100c00 <consoleinit>
	nulldrvinit();
80102eff:	e8 fc 04 00 00       	call   80103400 <nulldrvinit>
	uartinit(); // serial port
80102f04:	e8 97 31 00 00       	call   801060a0 <uartinit>
	pinit(); // process table
80102f09:	e8 22 0a 00 00       	call   80103930 <pinit>
	tvinit(); // trap vectors
80102f0e:	e8 ad 2d 00 00       	call   80105cc0 <tvinit>
	binit(); // buffer cache
80102f13:	e8 28 d1 ff ff       	call   80100040 <binit>
	fileinit(); // file table
80102f18:	e8 f3 e0 ff ff       	call   80101010 <fileinit>
	ideinit(); // disk
80102f1d:	e8 be f5 ff ff       	call   801024e0 <ideinit>

	// Write entry code to unused memory at 0x7000.
	// The linker has placed the image of entryother.S in
	// _binary_entryother_start.
	code = P2V(0x7000);
	memmove(code, _binary_bin_entryother_start,
80102f22:	83 ec 04             	sub    $0x4,%esp
80102f25:	68 8a 00 00 00       	push   $0x8a
80102f2a:	68 90 c4 10 80       	push   $0x8010c490
80102f2f:	68 00 70 00 80       	push   $0x80007000
80102f34:	e8 e7 18 00 00       	call   80104820 <memmove>
					(uint)_binary_bin_entryother_size);

	for (c = cpus; c < cpus + ncpu; c++) {
80102f39:	83 c4 10             	add    $0x10,%esp
80102f3c:	69 05 84 e9 12 80 b0 	imul   $0xb0,0x8012e984,%eax
80102f43:	00 00 00 
80102f46:	05 a0 e9 12 80       	add    $0x8012e9a0,%eax
80102f4b:	3d a0 e9 12 80       	cmp    $0x8012e9a0,%eax
80102f50:	76 7e                	jbe    80102fd0 <main+0x120>
80102f52:	bb a0 e9 12 80       	mov    $0x8012e9a0,%ebx
80102f57:	eb 20                	jmp    80102f79 <main+0xc9>
80102f59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80102f60:	69 05 84 e9 12 80 b0 	imul   $0xb0,0x8012e984,%eax
80102f67:	00 00 00 
80102f6a:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
80102f70:	05 a0 e9 12 80       	add    $0x8012e9a0,%eax
80102f75:	39 c3                	cmp    %eax,%ebx
80102f77:	73 57                	jae    80102fd0 <main+0x120>
		if (c == mycpu()) // We've started already.
80102f79:	e8 d2 09 00 00       	call   80103950 <mycpu>
80102f7e:	39 c3                	cmp    %eax,%ebx
80102f80:	74 de                	je     80102f60 <main+0xb0>
			continue;

		// Tell entryother.S what stack to use, where to enter, and what
		// pgdir to use. We cannot use kpgdir yet, because the AP processor
		// is running in low  memory, so we use entrypgdir for the APs too.
		stack = kalloc();
80102f82:	e8 19 fa ff ff       	call   801029a0 <kalloc>
		*(void **)(code - 4) = stack + KSTACKSIZE;
		*(void (**)(void))(code - 8) = mpenter;
		*(int **)(code - 12) = (void *)V2P(entrypgdir);

		lapicstartap(c->apicid, V2P(code));
80102f87:	83 ec 08             	sub    $0x8,%esp
		*(void (**)(void))(code - 8) = mpenter;
80102f8a:	c7 05 f8 6f 00 80 90 	movl   $0x80102e90,0x80006ff8
80102f91:	2e 10 80 
		*(int **)(code - 12) = (void *)V2P(entrypgdir);
80102f94:	c7 05 f4 6f 00 80 00 	movl   $0x10b000,0x80006ff4
80102f9b:	b0 10 00 
		*(void **)(code - 4) = stack + KSTACKSIZE;
80102f9e:	05 00 10 00 00       	add    $0x1000,%eax
80102fa3:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
		lapicstartap(c->apicid, V2P(code));
80102fa8:	0f b6 03             	movzbl (%ebx),%eax
80102fab:	68 00 70 00 00       	push   $0x7000
80102fb0:	50                   	push   %eax
80102fb1:	e8 aa 4a 00 00       	call   80107a60 <lapicstartap>

		// wait for cpu to finish mpmain()
		while (c->started == 0)
80102fb6:	83 c4 10             	add    $0x10,%esp
80102fb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
80102fc0:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
80102fc6:	85 c0                	test   %eax,%eax
80102fc8:	74 f6                	je     80102fc0 <main+0x110>
80102fca:	eb 94                	jmp    80102f60 <main+0xb0>
80102fcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
	kinit2(P2V(4 * 1024 * 1024), P2V(PHYSTOP)); // must come after startothers()
80102fd0:	83 ec 08             	sub    $0x8,%esp
80102fd3:	68 00 00 00 8e       	push   $0x8e000000
80102fd8:	68 00 00 40 80       	push   $0x80400000
80102fdd:	e8 ee f8 ff ff       	call   801028d0 <kinit2>
	userinit(); // first user process
80102fe2:	e8 29 0a 00 00       	call   80103a10 <userinit>
	mpmain(); // finish this processor's setup
80102fe7:	e8 64 fe ff ff       	call   80102e50 <mpmain>
		mpinit(); // detect other processors
80102fec:	e8 8f 00 00 00       	call   80103080 <mpinit>
80102ff1:	e9 f0 fe ff ff       	jmp    80102ee6 <main+0x36>
80102ff6:	66 90                	xchg   %ax,%ax
80102ff8:	66 90                	xchg   %ax,%ax
80102ffa:	66 90                	xchg   %ax,%ax
80102ffc:	66 90                	xchg   %ax,%ax
80102ffe:	66 90                	xchg   %ax,%ax

80103000 <mpsearch1>:
}

// Look for an MP structure in the len bytes at addr.
static struct mp *
mpsearch1(uint a, int len)
{
80103000:	55                   	push   %ebp
80103001:	89 e5                	mov    %esp,%ebp
80103003:	57                   	push   %edi
80103004:	56                   	push   %esi
	uchar *e, *p, *addr;

	addr = P2V(a);
80103005:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
{
8010300b:	53                   	push   %ebx
	e = addr + len;
8010300c:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
{
8010300f:	83 ec 0c             	sub    $0xc,%esp
	for (p = addr; p < e; p += sizeof(struct mp))
80103012:	39 de                	cmp    %ebx,%esi
80103014:	72 10                	jb     80103026 <mpsearch1+0x26>
80103016:	eb 50                	jmp    80103068 <mpsearch1+0x68>
80103018:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010301f:	00 
80103020:	89 fe                	mov    %edi,%esi
80103022:	39 df                	cmp    %ebx,%edi
80103024:	73 42                	jae    80103068 <mpsearch1+0x68>
		// see if we found the _MP_ signature that we need.
		// https://web.archive.org/web/20121002210153/http://download.intel.com/design/archives/processors/pro/docs/24201606.pdf
		if (memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
80103026:	83 ec 04             	sub    $0x4,%esp
80103029:	8d 7e 10             	lea    0x10(%esi),%edi
8010302c:	6a 04                	push   $0x4
8010302e:	68 84 82 10 80       	push   $0x80108284
80103033:	56                   	push   %esi
80103034:	e8 97 17 00 00       	call   801047d0 <memcmp>
80103039:	83 c4 10             	add    $0x10,%esp
8010303c:	85 c0                	test   %eax,%eax
8010303e:	75 e0                	jne    80103020 <mpsearch1+0x20>
80103040:	89 f2                	mov    %esi,%edx
80103042:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		sum += addr[i];
80103048:	0f b6 0a             	movzbl (%edx),%ecx
	for (i = 0; i < len; i++)
8010304b:	83 c2 01             	add    $0x1,%edx
		sum += addr[i];
8010304e:	01 c8                	add    %ecx,%eax
	for (i = 0; i < len; i++)
80103050:	39 fa                	cmp    %edi,%edx
80103052:	75 f4                	jne    80103048 <mpsearch1+0x48>
		if (memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
80103054:	84 c0                	test   %al,%al
80103056:	75 c8                	jne    80103020 <mpsearch1+0x20>
			return (struct mp *)p;
	return 0;
}
80103058:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010305b:	89 f0                	mov    %esi,%eax
8010305d:	5b                   	pop    %ebx
8010305e:	5e                   	pop    %esi
8010305f:	5f                   	pop    %edi
80103060:	5d                   	pop    %ebp
80103061:	c3                   	ret
80103062:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80103068:	8d 65 f4             	lea    -0xc(%ebp),%esp
	return 0;
8010306b:	31 f6                	xor    %esi,%esi
}
8010306d:	5b                   	pop    %ebx
8010306e:	89 f0                	mov    %esi,%eax
80103070:	5e                   	pop    %esi
80103071:	5f                   	pop    %edi
80103072:	5d                   	pop    %ebp
80103073:	c3                   	ret
80103074:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010307b:	00 
8010307c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80103080 <mpinit>:
	return conf;
}

void
mpinit(void)
{
80103080:	55                   	push   %ebp
80103081:	89 e5                	mov    %esp,%ebp
80103083:	57                   	push   %edi
80103084:	56                   	push   %esi
80103085:	53                   	push   %ebx
80103086:	83 ec 3c             	sub    $0x3c,%esp
	if ((p = ((bda[0x0F] << 8) | bda[0x0E]) << 4)) {
80103089:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
80103090:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
80103097:	c1 e0 08             	shl    $0x8,%eax
8010309a:	09 d0                	or     %edx,%eax
8010309c:	c1 e0 04             	shl    $0x4,%eax
8010309f:	75 1b                	jne    801030bc <mpinit+0x3c>
		p = ((bda[0x14] << 8) | bda[0x13]) * 1024;
801030a1:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
801030a8:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
801030af:	c1 e0 08             	shl    $0x8,%eax
801030b2:	09 d0                	or     %edx,%eax
801030b4:	c1 e0 0a             	shl    $0xa,%eax
		if ((mp = mpsearch1(p - 1024, 1024)))
801030b7:	2d 00 04 00 00       	sub    $0x400,%eax
		if ((mp = mpsearch1(p, 1024)))
801030bc:	ba 00 04 00 00       	mov    $0x400,%edx
801030c1:	e8 3a ff ff ff       	call   80103000 <mpsearch1>
801030c6:	89 c7                	mov    %eax,%edi
801030c8:	85 c0                	test   %eax,%eax
801030ca:	0f 84 00 02 00 00    	je     801032d0 <mpinit+0x250>
	if ((mp = mpsearch()) == 0 || mp->physaddr == 0)
801030d0:	8b 77 04             	mov    0x4(%edi),%esi
801030d3:	85 f6                	test   %esi,%esi
801030d5:	0f 84 15 01 00 00    	je     801031f0 <mpinit+0x170>
	if (memcmp(conf, "PCMP", 4) != 0)
801030db:	83 ec 04             	sub    $0x4,%esp
#endif

#ifndef __ASSEMBLER__

static inline uintptr_t v2p(void *a) { return ((uintptr_t) (a)) - ((uintptr_t)KERNBASE); }
static inline void *p2v(uintptr_t a) { return (void *) ((a) + ((uintptr_t)KERNBASE)); }
801030de:	8d 8e 00 00 00 80    	lea    -0x80000000(%esi),%ecx
	conf = (struct mpconf *)p2v((uintptr_t)mp->physaddr);
801030e4:	89 f3                	mov    %esi,%ebx
	if (memcmp(conf, "PCMP", 4) != 0)
801030e6:	6a 04                	push   $0x4
801030e8:	68 89 82 10 80       	push   $0x80108289
801030ed:	51                   	push   %ecx
801030ee:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
801030f1:	e8 da 16 00 00       	call   801047d0 <memcmp>
801030f6:	83 c4 10             	add    $0x10,%esp
801030f9:	85 c0                	test   %eax,%eax
801030fb:	0f 85 ef 00 00 00    	jne    801031f0 <mpinit+0x170>
	if (conf->version != 1 && conf->version != 4)
80103101:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
80103104:	0f b6 41 06          	movzbl 0x6(%ecx),%eax
80103108:	3c 01                	cmp    $0x1,%al
8010310a:	74 08                	je     80103114 <mpinit+0x94>
8010310c:	3c 04                	cmp    $0x4,%al
8010310e:	0f 85 dc 00 00 00    	jne    801031f0 <mpinit+0x170>
	if (sum((uchar *)conf, conf->length) != 0)
80103114:	0f b7 41 04          	movzwl 0x4(%ecx),%eax
	for (i = 0; i < len; i++)
80103118:	66 85 c0             	test   %ax,%ax
8010311b:	0f 84 04 02 00 00    	je     80103325 <mpinit+0x2a5>
80103121:	89 45 d4             	mov    %eax,-0x2c(%ebp)
80103124:	8d 14 06             	lea    (%esi,%eax,1),%edx
	sum = 0;
80103127:	31 c0                	xor    %eax,%eax
80103129:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		sum += addr[i];
80103130:	0f b6 b3 00 00 00 80 	movzbl -0x80000000(%ebx),%esi
	for (i = 0; i < len; i++)
80103137:	83 c3 01             	add    $0x1,%ebx
		sum += addr[i];
8010313a:	01 f0                	add    %esi,%eax
	for (i = 0; i < len; i++)
8010313c:	39 da                	cmp    %ebx,%edx
8010313e:	75 f0                	jne    80103130 <mpinit+0xb0>
	if (sum((uchar *)conf, conf->length) != 0)
80103140:	84 c0                	test   %al,%al
80103142:	0f 85 a8 00 00 00    	jne    801031f0 <mpinit+0x170>
	_Static_assert(sizeof(struct mpbus) == 8, "MP Bus Struct malformed.");

	if ((conf = mpconfig(&mp)) == 0)
		panic("Expect to run on an SMP");
	ismp = 1;
	lapic = (uint *)conf->lapicaddr;
80103148:	8b 41 24             	mov    0x24(%ecx),%eax
	for (p = (uchar *)(conf + 1), e = (uchar *)conf + conf->length; p < e;) {
8010314b:	8d 71 2c             	lea    0x2c(%ecx),%esi
	ismp = 1;
8010314e:	c7 45 c0 01 00 00 00 	movl   $0x1,-0x40(%ebp)
	lapic = (uint *)conf->lapicaddr;
80103155:	a3 8c 92 13 80       	mov    %eax,0x8013928c
	for (p = (uchar *)(conf + 1), e = (uchar *)conf + conf->length; p < e;) {
8010315a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8010315d:	01 c8                	add    %ecx,%eax
8010315f:	39 c6                	cmp    %eax,%esi
80103161:	73 6a                	jae    801031cd <mpinit+0x14d>
80103163:	89 7d bc             	mov    %edi,-0x44(%ebp)
80103166:	89 c7                	mov    %eax,%edi
80103168:	eb 3a                	jmp    801031a4 <mpinit+0x124>
8010316a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		switch (*p) {
80103170:	84 c0                	test   %al,%al
80103172:	0f 84 98 00 00 00    	je     80103210 <mpinit+0x190>
			p += sizeof(struct mpioapic);
			continue;
		case MPBUS:
			bus = (struct mpbus *)p;
			char bus_str[7];
			safestrcpy(bus_str, (char *)bus->bus_string, 6);
80103178:	83 ec 04             	sub    $0x4,%esp
8010317b:	8d 46 02             	lea    0x2(%esi),%eax
			cprintf("Bus discovered: %s\n", bus_str);
			p += sizeof(struct mpbus);
8010317e:	83 c6 08             	add    $0x8,%esi
			safestrcpy(bus_str, (char *)bus->bus_string, 6);
80103181:	6a 06                	push   $0x6
80103183:	50                   	push   %eax
80103184:	8d 45 e1             	lea    -0x1f(%ebp),%eax
80103187:	50                   	push   %eax
80103188:	e8 b3 17 00 00       	call   80104940 <safestrcpy>
			cprintf("Bus discovered: %s\n", bus_str);
8010318d:	8d 45 e1             	lea    -0x1f(%ebp),%eax
80103190:	5a                   	pop    %edx
80103191:	59                   	pop    %ecx
80103192:	50                   	push   %eax
80103193:	68 d6 82 10 80       	push   $0x801082d6
80103198:	e8 b3 d5 ff ff       	call   80100750 <cprintf>
			continue;
8010319d:	83 c4 10             	add    $0x10,%esp
	for (p = (uchar *)(conf + 1), e = (uchar *)conf + conf->length; p < e;) {
801031a0:	39 fe                	cmp    %edi,%esi
801031a2:	73 1b                	jae    801031bf <mpinit+0x13f>
		switch (*p) {
801031a4:	0f b6 06             	movzbl (%esi),%eax
801031a7:	3c 02                	cmp    $0x2,%al
801031a9:	74 55                	je     80103200 <mpinit+0x180>
801031ab:	76 c3                	jbe    80103170 <mpinit+0xf0>
801031ad:	83 e8 03             	sub    $0x3,%eax
801031b0:	3c 01                	cmp    $0x1,%al
801031b2:	0f 87 08 01 00 00    	ja     801032c0 <mpinit+0x240>
		case MPIOINTR:
		case MPLINTR:
			p += 8;
801031b8:	83 c6 08             	add    $0x8,%esi
	for (p = (uchar *)(conf + 1), e = (uchar *)conf + conf->length; p < e;) {
801031bb:	39 fe                	cmp    %edi,%esi
801031bd:	72 e5                	jb     801031a4 <mpinit+0x124>
		default:
			ismp = 0;
			break;
		}
	}
	if (!ismp)
801031bf:	8b 45 c0             	mov    -0x40(%ebp),%eax
801031c2:	8b 7d bc             	mov    -0x44(%ebp),%edi
801031c5:	85 c0                	test   %eax,%eax
801031c7:	0f 84 9e 01 00 00    	je     8010336b <mpinit+0x2eb>
		panic("Didn't find a suitable machine");

	if (mp->imcrp) {
801031cd:	80 7f 0c 00          	cmpb   $0x0,0xc(%edi)
801031d1:	74 15                	je     801031e8 <mpinit+0x168>
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
801031d3:	b8 70 00 00 00       	mov    $0x70,%eax
801031d8:	ba 22 00 00 00       	mov    $0x22,%edx
801031dd:	ee                   	out    %al,(%dx)
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
801031de:	ba 23 00 00 00       	mov    $0x23,%edx
801031e3:	ec                   	in     (%dx),%al
		// Bochs doesn't support IMCR, so this doesn't run on Bochs.
		// But it would on real hardware.
		outb(0x22, 0x70); // Select IMCR
		outb(0x23, inb(0x23) | 1); // Mask external interrupts.
801031e4:	83 c8 01             	or     $0x1,%eax
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
801031e7:	ee                   	out    %al,(%dx)
	}
}
801031e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
801031eb:	5b                   	pop    %ebx
801031ec:	5e                   	pop    %esi
801031ed:	5f                   	pop    %edi
801031ee:	5d                   	pop    %ebp
801031ef:	c3                   	ret
		panic("Expect to run on an SMP");
801031f0:	83 ec 0c             	sub    $0xc,%esp
801031f3:	68 8e 82 10 80       	push   $0x8010828e
801031f8:	e8 83 d1 ff ff       	call   80100380 <panic>
801031fd:	8d 76 00             	lea    0x0(%esi),%esi
			ioapicid = ioapic->apicno;
80103200:	0f b6 46 01          	movzbl 0x1(%esi),%eax
			p += sizeof(struct mpioapic);
80103204:	83 c6 08             	add    $0x8,%esi
			ioapicid = ioapic->apicno;
80103207:	a2 80 e9 12 80       	mov    %al,0x8012e980
			continue;
8010320c:	eb 92                	jmp    801031a0 <mpinit+0x120>
8010320e:	66 90                	xchg   %ax,%ax

static inline void
cpuid(uint32_t id, uint32_t count,
		uint32_t *a, uint32_t *b, uint32_t *c, uint32_t *d)
{
	__asm__ __volatile__("movl %0, %%eax\t\n"
80103210:	b8 01 00 00 00       	mov    $0x1,%eax
80103215:	31 c9                	xor    %ecx,%ecx
80103217:	89 c0                	mov    %eax,%eax
80103219:	0f a2                	cpuid
			proc->signature[0] = a & 0xF; // stepping
8010321b:	89 c3                	mov    %eax,%ebx
8010321d:	89 c1                	mov    %eax,%ecx
8010321f:	83 e3 0f             	and    $0xf,%ebx
			proc->signature[1] = (a >> 4) & 0xF; // model
80103222:	89 ca                	mov    %ecx,%edx
			proc->signature[3] = (a >> 20) & 0xFF; // extended family
80103224:	89 4d d0             	mov    %ecx,-0x30(%ebp)
			proc->signature[0] = a & 0xF; // stepping
80103227:	89 d8                	mov    %ebx,%eax
			proc->signature[2] = (a >> 8) & 0xF; // family
80103229:	89 cb                	mov    %ecx,%ebx
			proc->signature[1] = (a >> 4) & 0xF; // model
8010322b:	c0 ea 04             	shr    $0x4,%dl
			proc->signature[2] = (a >> 8) & 0xF; // family
8010322e:	c1 eb 08             	shr    $0x8,%ebx
			proc->signature[1] = (a >> 4) & 0xF; // model
80103231:	88 55 d4             	mov    %dl,-0x2c(%ebp)
			proc->signature[0] = a & 0xF; // stepping
80103234:	31 d2                	xor    %edx,%edx
			proc->signature[3] = (a >> 20) & 0xFF; // extended family
80103236:	c1 e9 14             	shr    $0x14,%ecx
			proc->signature[0] = a & 0xF; // stepping
80103239:	83 e3 0f             	and    $0xf,%ebx
8010323c:	88 c2                	mov    %al,%dl
8010323e:	88 45 cb             	mov    %al,-0x35(%ebp)
80103241:	8a 75 d4             	mov    -0x2c(%ebp),%dh
80103244:	89 d8                	mov    %ebx,%eax
80103246:	c1 e0 10             	shl    $0x10,%eax
80103249:	0f b7 d2             	movzwl %dx,%edx
8010324c:	89 45 cc             	mov    %eax,-0x34(%ebp)
8010324f:	0f b6 c1             	movzbl %cl,%eax
80103252:	c1 e1 18             	shl    $0x18,%ecx
80103255:	89 45 c4             	mov    %eax,-0x3c(%ebp)
80103258:	8b 45 cc             	mov    -0x34(%ebp),%eax
8010325b:	09 c2                	or     %eax,%edx
			kernel_assert(a != 0);
8010325d:	8b 45 d0             	mov    -0x30(%ebp),%eax
			proc->signature[0] = a & 0xF; // stepping
80103260:	09 ca                	or     %ecx,%edx
80103262:	89 56 04             	mov    %edx,0x4(%esi)
			kernel_assert(a != 0);
80103265:	85 c0                	test   %eax,%eax
80103267:	0f 84 c4 00 00 00    	je     80103331 <mpinit+0x2b1>
			cprintf("CPU Model=%#x, Family=%#x Stepping=%#x\n", model, family,
8010326d:	0f b6 4d cb          	movzbl -0x35(%ebp),%ecx
			model = proc->signature[1];
80103271:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
			model += ((a >> 16) & 0xF) << 4;
80103275:	c1 e8 0c             	shr    $0xc,%eax
80103278:	25 f0 00 00 00       	and    $0xf0,%eax
			cprintf("CPU Model=%#x, Family=%#x Stepping=%#x\n", model, family,
8010327d:	51                   	push   %ecx
			family = proc->signature[2] + proc->signature[3];
8010327e:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
			model += ((a >> 16) & 0xF) << 4;
80103281:	01 d0                	add    %edx,%eax
			family = proc->signature[2] + proc->signature[3];
80103283:	01 d9                	add    %ebx,%ecx
			cprintf("CPU Model=%#x, Family=%#x Stepping=%#x\n", model, family,
80103285:	51                   	push   %ecx
80103286:	50                   	push   %eax
80103287:	68 14 88 10 80       	push   $0x80108814
8010328c:	e8 bf d4 ff ff       	call   80100750 <cprintf>
			if (ncpu < NCPU) {
80103291:	a1 84 e9 12 80       	mov    0x8012e984,%eax
80103296:	83 c4 10             	add    $0x10,%esp
80103299:	83 f8 7f             	cmp    $0x7f,%eax
8010329c:	7f 18                	jg     801032b6 <mpinit+0x236>
				cpus[ncpu].apicid = proc->apicid; // apicid may differ from ncpu
8010329e:	69 d0 b0 00 00 00    	imul   $0xb0,%eax,%edx
801032a4:	0f b6 4e 01          	movzbl 0x1(%esi),%ecx
				ncpu++;
801032a8:	83 c0 01             	add    $0x1,%eax
801032ab:	a3 84 e9 12 80       	mov    %eax,0x8012e984
				cpus[ncpu].apicid = proc->apicid; // apicid may differ from ncpu
801032b0:	88 8a a0 e9 12 80    	mov    %cl,-0x7fed1660(%edx)
			p += sizeof(struct mpproc);
801032b6:	83 c6 14             	add    $0x14,%esi
			continue;
801032b9:	e9 e2 fe ff ff       	jmp    801031a0 <mpinit+0x120>
801032be:	66 90                	xchg   %ax,%ax
		switch (*p) {
801032c0:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
801032c7:	e9 d4 fe ff ff       	jmp    801031a0 <mpinit+0x120>
801032cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
{
801032d0:	bf 00 00 0f 80       	mov    $0x800f0000,%edi
801032d5:	eb 17                	jmp    801032ee <mpinit+0x26e>
801032d7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801032de:	00 
801032df:	90                   	nop
	for (p = addr; p < e; p += sizeof(struct mp))
801032e0:	89 df                	mov    %ebx,%edi
801032e2:	81 fb 00 00 10 80    	cmp    $0x80100000,%ebx
801032e8:	0f 84 02 ff ff ff    	je     801031f0 <mpinit+0x170>
		if (memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
801032ee:	83 ec 04             	sub    $0x4,%esp
801032f1:	8d 5f 10             	lea    0x10(%edi),%ebx
801032f4:	6a 04                	push   $0x4
801032f6:	68 84 82 10 80       	push   $0x80108284
801032fb:	57                   	push   %edi
801032fc:	e8 cf 14 00 00       	call   801047d0 <memcmp>
80103301:	83 c4 10             	add    $0x10,%esp
80103304:	85 c0                	test   %eax,%eax
80103306:	75 d8                	jne    801032e0 <mpinit+0x260>
80103308:	89 fa                	mov    %edi,%edx
8010330a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		sum += addr[i];
80103310:	0f b6 0a             	movzbl (%edx),%ecx
	for (i = 0; i < len; i++)
80103313:	83 c2 01             	add    $0x1,%edx
		sum += addr[i];
80103316:	01 c8                	add    %ecx,%eax
	for (i = 0; i < len; i++)
80103318:	39 d3                	cmp    %edx,%ebx
8010331a:	75 f4                	jne    80103310 <mpinit+0x290>
		if (memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
8010331c:	84 c0                	test   %al,%al
8010331e:	75 c0                	jne    801032e0 <mpinit+0x260>
80103320:	e9 ab fd ff ff       	jmp    801030d0 <mpinit+0x50>
80103325:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
8010332c:	e9 17 fe ff ff       	jmp    80103148 <mpinit+0xc8>

static inline void
kernel_assert_fail(const char *assertion, const char *file,
		int lineno, const char *func)
{
	cprintf("%s:%d: %s: Assertion `%s' failed.\n", file, lineno, func,
80103331:	83 ec 0c             	sub    $0xc,%esp
80103334:	68 a6 82 10 80       	push   $0x801082a6
80103339:	68 50 8a 10 80       	push   $0x80108a50
8010333e:	68 81 00 00 00       	push   $0x81
80103343:	68 ad 82 10 80       	push   $0x801082ad
80103348:	68 3c 88 10 80       	push   $0x8010883c
8010334d:	e8 fe d3 ff ff       	call   80100750 <cprintf>
			assertion);
	cprintf("Aborting.\n");
80103352:	83 c4 14             	add    $0x14,%esp
80103355:	68 b9 82 10 80       	push   $0x801082b9
8010335a:	e8 f1 d3 ff ff       	call   80100750 <cprintf>
	panic("Assertion failed.");
8010335f:	c7 04 24 c4 82 10 80 	movl   $0x801082c4,(%esp)
80103366:	e8 15 d0 ff ff       	call   80100380 <panic>
		panic("Didn't find a suitable machine");
8010336b:	83 ec 0c             	sub    $0xc,%esp
8010336e:	68 64 88 10 80       	push   $0x80108864
80103373:	e8 08 d0 ff ff       	call   80100380 <panic>
80103378:	66 90                	xchg   %ax,%ax
8010337a:	66 90                	xchg   %ax,%ax
8010337c:	66 90                	xchg   %ax,%ax
8010337e:	66 90                	xchg   %ax,%ax

80103380 <nulldrvwrite>:
	int locking;
} nulldrv;

int
nulldrvwrite(struct inode *ip, char *buf, int n)
{
80103380:	55                   	push   %ebp
80103381:	89 e5                	mov    %esp,%ebp
80103383:	53                   	push   %ebx
80103384:	83 ec 10             	sub    $0x10,%esp
80103387:	8b 5d 08             	mov    0x8(%ebp),%ebx
	iunlock(ip);
8010338a:	53                   	push   %ebx
8010338b:	e8 d0 e7 ff ff       	call   80101b60 <iunlock>
	acquire(&nulldrv.lock);
80103390:	c7 04 24 a0 41 13 80 	movl   $0x801341a0,(%esp)
80103397:	e8 f4 12 00 00       	call   80104690 <acquire>
	release(&nulldrv.lock);
8010339c:	c7 04 24 a0 41 13 80 	movl   $0x801341a0,(%esp)
801033a3:	e8 88 12 00 00       	call   80104630 <release>
	ilock(ip);
801033a8:	89 1c 24             	mov    %ebx,(%esp)
801033ab:	e8 b0 e6 ff ff       	call   80101a60 <ilock>
	return n;
}
801033b0:	8b 45 10             	mov    0x10(%ebp),%eax
801033b3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801033b6:	c9                   	leave
801033b7:	c3                   	ret
801033b8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801033bf:	00 

801033c0 <nulldrvread>:

int
nulldrvread(struct inode *ip, char *buf, int n)
{
801033c0:	55                   	push   %ebp
801033c1:	89 e5                	mov    %esp,%ebp
801033c3:	53                   	push   %ebx
801033c4:	83 ec 10             	sub    $0x10,%esp
801033c7:	8b 5d 08             	mov    0x8(%ebp),%ebx
	iunlock(ip);
801033ca:	53                   	push   %ebx
801033cb:	e8 90 e7 ff ff       	call   80101b60 <iunlock>
	acquire(&nulldrv.lock);
801033d0:	c7 04 24 a0 41 13 80 	movl   $0x801341a0,(%esp)
801033d7:	e8 b4 12 00 00       	call   80104690 <acquire>
	release(&nulldrv.lock);
801033dc:	c7 04 24 a0 41 13 80 	movl   $0x801341a0,(%esp)
801033e3:	e8 48 12 00 00       	call   80104630 <release>
	ilock(ip);
801033e8:	89 1c 24             	mov    %ebx,(%esp)
801033eb:	e8 70 e6 ff ff       	call   80101a60 <ilock>
	return 0;
}
801033f0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801033f3:	31 c0                	xor    %eax,%eax
801033f5:	c9                   	leave
801033f6:	c3                   	ret
801033f7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801033fe:	00 
801033ff:	90                   	nop

80103400 <nulldrvinit>:

void
nulldrvinit(void)
{
80103400:	55                   	push   %ebp
80103401:	89 e5                	mov    %esp,%ebp
80103403:	83 ec 10             	sub    $0x10,%esp
	initlock(&nulldrv.lock, "nulldrv");
80103406:	68 ea 82 10 80       	push   $0x801082ea
8010340b:	68 a0 41 13 80       	push   $0x801341a0
80103410:	e8 8b 10 00 00       	call   801044a0 <initlock>
	devsw[NULLDRV].write = nulldrvwrite;
	devsw[NULLDRV].read = nulldrvread;
	nulldrv.locking = 1;
}
80103415:	83 c4 10             	add    $0x10,%esp
	devsw[NULLDRV].write = nulldrvwrite;
80103418:	c7 05 34 cb 12 80 80 	movl   $0x80103380,0x8012cb34
8010341f:	33 10 80 
	devsw[NULLDRV].read = nulldrvread;
80103422:	c7 05 30 cb 12 80 c0 	movl   $0x801033c0,0x8012cb30
80103429:	33 10 80 
	nulldrv.locking = 1;
8010342c:	c7 05 d4 41 13 80 01 	movl   $0x1,0x801341d4
80103433:	00 00 00 
}
80103436:	c9                   	leave
80103437:	c3                   	ret
80103438:	66 90                	xchg   %ax,%ax
8010343a:	66 90                	xchg   %ax,%ax
8010343c:	66 90                	xchg   %ax,%ax
8010343e:	66 90                	xchg   %ax,%ax

80103440 <picinit>:
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
80103440:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80103445:	ba 21 00 00 00       	mov    $0x21,%edx
8010344a:	ee                   	out    %al,(%dx)
8010344b:	ba a1 00 00 00       	mov    $0xa1,%edx
80103450:	ee                   	out    %al,(%dx)
picinit(void)
{
	// mask all interrupts
	outb(IO_PIC1 + 1, 0xFF);
	outb(IO_PIC2 + 1, 0xFF);
}
80103451:	c3                   	ret
80103452:	66 90                	xchg   %ax,%ax
80103454:	66 90                	xchg   %ax,%ax
80103456:	66 90                	xchg   %ax,%ax
80103458:	66 90                	xchg   %ax,%ax
8010345a:	66 90                	xchg   %ax,%ax
8010345c:	66 90                	xchg   %ax,%ax
8010345e:	66 90                	xchg   %ax,%ax

80103460 <pipealloc>:
	int writeopen; // write fd is still open
};

int
pipealloc(struct file **f0, struct file **f1)
{
80103460:	55                   	push   %ebp
80103461:	89 e5                	mov    %esp,%ebp
80103463:	57                   	push   %edi
80103464:	56                   	push   %esi
80103465:	53                   	push   %ebx
80103466:	83 ec 0c             	sub    $0xc,%esp
80103469:	8b 75 08             	mov    0x8(%ebp),%esi
8010346c:	8b 7d 0c             	mov    0xc(%ebp),%edi
	struct pipe *p;

	p = 0;
	*f0 = *f1 = 0;
8010346f:	c7 07 00 00 00 00    	movl   $0x0,(%edi)
80103475:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
	if ((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
8010347b:	e8 b0 db ff ff       	call   80101030 <filealloc>
80103480:	89 06                	mov    %eax,(%esi)
80103482:	85 c0                	test   %eax,%eax
80103484:	0f 84 a5 00 00 00    	je     8010352f <pipealloc+0xcf>
8010348a:	e8 a1 db ff ff       	call   80101030 <filealloc>
8010348f:	89 07                	mov    %eax,(%edi)
80103491:	85 c0                	test   %eax,%eax
80103493:	0f 84 84 00 00 00    	je     8010351d <pipealloc+0xbd>
		goto bad;
	if ((p = (struct pipe *)kalloc()) == 0)
80103499:	e8 02 f5 ff ff       	call   801029a0 <kalloc>
8010349e:	89 c3                	mov    %eax,%ebx
801034a0:	85 c0                	test   %eax,%eax
801034a2:	0f 84 a0 00 00 00    	je     80103548 <pipealloc+0xe8>
		goto bad;
	p->readopen = 1;
801034a8:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
801034af:	00 00 00 
	p->writeopen = 1;
	p->nwrite = 0;
	p->nread = 0;
	initlock(&p->lock, "pipe");
801034b2:	83 ec 08             	sub    $0x8,%esp
	p->writeopen = 1;
801034b5:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
801034bc:	00 00 00 
	p->nwrite = 0;
801034bf:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
801034c6:	00 00 00 
	p->nread = 0;
801034c9:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
801034d0:	00 00 00 
	initlock(&p->lock, "pipe");
801034d3:	68 f2 82 10 80       	push   $0x801082f2
801034d8:	50                   	push   %eax
801034d9:	e8 c2 0f 00 00       	call   801044a0 <initlock>
	(*f0)->type = FD_PIPE;
801034de:	8b 06                	mov    (%esi),%eax
	(*f0)->pipe = p;
	(*f1)->type = FD_PIPE;
	(*f1)->readable = 0;
	(*f1)->writable = 1;
	(*f1)->pipe = p;
	return 0;
801034e0:	83 c4 10             	add    $0x10,%esp
	(*f0)->type = FD_PIPE;
801034e3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	(*f0)->readable = 1;
801034e9:	8b 06                	mov    (%esi),%eax
801034eb:	c6 40 08 01          	movb   $0x1,0x8(%eax)
	(*f0)->writable = 0;
801034ef:	8b 06                	mov    (%esi),%eax
801034f1:	c6 40 09 00          	movb   $0x0,0x9(%eax)
	(*f0)->pipe = p;
801034f5:	8b 06                	mov    (%esi),%eax
801034f7:	89 58 0c             	mov    %ebx,0xc(%eax)
	(*f1)->type = FD_PIPE;
801034fa:	8b 07                	mov    (%edi),%eax
801034fc:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	(*f1)->readable = 0;
80103502:	8b 07                	mov    (%edi),%eax
80103504:	c6 40 08 00          	movb   $0x0,0x8(%eax)
	(*f1)->writable = 1;
80103508:	8b 07                	mov    (%edi),%eax
8010350a:	c6 40 09 01          	movb   $0x1,0x9(%eax)
	(*f1)->pipe = p;
8010350e:	8b 07                	mov    (%edi),%eax
80103510:	89 58 0c             	mov    %ebx,0xc(%eax)
	return 0;
80103513:	31 c0                	xor    %eax,%eax
	if (*f0)
		fileclose(*f0);
	if (*f1)
		fileclose(*f1);
	return -1;
}
80103515:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103518:	5b                   	pop    %ebx
80103519:	5e                   	pop    %esi
8010351a:	5f                   	pop    %edi
8010351b:	5d                   	pop    %ebp
8010351c:	c3                   	ret
	if (*f0)
8010351d:	8b 06                	mov    (%esi),%eax
8010351f:	85 c0                	test   %eax,%eax
80103521:	74 1e                	je     80103541 <pipealloc+0xe1>
		fileclose(*f0);
80103523:	83 ec 0c             	sub    $0xc,%esp
80103526:	50                   	push   %eax
80103527:	e8 c4 db ff ff       	call   801010f0 <fileclose>
8010352c:	83 c4 10             	add    $0x10,%esp
	if (*f1)
8010352f:	8b 07                	mov    (%edi),%eax
80103531:	85 c0                	test   %eax,%eax
80103533:	74 0c                	je     80103541 <pipealloc+0xe1>
		fileclose(*f1);
80103535:	83 ec 0c             	sub    $0xc,%esp
80103538:	50                   	push   %eax
80103539:	e8 b2 db ff ff       	call   801010f0 <fileclose>
8010353e:	83 c4 10             	add    $0x10,%esp
	return -1;
80103541:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80103546:	eb cd                	jmp    80103515 <pipealloc+0xb5>
	if (*f0)
80103548:	8b 06                	mov    (%esi),%eax
8010354a:	85 c0                	test   %eax,%eax
8010354c:	75 d5                	jne    80103523 <pipealloc+0xc3>
8010354e:	eb df                	jmp    8010352f <pipealloc+0xcf>

80103550 <pipeclose>:

void
pipeclose(struct pipe *p, int writable)
{
80103550:	55                   	push   %ebp
80103551:	89 e5                	mov    %esp,%ebp
80103553:	56                   	push   %esi
80103554:	53                   	push   %ebx
80103555:	8b 5d 08             	mov    0x8(%ebp),%ebx
80103558:	8b 75 0c             	mov    0xc(%ebp),%esi
	acquire(&p->lock);
8010355b:	83 ec 0c             	sub    $0xc,%esp
8010355e:	53                   	push   %ebx
8010355f:	e8 2c 11 00 00       	call   80104690 <acquire>
	if (writable) {
80103564:	83 c4 10             	add    $0x10,%esp
80103567:	85 f6                	test   %esi,%esi
80103569:	74 65                	je     801035d0 <pipeclose+0x80>
		p->writeopen = 0;
		wakeup(&p->nread);
8010356b:	83 ec 0c             	sub    $0xc,%esp
8010356e:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
		p->writeopen = 0;
80103574:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
8010357b:	00 00 00 
		wakeup(&p->nread);
8010357e:	50                   	push   %eax
8010357f:	e8 2c 0c 00 00       	call   801041b0 <wakeup>
80103584:	83 c4 10             	add    $0x10,%esp
	} else {
		p->readopen = 0;
		wakeup(&p->nwrite);
	}
	if (p->readopen == 0 && p->writeopen == 0) {
80103587:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
8010358d:	85 d2                	test   %edx,%edx
8010358f:	75 0a                	jne    8010359b <pipeclose+0x4b>
80103591:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
80103597:	85 c0                	test   %eax,%eax
80103599:	74 15                	je     801035b0 <pipeclose+0x60>
		release(&p->lock);
		kfree((char *)p);
	} else
		release(&p->lock);
8010359b:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
8010359e:	8d 65 f8             	lea    -0x8(%ebp),%esp
801035a1:	5b                   	pop    %ebx
801035a2:	5e                   	pop    %esi
801035a3:	5d                   	pop    %ebp
		release(&p->lock);
801035a4:	e9 87 10 00 00       	jmp    80104630 <release>
801035a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		release(&p->lock);
801035b0:	83 ec 0c             	sub    $0xc,%esp
801035b3:	53                   	push   %ebx
801035b4:	e8 77 10 00 00       	call   80104630 <release>
		kfree((char *)p);
801035b9:	89 5d 08             	mov    %ebx,0x8(%ebp)
801035bc:	83 c4 10             	add    $0x10,%esp
}
801035bf:	8d 65 f8             	lea    -0x8(%ebp),%esp
801035c2:	5b                   	pop    %ebx
801035c3:	5e                   	pop    %esi
801035c4:	5d                   	pop    %ebp
		kfree((char *)p);
801035c5:	e9 16 f2 ff ff       	jmp    801027e0 <kfree>
801035ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		wakeup(&p->nwrite);
801035d0:	83 ec 0c             	sub    $0xc,%esp
801035d3:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
		p->readopen = 0;
801035d9:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
801035e0:	00 00 00 
		wakeup(&p->nwrite);
801035e3:	50                   	push   %eax
801035e4:	e8 c7 0b 00 00       	call   801041b0 <wakeup>
801035e9:	83 c4 10             	add    $0x10,%esp
801035ec:	eb 99                	jmp    80103587 <pipeclose+0x37>
801035ee:	66 90                	xchg   %ax,%ax

801035f0 <pipewrite>:

int
pipewrite(struct pipe *p, char *addr, int n)
{
801035f0:	55                   	push   %ebp
801035f1:	89 e5                	mov    %esp,%ebp
801035f3:	57                   	push   %edi
801035f4:	56                   	push   %esi
801035f5:	53                   	push   %ebx
801035f6:	83 ec 28             	sub    $0x28,%esp
801035f9:	8b 5d 08             	mov    0x8(%ebp),%ebx
801035fc:	8b 7d 10             	mov    0x10(%ebp),%edi
	int i;

	acquire(&p->lock);
801035ff:	53                   	push   %ebx
80103600:	e8 8b 10 00 00       	call   80104690 <acquire>
	for (i = 0; i < n; i++) {
80103605:	83 c4 10             	add    $0x10,%esp
80103608:	85 ff                	test   %edi,%edi
8010360a:	0f 8e ce 00 00 00    	jle    801036de <pipewrite+0xee>
		while (p->nwrite == p->nread + PIPESIZE) { //DOC: pipewrite-full
80103610:	8b 83 38 02 00 00    	mov    0x238(%ebx),%eax
80103616:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80103619:	89 7d 10             	mov    %edi,0x10(%ebp)
8010361c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8010361f:	8d 34 39             	lea    (%ecx,%edi,1),%esi
80103622:	89 75 e0             	mov    %esi,-0x20(%ebp)
			if (p->readopen == 0 || myproc()->killed) {
				release(&p->lock);
				return -1;
			}
			wakeup(&p->nread);
80103625:	8d b3 34 02 00 00    	lea    0x234(%ebx),%esi
		while (p->nwrite == p->nread + PIPESIZE) { //DOC: pipewrite-full
8010362b:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
			sleep(&p->nwrite, &p->lock); //DOC: pipewrite-sleep
80103631:	8d bb 38 02 00 00    	lea    0x238(%ebx),%edi
		while (p->nwrite == p->nread + PIPESIZE) { //DOC: pipewrite-full
80103637:	8d 90 00 02 00 00    	lea    0x200(%eax),%edx
8010363d:	39 55 e4             	cmp    %edx,-0x1c(%ebp)
80103640:	0f 85 b6 00 00 00    	jne    801036fc <pipewrite+0x10c>
80103646:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
80103649:	eb 3b                	jmp    80103686 <pipewrite+0x96>
8010364b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
			if (p->readopen == 0 || myproc()->killed) {
80103650:	e8 8b 03 00 00       	call   801039e0 <myproc>
80103655:	8b 48 28             	mov    0x28(%eax),%ecx
80103658:	85 c9                	test   %ecx,%ecx
8010365a:	75 34                	jne    80103690 <pipewrite+0xa0>
			wakeup(&p->nread);
8010365c:	83 ec 0c             	sub    $0xc,%esp
8010365f:	56                   	push   %esi
80103660:	e8 4b 0b 00 00       	call   801041b0 <wakeup>
			sleep(&p->nwrite, &p->lock); //DOC: pipewrite-sleep
80103665:	58                   	pop    %eax
80103666:	5a                   	pop    %edx
80103667:	53                   	push   %ebx
80103668:	57                   	push   %edi
80103669:	e8 82 0a 00 00       	call   801040f0 <sleep>
		while (p->nwrite == p->nread + PIPESIZE) { //DOC: pipewrite-full
8010366e:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
80103674:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
8010367a:	83 c4 10             	add    $0x10,%esp
8010367d:	05 00 02 00 00       	add    $0x200,%eax
80103682:	39 c2                	cmp    %eax,%edx
80103684:	75 2a                	jne    801036b0 <pipewrite+0xc0>
			if (p->readopen == 0 || myproc()->killed) {
80103686:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
8010368c:	85 c0                	test   %eax,%eax
8010368e:	75 c0                	jne    80103650 <pipewrite+0x60>
				release(&p->lock);
80103690:	83 ec 0c             	sub    $0xc,%esp
80103693:	53                   	push   %ebx
80103694:	e8 97 0f 00 00       	call   80104630 <release>
				return -1;
80103699:	83 c4 10             	add    $0x10,%esp
8010369c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
		p->data[p->nwrite++ % PIPESIZE] = addr[i];
	}
	wakeup(&p->nread); //DOC: pipewrite-wakeup1
	release(&p->lock);
	return n;
}
801036a1:	8d 65 f4             	lea    -0xc(%ebp),%esp
801036a4:	5b                   	pop    %ebx
801036a5:	5e                   	pop    %esi
801036a6:	5f                   	pop    %edi
801036a7:	5d                   	pop    %ebp
801036a8:	c3                   	ret
801036a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801036b0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
		p->data[p->nwrite++ % PIPESIZE] = addr[i];
801036b3:	8d 42 01             	lea    0x1(%edx),%eax
801036b6:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
	for (i = 0; i < n; i++) {
801036bc:	83 c1 01             	add    $0x1,%ecx
		p->data[p->nwrite++ % PIPESIZE] = addr[i];
801036bf:	89 83 38 02 00 00    	mov    %eax,0x238(%ebx)
801036c5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
801036c8:	0f b6 41 ff          	movzbl -0x1(%ecx),%eax
801036cc:	88 44 13 34          	mov    %al,0x34(%ebx,%edx,1)
	for (i = 0; i < n; i++) {
801036d0:	8b 45 e0             	mov    -0x20(%ebp),%eax
801036d3:	39 c1                	cmp    %eax,%ecx
801036d5:	0f 85 50 ff ff ff    	jne    8010362b <pipewrite+0x3b>
801036db:	8b 7d 10             	mov    0x10(%ebp),%edi
	wakeup(&p->nread); //DOC: pipewrite-wakeup1
801036de:	83 ec 0c             	sub    $0xc,%esp
801036e1:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
801036e7:	50                   	push   %eax
801036e8:	e8 c3 0a 00 00       	call   801041b0 <wakeup>
	release(&p->lock);
801036ed:	89 1c 24             	mov    %ebx,(%esp)
801036f0:	e8 3b 0f 00 00       	call   80104630 <release>
	return n;
801036f5:	83 c4 10             	add    $0x10,%esp
801036f8:	89 f8                	mov    %edi,%eax
801036fa:	eb a5                	jmp    801036a1 <pipewrite+0xb1>
		while (p->nwrite == p->nread + PIPESIZE) { //DOC: pipewrite-full
801036fc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
801036ff:	eb b2                	jmp    801036b3 <pipewrite+0xc3>
80103701:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80103708:	00 
80103709:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80103710 <piperead>:

int
piperead(struct pipe *p, char *addr, int n)
{
80103710:	55                   	push   %ebp
80103711:	89 e5                	mov    %esp,%ebp
80103713:	57                   	push   %edi
80103714:	56                   	push   %esi
80103715:	53                   	push   %ebx
80103716:	83 ec 18             	sub    $0x18,%esp
80103719:	8b 75 08             	mov    0x8(%ebp),%esi
8010371c:	8b 7d 0c             	mov    0xc(%ebp),%edi
	int i;

	acquire(&p->lock);
8010371f:	56                   	push   %esi
80103720:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
80103726:	e8 65 0f 00 00       	call   80104690 <acquire>
	while (p->nread == p->nwrite && p->writeopen) { //DOC: pipe-empty
8010372b:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
80103731:	83 c4 10             	add    $0x10,%esp
80103734:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
8010373a:	74 2f                	je     8010376b <piperead+0x5b>
8010373c:	eb 37                	jmp    80103775 <piperead+0x65>
8010373e:	66 90                	xchg   %ax,%ax
		if (myproc()->killed) {
80103740:	e8 9b 02 00 00       	call   801039e0 <myproc>
80103745:	8b 40 28             	mov    0x28(%eax),%eax
80103748:	85 c0                	test   %eax,%eax
8010374a:	0f 85 80 00 00 00    	jne    801037d0 <piperead+0xc0>
			release(&p->lock);
			return -1;
		}
		sleep(&p->nread, &p->lock); //DOC: piperead-sleep
80103750:	83 ec 08             	sub    $0x8,%esp
80103753:	56                   	push   %esi
80103754:	53                   	push   %ebx
80103755:	e8 96 09 00 00       	call   801040f0 <sleep>
	while (p->nread == p->nwrite && p->writeopen) { //DOC: pipe-empty
8010375a:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
80103760:	83 c4 10             	add    $0x10,%esp
80103763:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
80103769:	75 0a                	jne    80103775 <piperead+0x65>
8010376b:	8b 96 40 02 00 00    	mov    0x240(%esi),%edx
80103771:	85 d2                	test   %edx,%edx
80103773:	75 cb                	jne    80103740 <piperead+0x30>
	}
	for (i = 0; i < n; i++) { //DOC: piperead-copy
80103775:	8b 4d 10             	mov    0x10(%ebp),%ecx
80103778:	31 db                	xor    %ebx,%ebx
8010377a:	85 c9                	test   %ecx,%ecx
8010377c:	7f 26                	jg     801037a4 <piperead+0x94>
8010377e:	eb 2c                	jmp    801037ac <piperead+0x9c>
		if (p->nread == p->nwrite)
			break;
		addr[i] = p->data[p->nread++ % PIPESIZE];
80103780:	8d 48 01             	lea    0x1(%eax),%ecx
80103783:	25 ff 01 00 00       	and    $0x1ff,%eax
80103788:	89 8e 34 02 00 00    	mov    %ecx,0x234(%esi)
8010378e:	0f b6 44 06 34       	movzbl 0x34(%esi,%eax,1),%eax
80103793:	88 04 1f             	mov    %al,(%edi,%ebx,1)
	for (i = 0; i < n; i++) { //DOC: piperead-copy
80103796:	83 c3 01             	add    $0x1,%ebx
80103799:	39 5d 10             	cmp    %ebx,0x10(%ebp)
8010379c:	74 0e                	je     801037ac <piperead+0x9c>
8010379e:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
		if (p->nread == p->nwrite)
801037a4:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
801037aa:	75 d4                	jne    80103780 <piperead+0x70>
	}
	wakeup(&p->nwrite); //DOC: piperead-wakeup
801037ac:	83 ec 0c             	sub    $0xc,%esp
801037af:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
801037b5:	50                   	push   %eax
801037b6:	e8 f5 09 00 00       	call   801041b0 <wakeup>
	release(&p->lock);
801037bb:	89 34 24             	mov    %esi,(%esp)
801037be:	e8 6d 0e 00 00       	call   80104630 <release>
	return i;
801037c3:	83 c4 10             	add    $0x10,%esp
}
801037c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
801037c9:	89 d8                	mov    %ebx,%eax
801037cb:	5b                   	pop    %ebx
801037cc:	5e                   	pop    %esi
801037cd:	5f                   	pop    %edi
801037ce:	5d                   	pop    %ebp
801037cf:	c3                   	ret
			release(&p->lock);
801037d0:	83 ec 0c             	sub    $0xc,%esp
			return -1;
801037d3:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
			release(&p->lock);
801037d8:	56                   	push   %esi
801037d9:	e8 52 0e 00 00       	call   80104630 <release>
			return -1;
801037de:	83 c4 10             	add    $0x10,%esp
}
801037e1:	8d 65 f4             	lea    -0xc(%ebp),%esp
801037e4:	89 d8                	mov    %ebx,%eax
801037e6:	5b                   	pop    %ebx
801037e7:	5e                   	pop    %esi
801037e8:	5f                   	pop    %edi
801037e9:	5d                   	pop    %ebp
801037ea:	c3                   	ret
801037eb:	66 90                	xchg   %ax,%ax
801037ed:	66 90                	xchg   %ax,%ax
801037ef:	90                   	nop

801037f0 <allocproc>:
// If found, change state to EMBRYO and initialize
// state required to run in the kernel.
// Otherwise return 0.
static struct proc *
allocproc(void)
{
801037f0:	55                   	push   %ebp
801037f1:	89 e5                	mov    %esp,%ebp
801037f3:	53                   	push   %ebx
	struct proc *p;
	char *sp;

	acquire(&ptable.lock);

	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
801037f4:	bb 14 42 13 80       	mov    $0x80134214,%ebx
{
801037f9:	83 ec 10             	sub    $0x10,%esp
	acquire(&ptable.lock);
801037fc:	68 e0 41 13 80       	push   $0x801341e0
80103801:	e8 8a 0e 00 00       	call   80104690 <acquire>
80103806:	83 c4 10             	add    $0x10,%esp
80103809:	eb 17                	jmp    80103822 <allocproc+0x32>
8010380b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80103810:	81 c3 20 01 00 00    	add    $0x120,%ebx
80103816:	81 fb 14 8a 13 80    	cmp    $0x80138a14,%ebx
8010381c:	0f 84 8e 00 00 00    	je     801038b0 <allocproc+0xc0>
		if (p->state == UNUSED)
80103822:	8b 43 0c             	mov    0xc(%ebx),%eax
80103825:	85 c0                	test   %eax,%eax
80103827:	75 e7                	jne    80103810 <allocproc+0x20>
	release(&ptable.lock);
	return 0;

found:
	p->state = EMBRYO;
	p->pid = nextpid++;
80103829:	a1 04 c0 10 80       	mov    0x8010c004,%eax

	release(&ptable.lock);
8010382e:	83 ec 0c             	sub    $0xc,%esp
	p->state = EMBRYO;
80103831:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
	p->pid = nextpid++;
80103838:	89 43 10             	mov    %eax,0x10(%ebx)
8010383b:	8d 50 01             	lea    0x1(%eax),%edx
	release(&ptable.lock);
8010383e:	68 e0 41 13 80       	push   $0x801341e0
	p->pid = nextpid++;
80103843:	89 15 04 c0 10 80    	mov    %edx,0x8010c004
	release(&ptable.lock);
80103849:	e8 e2 0d 00 00       	call   80104630 <release>

	// Allocate kernel stack.
	if ((p->kstack = kalloc()) == 0) {
8010384e:	e8 4d f1 ff ff       	call   801029a0 <kalloc>
80103853:	83 c4 10             	add    $0x10,%esp
80103856:	89 43 08             	mov    %eax,0x8(%ebx)
80103859:	85 c0                	test   %eax,%eax
8010385b:	74 6c                	je     801038c9 <allocproc+0xd9>
		return 0;
	}
	sp = p->kstack + KSTACKSIZE;

	// Leave room for trap frame.
	sp -= sizeof *p->tf;
8010385d:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
	sp -= 4;
	*(uint *)sp = (uint)trapret;

	sp -= sizeof *p->context;
	p->context = (struct context *)sp;
	memset(p->context, 0, sizeof *p->context);
80103863:	83 ec 04             	sub    $0x4,%esp
	sp -= sizeof *p->context;
80103866:	05 9c 0f 00 00       	add    $0xf9c,%eax
	sp -= sizeof *p->tf;
8010386b:	89 53 1c             	mov    %edx,0x1c(%ebx)
	*(uint *)sp = (uint)trapret;
8010386e:	c7 40 14 fd 6b 10 80 	movl   $0x80106bfd,0x14(%eax)
	p->context = (struct context *)sp;
80103875:	89 43 20             	mov    %eax,0x20(%ebx)
	memset(p->context, 0, sizeof *p->context);
80103878:	6a 14                	push   $0x14
8010387a:	6a 00                	push   $0x0
8010387c:	50                   	push   %eax
8010387d:	e8 0e 0f 00 00       	call   80104790 <memset>
	p->context->eip = (uint)forkret;
80103882:	8b 43 20             	mov    0x20(%ebx),%eax

	memset(p->strace_mask_ptr, 0, SYSCALL_AMT);
80103885:	83 c4 0c             	add    $0xc,%esp
	p->context->eip = (uint)forkret;
80103888:	c7 40 10 e0 38 10 80 	movl   $0x801038e0,0x10(%eax)
	memset(p->strace_mask_ptr, 0, SYSCALL_AMT);
8010388f:	8d 83 04 01 00 00    	lea    0x104(%ebx),%eax
80103895:	6a 1b                	push   $0x1b
80103897:	6a 00                	push   $0x0
80103899:	50                   	push   %eax
8010389a:	e8 f1 0e 00 00       	call   80104790 <memset>

	return p;
}
8010389f:	89 d8                	mov    %ebx,%eax
	return p;
801038a1:	83 c4 10             	add    $0x10,%esp
}
801038a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801038a7:	c9                   	leave
801038a8:	c3                   	ret
801038a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
	release(&ptable.lock);
801038b0:	83 ec 0c             	sub    $0xc,%esp
	return 0;
801038b3:	31 db                	xor    %ebx,%ebx
	release(&ptable.lock);
801038b5:	68 e0 41 13 80       	push   $0x801341e0
801038ba:	e8 71 0d 00 00       	call   80104630 <release>
	return 0;
801038bf:	83 c4 10             	add    $0x10,%esp
}
801038c2:	89 d8                	mov    %ebx,%eax
801038c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801038c7:	c9                   	leave
801038c8:	c3                   	ret
		p->state = UNUSED;
801038c9:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
	return 0;
801038d0:	31 db                	xor    %ebx,%ebx
801038d2:	eb ee                	jmp    801038c2 <allocproc+0xd2>
801038d4:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801038db:	00 
801038dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

801038e0 <forkret>:

// A fork child's very first scheduling by scheduler()
// will swtch here.  "Return" to user space.
void
forkret(void)
{
801038e0:	55                   	push   %ebp
801038e1:	89 e5                	mov    %esp,%ebp
801038e3:	83 ec 14             	sub    $0x14,%esp
	static int first = 1;
	// Still holding ptable.lock from scheduler.
	release(&ptable.lock);
801038e6:	68 e0 41 13 80       	push   $0x801341e0
801038eb:	e8 40 0d 00 00       	call   80104630 <release>

	if (first) {
801038f0:	a1 00 c0 10 80       	mov    0x8010c000,%eax
801038f5:	83 c4 10             	add    $0x10,%esp
801038f8:	85 c0                	test   %eax,%eax
801038fa:	75 04                	jne    80103900 <forkret+0x20>
		iinit(ROOTDEV);
		initlog(ROOTDEV);
	}

	// Return to "caller", actually trapret (see allocproc).
}
801038fc:	c9                   	leave
801038fd:	c3                   	ret
801038fe:	66 90                	xchg   %ax,%ax
		first = 0;
80103900:	c7 05 00 c0 10 80 00 	movl   $0x0,0x8010c000
80103907:	00 00 00 
		iinit(ROOTDEV);
8010390a:	83 ec 0c             	sub    $0xc,%esp
8010390d:	6a 01                	push   $0x1
8010390f:	e8 4c de ff ff       	call   80101760 <iinit>
		initlog(ROOTDEV);
80103914:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
8010391b:	e8 00 f2 ff ff       	call   80102b20 <initlog>
}
80103920:	83 c4 10             	add    $0x10,%esp
80103923:	c9                   	leave
80103924:	c3                   	ret
80103925:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010392c:	00 
8010392d:	8d 76 00             	lea    0x0(%esi),%esi

80103930 <pinit>:
{
80103930:	55                   	push   %ebp
80103931:	89 e5                	mov    %esp,%ebp
80103933:	83 ec 10             	sub    $0x10,%esp
	initlock(&ptable.lock, "ptable");
80103936:	68 f7 82 10 80       	push   $0x801082f7
8010393b:	68 e0 41 13 80       	push   $0x801341e0
80103940:	e8 5b 0b 00 00       	call   801044a0 <initlock>
}
80103945:	83 c4 10             	add    $0x10,%esp
80103948:	c9                   	leave
80103949:	c3                   	ret
8010394a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80103950 <mycpu>:
{
80103950:	55                   	push   %ebp
80103951:	89 e5                	mov    %esp,%ebp
80103953:	56                   	push   %esi
80103954:	53                   	push   %ebx
	__asm__ __volatile__("pushfl; popl %0" : "=r"(eflags));
80103955:	9c                   	pushf
80103956:	58                   	pop    %eax
	if (readeflags() & FL_IF)
80103957:	f6 c4 02             	test   $0x2,%ah
8010395a:	75 46                	jne    801039a2 <mycpu+0x52>
	apicid = lapicid();
8010395c:	e8 9f 40 00 00       	call   80107a00 <lapicid>
	for (i = 0; i < ncpu; ++i) {
80103961:	8b 35 84 e9 12 80    	mov    0x8012e984,%esi
80103967:	85 f6                	test   %esi,%esi
80103969:	7e 2a                	jle    80103995 <mycpu+0x45>
8010396b:	31 d2                	xor    %edx,%edx
8010396d:	eb 08                	jmp    80103977 <mycpu+0x27>
8010396f:	90                   	nop
80103970:	83 c2 01             	add    $0x1,%edx
80103973:	39 f2                	cmp    %esi,%edx
80103975:	74 1e                	je     80103995 <mycpu+0x45>
		if (cpus[i].apicid == apicid)
80103977:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
8010397d:	0f b6 99 a0 e9 12 80 	movzbl -0x7fed1660(%ecx),%ebx
80103984:	39 c3                	cmp    %eax,%ebx
80103986:	75 e8                	jne    80103970 <mycpu+0x20>
}
80103988:	8d 65 f8             	lea    -0x8(%ebp),%esp
			return &cpus[i];
8010398b:	8d 81 a0 e9 12 80    	lea    -0x7fed1660(%ecx),%eax
}
80103991:	5b                   	pop    %ebx
80103992:	5e                   	pop    %esi
80103993:	5d                   	pop    %ebp
80103994:	c3                   	ret
	panic("unknown apicid\n");
80103995:	83 ec 0c             	sub    $0xc,%esp
80103998:	68 fe 82 10 80       	push   $0x801082fe
8010399d:	e8 de c9 ff ff       	call   80100380 <panic>
		panic("mycpu called with interrupts enabled\n");
801039a2:	83 ec 0c             	sub    $0xc,%esp
801039a5:	68 84 88 10 80       	push   $0x80108884
801039aa:	e8 d1 c9 ff ff       	call   80100380 <panic>
801039af:	90                   	nop

801039b0 <my_cpu_id>:
{
801039b0:	55                   	push   %ebp
801039b1:	89 e5                	mov    %esp,%ebp
801039b3:	53                   	push   %ebx
801039b4:	83 ec 04             	sub    $0x4,%esp
	pushcli();
801039b7:	e8 84 0b 00 00       	call   80104540 <pushcli>
	int ret = mycpu() - cpus;
801039bc:	e8 8f ff ff ff       	call   80103950 <mycpu>
801039c1:	89 c3                	mov    %eax,%ebx
	popcli();
801039c3:	e8 c8 0b 00 00       	call   80104590 <popcli>
	int ret = mycpu() - cpus;
801039c8:	81 eb a0 e9 12 80    	sub    $0x8012e9a0,%ebx
801039ce:	c1 fb 04             	sar    $0x4,%ebx
801039d1:	69 c3 a3 8b 2e ba    	imul   $0xba2e8ba3,%ebx,%eax
}
801039d7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801039da:	c9                   	leave
801039db:	c3                   	ret
801039dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

801039e0 <myproc>:
{
801039e0:	55                   	push   %ebp
801039e1:	89 e5                	mov    %esp,%ebp
801039e3:	53                   	push   %ebx
801039e4:	83 ec 04             	sub    $0x4,%esp
	pushcli();
801039e7:	e8 54 0b 00 00       	call   80104540 <pushcli>
	c = mycpu();
801039ec:	e8 5f ff ff ff       	call   80103950 <mycpu>
	p = c->proc;
801039f1:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
	popcli();
801039f7:	e8 94 0b 00 00       	call   80104590 <popcli>
}
801039fc:	89 d8                	mov    %ebx,%eax
801039fe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103a01:	c9                   	leave
80103a02:	c3                   	ret
80103a03:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80103a0a:	00 
80103a0b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

80103a10 <userinit>:
{
80103a10:	55                   	push   %ebp
80103a11:	89 e5                	mov    %esp,%ebp
80103a13:	53                   	push   %ebx
80103a14:	83 ec 04             	sub    $0x4,%esp
	p = allocproc();
80103a17:	e8 d4 fd ff ff       	call   801037f0 <allocproc>
80103a1c:	89 c3                	mov    %eax,%ebx
	initproc = p;
80103a1e:	a3 14 8a 13 80       	mov    %eax,0x80138a14
	if ((p->pgdir = setupkvm()) == 0)
80103a23:	e8 68 2e 00 00       	call   80106890 <setupkvm>
80103a28:	89 43 04             	mov    %eax,0x4(%ebx)
80103a2b:	85 c0                	test   %eax,%eax
80103a2d:	0f 84 c0 00 00 00    	je     80103af3 <userinit+0xe3>
	inituvm(p->pgdir, _binary_bin_initcode_start, (int)_binary_bin_initcode_size);
80103a33:	83 ec 04             	sub    $0x4,%esp
80103a36:	68 30 00 00 00       	push   $0x30
80103a3b:	68 60 c4 10 80       	push   $0x8010c460
80103a40:	50                   	push   %eax
80103a41:	e8 2a 2b 00 00       	call   80106570 <inituvm>
	memset(p->tf, 0, sizeof(*p->tf));
80103a46:	83 c4 0c             	add    $0xc,%esp
	p->sz = PGSIZE;
80103a49:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
	memset(p->tf, 0, sizeof(*p->tf));
80103a4f:	6a 4c                	push   $0x4c
80103a51:	6a 00                	push   $0x0
80103a53:	ff 73 1c             	push   0x1c(%ebx)
80103a56:	e8 35 0d 00 00       	call   80104790 <memset>
	p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
80103a5b:	8b 43 1c             	mov    0x1c(%ebx),%eax
80103a5e:	ba 1b 00 00 00       	mov    $0x1b,%edx
	safestrcpy(p->name, "initcode", sizeof(p->name));
80103a63:	83 c4 0c             	add    $0xc,%esp
	p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
80103a66:	b9 23 00 00 00       	mov    $0x23,%ecx
	p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
80103a6b:	66 89 50 3c          	mov    %dx,0x3c(%eax)
	p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
80103a6f:	8b 43 1c             	mov    0x1c(%ebx),%eax
80103a72:	66 89 48 2c          	mov    %cx,0x2c(%eax)
	p->tf->es = p->tf->ds;
80103a76:	8b 43 1c             	mov    0x1c(%ebx),%eax
80103a79:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
80103a7d:	66 89 50 28          	mov    %dx,0x28(%eax)
	p->tf->ss = p->tf->ds;
80103a81:	8b 43 1c             	mov    0x1c(%ebx),%eax
80103a84:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
80103a88:	66 89 50 48          	mov    %dx,0x48(%eax)
	p->tf->eflags = FL_IF;
80103a8c:	8b 43 1c             	mov    0x1c(%ebx),%eax
80103a8f:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
	p->tf->esp = PGSIZE;
80103a96:	8b 43 1c             	mov    0x1c(%ebx),%eax
80103a99:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
	p->tf->eip = 0; // beginning of initcode.S
80103aa0:	8b 43 1c             	mov    0x1c(%ebx),%eax
80103aa3:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
	safestrcpy(p->name, "initcode", sizeof(p->name));
80103aaa:	8d 83 f4 00 00 00    	lea    0xf4(%ebx),%eax
80103ab0:	6a 10                	push   $0x10
80103ab2:	68 27 83 10 80       	push   $0x80108327
80103ab7:	50                   	push   %eax
80103ab8:	e8 83 0e 00 00       	call   80104940 <safestrcpy>
	p->cwd = namei("/");
80103abd:	c7 04 24 30 83 10 80 	movl   $0x80108330,(%esp)
80103ac4:	e8 f7 e8 ff ff       	call   801023c0 <namei>
80103ac9:	89 43 6c             	mov    %eax,0x6c(%ebx)
	acquire(&ptable.lock);
80103acc:	c7 04 24 e0 41 13 80 	movl   $0x801341e0,(%esp)
80103ad3:	e8 b8 0b 00 00       	call   80104690 <acquire>
	p->state = RUNNABLE;
80103ad8:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
	release(&ptable.lock);
80103adf:	c7 04 24 e0 41 13 80 	movl   $0x801341e0,(%esp)
80103ae6:	e8 45 0b 00 00       	call   80104630 <release>
}
80103aeb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80103aee:	83 c4 10             	add    $0x10,%esp
80103af1:	c9                   	leave
80103af2:	c3                   	ret
		panic("userinit: out of memory?");
80103af3:	83 ec 0c             	sub    $0xc,%esp
80103af6:	68 0e 83 10 80       	push   $0x8010830e
80103afb:	e8 80 c8 ff ff       	call   80100380 <panic>

80103b00 <growproc>:
{
80103b00:	55                   	push   %ebp
80103b01:	89 e5                	mov    %esp,%ebp
80103b03:	56                   	push   %esi
80103b04:	53                   	push   %ebx
80103b05:	8b 75 08             	mov    0x8(%ebp),%esi
	pushcli();
80103b08:	e8 33 0a 00 00       	call   80104540 <pushcli>
	c = mycpu();
80103b0d:	e8 3e fe ff ff       	call   80103950 <mycpu>
	p = c->proc;
80103b12:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
	popcli();
80103b18:	e8 73 0a 00 00       	call   80104590 <popcli>
	sz = curproc->sz;
80103b1d:	8b 03                	mov    (%ebx),%eax
	if (n > 0) {
80103b1f:	85 f6                	test   %esi,%esi
80103b21:	7f 1d                	jg     80103b40 <growproc+0x40>
	} else if (n < 0) {
80103b23:	75 3b                	jne    80103b60 <growproc+0x60>
	switchuvm(curproc);
80103b25:	83 ec 0c             	sub    $0xc,%esp
	curproc->sz = sz;
80103b28:	89 03                	mov    %eax,(%ebx)
	switchuvm(curproc);
80103b2a:	53                   	push   %ebx
80103b2b:	e8 30 29 00 00       	call   80106460 <switchuvm>
	return 0;
80103b30:	83 c4 10             	add    $0x10,%esp
80103b33:	31 c0                	xor    %eax,%eax
}
80103b35:	8d 65 f8             	lea    -0x8(%ebp),%esp
80103b38:	5b                   	pop    %ebx
80103b39:	5e                   	pop    %esi
80103b3a:	5d                   	pop    %ebp
80103b3b:	c3                   	ret
80103b3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
		if ((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
80103b40:	83 ec 04             	sub    $0x4,%esp
80103b43:	01 c6                	add    %eax,%esi
80103b45:	56                   	push   %esi
80103b46:	50                   	push   %eax
80103b47:	ff 73 04             	push   0x4(%ebx)
80103b4a:	e8 71 2b 00 00       	call   801066c0 <allocuvm>
80103b4f:	83 c4 10             	add    $0x10,%esp
80103b52:	85 c0                	test   %eax,%eax
80103b54:	75 cf                	jne    80103b25 <growproc+0x25>
			return -1;
80103b56:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80103b5b:	eb d8                	jmp    80103b35 <growproc+0x35>
80103b5d:	8d 76 00             	lea    0x0(%esi),%esi
		if ((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
80103b60:	83 ec 04             	sub    $0x4,%esp
80103b63:	01 c6                	add    %eax,%esi
80103b65:	56                   	push   %esi
80103b66:	50                   	push   %eax
80103b67:	ff 73 04             	push   0x4(%ebx)
80103b6a:	e8 71 2c 00 00       	call   801067e0 <deallocuvm>
80103b6f:	83 c4 10             	add    $0x10,%esp
80103b72:	85 c0                	test   %eax,%eax
80103b74:	75 af                	jne    80103b25 <growproc+0x25>
80103b76:	eb de                	jmp    80103b56 <growproc+0x56>
80103b78:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80103b7f:	00 

80103b80 <fork>:
{
80103b80:	55                   	push   %ebp
80103b81:	89 e5                	mov    %esp,%ebp
80103b83:	57                   	push   %edi
80103b84:	56                   	push   %esi
80103b85:	53                   	push   %ebx
80103b86:	83 ec 1c             	sub    $0x1c,%esp
	pushcli();
80103b89:	e8 b2 09 00 00       	call   80104540 <pushcli>
	c = mycpu();
80103b8e:	e8 bd fd ff ff       	call   80103950 <mycpu>
	p = c->proc;
80103b93:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
	popcli();
80103b99:	e8 f2 09 00 00       	call   80104590 <popcli>
	if ((np = allocproc()) == 0) {
80103b9e:	e8 4d fc ff ff       	call   801037f0 <allocproc>
80103ba3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80103ba6:	85 c0                	test   %eax,%eax
80103ba8:	0f 84 f4 00 00 00    	je     80103ca2 <fork+0x122>
	if ((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0) {
80103bae:	83 ec 08             	sub    $0x8,%esp
80103bb1:	ff 33                	push   (%ebx)
80103bb3:	89 c7                	mov    %eax,%edi
80103bb5:	ff 73 04             	push   0x4(%ebx)
80103bb8:	e8 c3 2d 00 00       	call   80106980 <copyuvm>
80103bbd:	83 c4 10             	add    $0x10,%esp
80103bc0:	89 47 04             	mov    %eax,0x4(%edi)
80103bc3:	85 c0                	test   %eax,%eax
80103bc5:	0f 84 b8 00 00 00    	je     80103c83 <fork+0x103>
	np->sz = curproc->sz;
80103bcb:	8b 03                	mov    (%ebx),%eax
80103bcd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
80103bd0:	89 01                	mov    %eax,(%ecx)
	*np->tf = *curproc->tf;
80103bd2:	8b 79 1c             	mov    0x1c(%ecx),%edi
	np->parent = curproc;
80103bd5:	89 c8                	mov    %ecx,%eax
80103bd7:	89 59 18             	mov    %ebx,0x18(%ecx)
	*np->tf = *curproc->tf;
80103bda:	b9 13 00 00 00       	mov    $0x13,%ecx
80103bdf:	8b 73 1c             	mov    0x1c(%ebx),%esi
80103be2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	for (i = 0; i < NOFILE; i++)
80103be4:	31 f6                	xor    %esi,%esi
	np->tf->eax = 0;
80103be6:	8b 40 1c             	mov    0x1c(%eax),%eax
80103be9:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
		if (curproc->ofile[i])
80103bf0:	8b 44 b3 2c          	mov    0x2c(%ebx,%esi,4),%eax
80103bf4:	85 c0                	test   %eax,%eax
80103bf6:	74 13                	je     80103c0b <fork+0x8b>
			np->ofile[i] = filedup(curproc->ofile[i]);
80103bf8:	83 ec 0c             	sub    $0xc,%esp
80103bfb:	50                   	push   %eax
80103bfc:	e8 9f d4 ff ff       	call   801010a0 <filedup>
80103c01:	8b 55 e4             	mov    -0x1c(%ebp),%edx
80103c04:	83 c4 10             	add    $0x10,%esp
80103c07:	89 44 b2 2c          	mov    %eax,0x2c(%edx,%esi,4)
	for (i = 0; i < NOFILE; i++)
80103c0b:	83 c6 01             	add    $0x1,%esi
80103c0e:	83 fe 10             	cmp    $0x10,%esi
80103c11:	75 dd                	jne    80103bf0 <fork+0x70>
	np->cwd = idup(curproc->cwd);
80103c13:	83 ec 0c             	sub    $0xc,%esp
80103c16:	ff 73 6c             	push   0x6c(%ebx)
80103c19:	e8 12 de ff ff       	call   80101a30 <idup>
80103c1e:	8b 7d e4             	mov    -0x1c(%ebp),%edi
	safestrcpy(np->name, curproc->name, sizeof(curproc->name));
80103c21:	83 c4 0c             	add    $0xc,%esp
	np->cwd = idup(curproc->cwd);
80103c24:	89 47 6c             	mov    %eax,0x6c(%edi)
	safestrcpy(np->name, curproc->name, sizeof(curproc->name));
80103c27:	8d 83 f4 00 00 00    	lea    0xf4(%ebx),%eax
	memmove(np->strace_mask_ptr, curproc->strace_mask_ptr, SYSCALL_AMT);
80103c2d:	81 c3 04 01 00 00    	add    $0x104,%ebx
	safestrcpy(np->name, curproc->name, sizeof(curproc->name));
80103c33:	6a 10                	push   $0x10
80103c35:	50                   	push   %eax
80103c36:	8d 87 f4 00 00 00    	lea    0xf4(%edi),%eax
80103c3c:	50                   	push   %eax
80103c3d:	e8 fe 0c 00 00       	call   80104940 <safestrcpy>
	memmove(np->strace_mask_ptr, curproc->strace_mask_ptr, SYSCALL_AMT);
80103c42:	83 c4 0c             	add    $0xc,%esp
80103c45:	8d 87 04 01 00 00    	lea    0x104(%edi),%eax
80103c4b:	6a 1b                	push   $0x1b
80103c4d:	53                   	push   %ebx
80103c4e:	50                   	push   %eax
80103c4f:	e8 cc 0b 00 00       	call   80104820 <memmove>
	pid = np->pid;
80103c54:	8b 5f 10             	mov    0x10(%edi),%ebx
	acquire(&ptable.lock);
80103c57:	c7 04 24 e0 41 13 80 	movl   $0x801341e0,(%esp)
80103c5e:	e8 2d 0a 00 00       	call   80104690 <acquire>
	np->state = RUNNABLE;
80103c63:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
	release(&ptable.lock);
80103c6a:	c7 04 24 e0 41 13 80 	movl   $0x801341e0,(%esp)
80103c71:	e8 ba 09 00 00       	call   80104630 <release>
	return pid;
80103c76:	83 c4 10             	add    $0x10,%esp
}
80103c79:	8d 65 f4             	lea    -0xc(%ebp),%esp
80103c7c:	89 d8                	mov    %ebx,%eax
80103c7e:	5b                   	pop    %ebx
80103c7f:	5e                   	pop    %esi
80103c80:	5f                   	pop    %edi
80103c81:	5d                   	pop    %ebp
80103c82:	c3                   	ret
		kfree(np->kstack);
80103c83:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
80103c86:	83 ec 0c             	sub    $0xc,%esp
80103c89:	ff 73 08             	push   0x8(%ebx)
80103c8c:	e8 4f eb ff ff       	call   801027e0 <kfree>
		np->kstack = 0;
80103c91:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
		return -1;
80103c98:	83 c4 10             	add    $0x10,%esp
		np->state = UNUSED;
80103c9b:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
		return -1;
80103ca2:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
80103ca7:	eb d0                	jmp    80103c79 <fork+0xf9>
80103ca9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80103cb0 <scheduler>:
{
80103cb0:	55                   	push   %ebp
80103cb1:	89 e5                	mov    %esp,%ebp
80103cb3:	57                   	push   %edi
80103cb4:	56                   	push   %esi
80103cb5:	53                   	push   %ebx
80103cb6:	83 ec 1c             	sub    $0x1c,%esp
	struct cpu *c = mycpu();
80103cb9:	e8 92 fc ff ff       	call   80103950 <mycpu>
	c->proc = 0;
80103cbe:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
80103cc5:	00 00 00 
	struct cpu *c = mycpu();
80103cc8:	89 c6                	mov    %eax,%esi
	c->proc = 0;
80103cca:	8d 78 04             	lea    0x4(%eax),%edi
{
80103ccd:	31 c0                	xor    %eax,%eax
80103ccf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm__ __volatile__("sti");
80103cd2:	fb                   	sti
		acquire(&ptable.lock);
80103cd3:	83 ec 0c             	sub    $0xc,%esp
		for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80103cd6:	bb 14 42 13 80       	mov    $0x80134214,%ebx
		acquire(&ptable.lock);
80103cdb:	68 e0 41 13 80       	push   $0x801341e0
80103ce0:	e8 ab 09 00 00       	call   80104690 <acquire>
		for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80103ce5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
		acquire(&ptable.lock);
80103ce8:	83 c4 10             	add    $0x10,%esp
80103ceb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
			if (p->state != RUNNABLE)
80103cf0:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
80103cf4:	75 38                	jne    80103d2e <scheduler+0x7e>
			switchuvm(p);
80103cf6:	83 ec 0c             	sub    $0xc,%esp
			c->proc = p;
80103cf9:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
			switchuvm(p);
80103cff:	53                   	push   %ebx
80103d00:	e8 5b 27 00 00       	call   80106460 <switchuvm>
			swtch(&(c->scheduler), p->context);
80103d05:	58                   	pop    %eax
80103d06:	5a                   	pop    %edx
80103d07:	ff 73 20             	push   0x20(%ebx)
80103d0a:	57                   	push   %edi
			p->state = RUNNING;
80103d0b:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
			swtch(&(c->scheduler), p->context);
80103d12:	e8 b9 2e 00 00       	call   80106bd0 <swtch>
			switchkvm();
80103d17:	e8 34 27 00 00       	call   80106450 <switchkvm>
			c->proc = 0;
80103d1c:	83 c4 10             	add    $0x10,%esp
			ran = 1;
80103d1f:	b8 01 00 00 00       	mov    $0x1,%eax
			c->proc = 0;
80103d24:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
80103d2b:	00 00 00 
		for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80103d2e:	81 c3 20 01 00 00    	add    $0x120,%ebx
80103d34:	81 fb 14 8a 13 80    	cmp    $0x80138a14,%ebx
80103d3a:	75 b4                	jne    80103cf0 <scheduler+0x40>
		release(&ptable.lock);
80103d3c:	83 ec 0c             	sub    $0xc,%esp
80103d3f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80103d42:	68 e0 41 13 80       	push   $0x801341e0
80103d47:	e8 e4 08 00 00       	call   80104630 <release>
		if (ran == 0) {
80103d4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80103d4f:	83 c4 10             	add    $0x10,%esp
80103d52:	85 c0                	test   %eax,%eax
80103d54:	0f 85 75 ff ff ff    	jne    80103ccf <scheduler+0x1f>
	__asm__ __volatile__("hlt");
80103d5a:	f4                   	hlt
}
80103d5b:	e9 6d ff ff ff       	jmp    80103ccd <scheduler+0x1d>

80103d60 <sched>:
{
80103d60:	55                   	push   %ebp
80103d61:	89 e5                	mov    %esp,%ebp
80103d63:	56                   	push   %esi
80103d64:	53                   	push   %ebx
	pushcli();
80103d65:	e8 d6 07 00 00       	call   80104540 <pushcli>
	c = mycpu();
80103d6a:	e8 e1 fb ff ff       	call   80103950 <mycpu>
	p = c->proc;
80103d6f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
	popcli();
80103d75:	e8 16 08 00 00       	call   80104590 <popcli>
	if (!holding(&ptable.lock))
80103d7a:	83 ec 0c             	sub    $0xc,%esp
80103d7d:	68 e0 41 13 80       	push   $0x801341e0
80103d82:	e8 69 08 00 00       	call   801045f0 <holding>
80103d87:	83 c4 10             	add    $0x10,%esp
80103d8a:	85 c0                	test   %eax,%eax
80103d8c:	74 4f                	je     80103ddd <sched+0x7d>
	if (mycpu()->ncli != 1)
80103d8e:	e8 bd fb ff ff       	call   80103950 <mycpu>
80103d93:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
80103d9a:	75 68                	jne    80103e04 <sched+0xa4>
	if (p->state == RUNNING)
80103d9c:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
80103da0:	74 55                	je     80103df7 <sched+0x97>
	__asm__ __volatile__("pushfl; popl %0" : "=r"(eflags));
80103da2:	9c                   	pushf
80103da3:	58                   	pop    %eax
	if (readeflags() & FL_IF)
80103da4:	f6 c4 02             	test   $0x2,%ah
80103da7:	75 41                	jne    80103dea <sched+0x8a>
	intena = mycpu()->intena;
80103da9:	e8 a2 fb ff ff       	call   80103950 <mycpu>
	swtch(&p->context, mycpu()->scheduler);
80103dae:	83 c3 20             	add    $0x20,%ebx
	intena = mycpu()->intena;
80103db1:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
	swtch(&p->context, mycpu()->scheduler);
80103db7:	e8 94 fb ff ff       	call   80103950 <mycpu>
80103dbc:	83 ec 08             	sub    $0x8,%esp
80103dbf:	ff 70 04             	push   0x4(%eax)
80103dc2:	53                   	push   %ebx
80103dc3:	e8 08 2e 00 00       	call   80106bd0 <swtch>
	mycpu()->intena = intena;
80103dc8:	e8 83 fb ff ff       	call   80103950 <mycpu>
}
80103dcd:	83 c4 10             	add    $0x10,%esp
	mycpu()->intena = intena;
80103dd0:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
}
80103dd6:	8d 65 f8             	lea    -0x8(%ebp),%esp
80103dd9:	5b                   	pop    %ebx
80103dda:	5e                   	pop    %esi
80103ddb:	5d                   	pop    %ebp
80103ddc:	c3                   	ret
		panic("sched ptable.lock");
80103ddd:	83 ec 0c             	sub    $0xc,%esp
80103de0:	68 32 83 10 80       	push   $0x80108332
80103de5:	e8 96 c5 ff ff       	call   80100380 <panic>
		panic("sched interruptible");
80103dea:	83 ec 0c             	sub    $0xc,%esp
80103ded:	68 5e 83 10 80       	push   $0x8010835e
80103df2:	e8 89 c5 ff ff       	call   80100380 <panic>
		panic("sched running");
80103df7:	83 ec 0c             	sub    $0xc,%esp
80103dfa:	68 50 83 10 80       	push   $0x80108350
80103dff:	e8 7c c5 ff ff       	call   80100380 <panic>
		panic("sched locks");
80103e04:	83 ec 0c             	sub    $0xc,%esp
80103e07:	68 44 83 10 80       	push   $0x80108344
80103e0c:	e8 6f c5 ff ff       	call   80100380 <panic>
80103e11:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80103e18:	00 
80103e19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80103e20 <exit>:
{
80103e20:	55                   	push   %ebp
80103e21:	89 e5                	mov    %esp,%ebp
80103e23:	57                   	push   %edi
80103e24:	56                   	push   %esi
80103e25:	53                   	push   %ebx
80103e26:	83 ec 0c             	sub    $0xc,%esp
	struct proc *curproc = myproc();
80103e29:	e8 b2 fb ff ff       	call   801039e0 <myproc>
	if (curproc == initproc)
80103e2e:	39 05 14 8a 13 80    	cmp    %eax,0x80138a14
80103e34:	0f 84 07 01 00 00    	je     80103f41 <exit+0x121>
80103e3a:	89 c3                	mov    %eax,%ebx
80103e3c:	8d 70 2c             	lea    0x2c(%eax),%esi
80103e3f:	8d 78 6c             	lea    0x6c(%eax),%edi
80103e42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		if (curproc->ofile[fd]) {
80103e48:	8b 06                	mov    (%esi),%eax
80103e4a:	85 c0                	test   %eax,%eax
80103e4c:	74 12                	je     80103e60 <exit+0x40>
			fileclose(curproc->ofile[fd]);
80103e4e:	83 ec 0c             	sub    $0xc,%esp
80103e51:	50                   	push   %eax
80103e52:	e8 99 d2 ff ff       	call   801010f0 <fileclose>
			curproc->ofile[fd] = 0;
80103e57:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
80103e5d:	83 c4 10             	add    $0x10,%esp
	for (fd = 0; fd < NOFILE; fd++) {
80103e60:	83 c6 04             	add    $0x4,%esi
80103e63:	39 f7                	cmp    %esi,%edi
80103e65:	75 e1                	jne    80103e48 <exit+0x28>
	begin_op();
80103e67:	e8 54 ed ff ff       	call   80102bc0 <begin_op>
	iput(curproc->cwd);
80103e6c:	83 ec 0c             	sub    $0xc,%esp
80103e6f:	ff 73 6c             	push   0x6c(%ebx)
80103e72:	e8 39 dd ff ff       	call   80101bb0 <iput>
	end_op();
80103e77:	e8 b4 ed ff ff       	call   80102c30 <end_op>
	curproc->status = status;
80103e7c:	8b 45 08             	mov    0x8(%ebp),%eax
	curproc->cwd = 0;
80103e7f:	c7 43 6c 00 00 00 00 	movl   $0x0,0x6c(%ebx)
	curproc->status = status;
80103e86:	89 43 14             	mov    %eax,0x14(%ebx)
	acquire(&ptable.lock);
80103e89:	c7 04 24 e0 41 13 80 	movl   $0x801341e0,(%esp)
80103e90:	e8 fb 07 00 00       	call   80104690 <acquire>
	wakeup1(curproc->parent);
80103e95:	8b 53 18             	mov    0x18(%ebx),%edx
80103e98:	83 c4 10             	add    $0x10,%esp
static void
wakeup1(void *chan)
{
	struct proc *p;

	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80103e9b:	b8 14 42 13 80       	mov    $0x80134214,%eax
80103ea0:	eb 12                	jmp    80103eb4 <exit+0x94>
80103ea2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80103ea8:	05 20 01 00 00       	add    $0x120,%eax
80103ead:	3d 14 8a 13 80       	cmp    $0x80138a14,%eax
80103eb2:	74 1e                	je     80103ed2 <exit+0xb2>
		if (p->state == SLEEPING && p->chan == chan)
80103eb4:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
80103eb8:	75 ee                	jne    80103ea8 <exit+0x88>
80103eba:	3b 50 24             	cmp    0x24(%eax),%edx
80103ebd:	75 e9                	jne    80103ea8 <exit+0x88>
			p->state = RUNNABLE;
80103ebf:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80103ec6:	05 20 01 00 00       	add    $0x120,%eax
80103ecb:	3d 14 8a 13 80       	cmp    $0x80138a14,%eax
80103ed0:	75 e2                	jne    80103eb4 <exit+0x94>
			p->parent = initproc;
80103ed2:	8b 0d 14 8a 13 80    	mov    0x80138a14,%ecx
	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80103ed8:	ba 14 42 13 80       	mov    $0x80134214,%edx
80103edd:	eb 0f                	jmp    80103eee <exit+0xce>
80103edf:	90                   	nop
80103ee0:	81 c2 20 01 00 00    	add    $0x120,%edx
80103ee6:	81 fa 14 8a 13 80    	cmp    $0x80138a14,%edx
80103eec:	74 3a                	je     80103f28 <exit+0x108>
		if (p->parent == curproc) {
80103eee:	39 5a 18             	cmp    %ebx,0x18(%edx)
80103ef1:	75 ed                	jne    80103ee0 <exit+0xc0>
			if (p->state == ZOMBIE)
80103ef3:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
			p->parent = initproc;
80103ef7:	89 4a 18             	mov    %ecx,0x18(%edx)
			if (p->state == ZOMBIE)
80103efa:	75 e4                	jne    80103ee0 <exit+0xc0>
	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
80103efc:	b8 14 42 13 80       	mov    $0x80134214,%eax
80103f01:	eb 11                	jmp    80103f14 <exit+0xf4>
80103f03:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
80103f08:	05 20 01 00 00       	add    $0x120,%eax
80103f0d:	3d 14 8a 13 80       	cmp    $0x80138a14,%eax
80103f12:	74 cc                	je     80103ee0 <exit+0xc0>
		if (p->state == SLEEPING && p->chan == chan)
80103f14:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
80103f18:	75 ee                	jne    80103f08 <exit+0xe8>
80103f1a:	3b 48 24             	cmp    0x24(%eax),%ecx
80103f1d:	75 e9                	jne    80103f08 <exit+0xe8>
			p->state = RUNNABLE;
80103f1f:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
80103f26:	eb e0                	jmp    80103f08 <exit+0xe8>
	curproc->state = ZOMBIE;
80103f28:	c7 43 0c 05 00 00 00 	movl   $0x5,0xc(%ebx)
	sched();
80103f2f:	e8 2c fe ff ff       	call   80103d60 <sched>
	panic("zombie exit");
80103f34:	83 ec 0c             	sub    $0xc,%esp
80103f37:	68 7f 83 10 80       	push   $0x8010837f
80103f3c:	e8 3f c4 ff ff       	call   80100380 <panic>
		panic("init exiting");
80103f41:	83 ec 0c             	sub    $0xc,%esp
80103f44:	68 72 83 10 80       	push   $0x80108372
80103f49:	e8 32 c4 ff ff       	call   80100380 <panic>
80103f4e:	66 90                	xchg   %ax,%ax

80103f50 <wait>:
{
80103f50:	55                   	push   %ebp
80103f51:	89 e5                	mov    %esp,%ebp
80103f53:	57                   	push   %edi
80103f54:	56                   	push   %esi
80103f55:	53                   	push   %ebx
80103f56:	83 ec 0c             	sub    $0xc,%esp
80103f59:	8b 7d 08             	mov    0x8(%ebp),%edi
	pushcli();
80103f5c:	e8 df 05 00 00       	call   80104540 <pushcli>
	c = mycpu();
80103f61:	e8 ea f9 ff ff       	call   80103950 <mycpu>
	p = c->proc;
80103f66:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
	popcli();
80103f6c:	e8 1f 06 00 00       	call   80104590 <popcli>
	acquire(&ptable.lock);
80103f71:	83 ec 0c             	sub    $0xc,%esp
80103f74:	68 e0 41 13 80       	push   $0x801341e0
80103f79:	e8 12 07 00 00       	call   80104690 <acquire>
80103f7e:	83 c4 10             	add    $0x10,%esp
		havekids = 0;
80103f81:	31 c0                	xor    %eax,%eax
		for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80103f83:	bb 14 42 13 80       	mov    $0x80134214,%ebx
80103f88:	eb 14                	jmp    80103f9e <wait+0x4e>
80103f8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80103f90:	81 c3 20 01 00 00    	add    $0x120,%ebx
80103f96:	81 fb 14 8a 13 80    	cmp    $0x80138a14,%ebx
80103f9c:	74 1e                	je     80103fbc <wait+0x6c>
			if (p->parent != curproc)
80103f9e:	39 73 18             	cmp    %esi,0x18(%ebx)
80103fa1:	75 ed                	jne    80103f90 <wait+0x40>
			if (p->state == ZOMBIE) {
80103fa3:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
80103fa7:	74 67                	je     80104010 <wait+0xc0>
		for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80103fa9:	81 c3 20 01 00 00    	add    $0x120,%ebx
			havekids = 1;
80103faf:	b8 01 00 00 00       	mov    $0x1,%eax
		for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80103fb4:	81 fb 14 8a 13 80    	cmp    $0x80138a14,%ebx
80103fba:	75 e2                	jne    80103f9e <wait+0x4e>
		if (!havekids || curproc->killed) {
80103fbc:	85 c0                	test   %eax,%eax
80103fbe:	0f 84 b2 00 00 00    	je     80104076 <wait+0x126>
80103fc4:	8b 46 28             	mov    0x28(%esi),%eax
80103fc7:	85 c0                	test   %eax,%eax
80103fc9:	0f 85 a7 00 00 00    	jne    80104076 <wait+0x126>
	pushcli();
80103fcf:	e8 6c 05 00 00       	call   80104540 <pushcli>
	c = mycpu();
80103fd4:	e8 77 f9 ff ff       	call   80103950 <mycpu>
	p = c->proc;
80103fd9:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
	popcli();
80103fdf:	e8 ac 05 00 00       	call   80104590 <popcli>
	if (p == 0)
80103fe4:	85 db                	test   %ebx,%ebx
80103fe6:	0f 84 a1 00 00 00    	je     8010408d <wait+0x13d>
	p->chan = chan;
80103fec:	89 73 24             	mov    %esi,0x24(%ebx)
	p->state = SLEEPING;
80103fef:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
	sched();
80103ff6:	e8 65 fd ff ff       	call   80103d60 <sched>
	p->chan = 0;
80103ffb:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
}
80104002:	e9 7a ff ff ff       	jmp    80103f81 <wait+0x31>
80104007:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010400e:	00 
8010400f:	90                   	nop
				if (wstatus != NULL)
80104010:	85 ff                	test   %edi,%edi
80104012:	74 08                	je     8010401c <wait+0xcc>
					*wstatus = W_EXITCODE(p->status, 0);
80104014:	8b 43 14             	mov    0x14(%ebx),%eax
80104017:	c1 e0 08             	shl    $0x8,%eax
8010401a:	89 07                	mov    %eax,(%edi)
				kfree(p->kstack);
8010401c:	83 ec 0c             	sub    $0xc,%esp
				pid = p->pid;
8010401f:	8b 73 10             	mov    0x10(%ebx),%esi
				kfree(p->kstack);
80104022:	ff 73 08             	push   0x8(%ebx)
80104025:	e8 b6 e7 ff ff       	call   801027e0 <kfree>
				p->kstack = 0;
8010402a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
				freevm(p->pgdir);
80104031:	5a                   	pop    %edx
80104032:	ff 73 04             	push   0x4(%ebx)
80104035:	e8 d6 27 00 00       	call   80106810 <freevm>
				p->pid = 0;
8010403a:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
				p->parent = 0;
80104041:	c7 43 18 00 00 00 00 	movl   $0x0,0x18(%ebx)
				p->name[0] = 0;
80104048:	c6 83 f4 00 00 00 00 	movb   $0x0,0xf4(%ebx)
				p->killed = 0;
8010404f:	c7 43 28 00 00 00 00 	movl   $0x0,0x28(%ebx)
				p->state = UNUSED;
80104056:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
				release(&ptable.lock);
8010405d:	c7 04 24 e0 41 13 80 	movl   $0x801341e0,(%esp)
80104064:	e8 c7 05 00 00       	call   80104630 <release>
				return pid;
80104069:	83 c4 10             	add    $0x10,%esp
}
8010406c:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010406f:	89 f0                	mov    %esi,%eax
80104071:	5b                   	pop    %ebx
80104072:	5e                   	pop    %esi
80104073:	5f                   	pop    %edi
80104074:	5d                   	pop    %ebp
80104075:	c3                   	ret
			release(&ptable.lock);
80104076:	83 ec 0c             	sub    $0xc,%esp
			return -1;
80104079:	be ff ff ff ff       	mov    $0xffffffff,%esi
			release(&ptable.lock);
8010407e:	68 e0 41 13 80       	push   $0x801341e0
80104083:	e8 a8 05 00 00       	call   80104630 <release>
			return -1;
80104088:	83 c4 10             	add    $0x10,%esp
8010408b:	eb df                	jmp    8010406c <wait+0x11c>
		panic("sleep");
8010408d:	83 ec 0c             	sub    $0xc,%esp
80104090:	68 8b 83 10 80       	push   $0x8010838b
80104095:	e8 e6 c2 ff ff       	call   80100380 <panic>
8010409a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

801040a0 <yield>:
{
801040a0:	55                   	push   %ebp
801040a1:	89 e5                	mov    %esp,%ebp
801040a3:	53                   	push   %ebx
801040a4:	83 ec 10             	sub    $0x10,%esp
	acquire(&ptable.lock); //DOC: yieldlock
801040a7:	68 e0 41 13 80       	push   $0x801341e0
801040ac:	e8 df 05 00 00       	call   80104690 <acquire>
	pushcli();
801040b1:	e8 8a 04 00 00       	call   80104540 <pushcli>
	c = mycpu();
801040b6:	e8 95 f8 ff ff       	call   80103950 <mycpu>
	p = c->proc;
801040bb:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
	popcli();
801040c1:	e8 ca 04 00 00       	call   80104590 <popcli>
	myproc()->state = RUNNABLE;
801040c6:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
	sched();
801040cd:	e8 8e fc ff ff       	call   80103d60 <sched>
	release(&ptable.lock);
801040d2:	c7 04 24 e0 41 13 80 	movl   $0x801341e0,(%esp)
801040d9:	e8 52 05 00 00       	call   80104630 <release>
}
801040de:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801040e1:	83 c4 10             	add    $0x10,%esp
801040e4:	c9                   	leave
801040e5:	c3                   	ret
801040e6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801040ed:	00 
801040ee:	66 90                	xchg   %ax,%ax

801040f0 <sleep>:
{
801040f0:	55                   	push   %ebp
801040f1:	89 e5                	mov    %esp,%ebp
801040f3:	57                   	push   %edi
801040f4:	56                   	push   %esi
801040f5:	53                   	push   %ebx
801040f6:	83 ec 0c             	sub    $0xc,%esp
801040f9:	8b 7d 08             	mov    0x8(%ebp),%edi
801040fc:	8b 75 0c             	mov    0xc(%ebp),%esi
	pushcli();
801040ff:	e8 3c 04 00 00       	call   80104540 <pushcli>
	c = mycpu();
80104104:	e8 47 f8 ff ff       	call   80103950 <mycpu>
	p = c->proc;
80104109:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
	popcli();
8010410f:	e8 7c 04 00 00       	call   80104590 <popcli>
	if (p == 0)
80104114:	85 db                	test   %ebx,%ebx
80104116:	0f 84 87 00 00 00    	je     801041a3 <sleep+0xb3>
	if (lk == 0)
8010411c:	85 f6                	test   %esi,%esi
8010411e:	74 76                	je     80104196 <sleep+0xa6>
	if (lk != &ptable.lock) { //DOC: sleeplock0
80104120:	81 fe e0 41 13 80    	cmp    $0x801341e0,%esi
80104126:	74 50                	je     80104178 <sleep+0x88>
		acquire(&ptable.lock); //DOC: sleeplock1
80104128:	83 ec 0c             	sub    $0xc,%esp
8010412b:	68 e0 41 13 80       	push   $0x801341e0
80104130:	e8 5b 05 00 00       	call   80104690 <acquire>
		release(lk);
80104135:	89 34 24             	mov    %esi,(%esp)
80104138:	e8 f3 04 00 00       	call   80104630 <release>
	p->chan = chan;
8010413d:	89 7b 24             	mov    %edi,0x24(%ebx)
	p->state = SLEEPING;
80104140:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
	sched();
80104147:	e8 14 fc ff ff       	call   80103d60 <sched>
	p->chan = 0;
8010414c:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
		release(&ptable.lock);
80104153:	c7 04 24 e0 41 13 80 	movl   $0x801341e0,(%esp)
8010415a:	e8 d1 04 00 00       	call   80104630 <release>
		acquire(lk);
8010415f:	89 75 08             	mov    %esi,0x8(%ebp)
80104162:	83 c4 10             	add    $0x10,%esp
}
80104165:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104168:	5b                   	pop    %ebx
80104169:	5e                   	pop    %esi
8010416a:	5f                   	pop    %edi
8010416b:	5d                   	pop    %ebp
		acquire(lk);
8010416c:	e9 1f 05 00 00       	jmp    80104690 <acquire>
80104171:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
	p->chan = chan;
80104178:	89 7b 24             	mov    %edi,0x24(%ebx)
	p->state = SLEEPING;
8010417b:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
	sched();
80104182:	e8 d9 fb ff ff       	call   80103d60 <sched>
	p->chan = 0;
80104187:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
}
8010418e:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104191:	5b                   	pop    %ebx
80104192:	5e                   	pop    %esi
80104193:	5f                   	pop    %edi
80104194:	5d                   	pop    %ebp
80104195:	c3                   	ret
		panic("sleep without lk");
80104196:	83 ec 0c             	sub    $0xc,%esp
80104199:	68 91 83 10 80       	push   $0x80108391
8010419e:	e8 dd c1 ff ff       	call   80100380 <panic>
		panic("sleep");
801041a3:	83 ec 0c             	sub    $0xc,%esp
801041a6:	68 8b 83 10 80       	push   $0x8010838b
801041ab:	e8 d0 c1 ff ff       	call   80100380 <panic>

801041b0 <wakeup>:
}

// Wake up all processes sleeping on chan.
void
wakeup(void *chan)
{
801041b0:	55                   	push   %ebp
801041b1:	89 e5                	mov    %esp,%ebp
801041b3:	53                   	push   %ebx
801041b4:	83 ec 10             	sub    $0x10,%esp
801041b7:	8b 5d 08             	mov    0x8(%ebp),%ebx
	acquire(&ptable.lock);
801041ba:	68 e0 41 13 80       	push   $0x801341e0
801041bf:	e8 cc 04 00 00       	call   80104690 <acquire>
801041c4:	83 c4 10             	add    $0x10,%esp
	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
801041c7:	b8 14 42 13 80       	mov    $0x80134214,%eax
801041cc:	eb 0e                	jmp    801041dc <wakeup+0x2c>
801041ce:	66 90                	xchg   %ax,%ax
801041d0:	05 20 01 00 00       	add    $0x120,%eax
801041d5:	3d 14 8a 13 80       	cmp    $0x80138a14,%eax
801041da:	74 1e                	je     801041fa <wakeup+0x4a>
		if (p->state == SLEEPING && p->chan == chan)
801041dc:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
801041e0:	75 ee                	jne    801041d0 <wakeup+0x20>
801041e2:	3b 58 24             	cmp    0x24(%eax),%ebx
801041e5:	75 e9                	jne    801041d0 <wakeup+0x20>
			p->state = RUNNABLE;
801041e7:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
801041ee:	05 20 01 00 00       	add    $0x120,%eax
801041f3:	3d 14 8a 13 80       	cmp    $0x80138a14,%eax
801041f8:	75 e2                	jne    801041dc <wakeup+0x2c>
	wakeup1(chan);
	release(&ptable.lock);
801041fa:	c7 45 08 e0 41 13 80 	movl   $0x801341e0,0x8(%ebp)
}
80104201:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104204:	c9                   	leave
	release(&ptable.lock);
80104205:	e9 26 04 00 00       	jmp    80104630 <release>
8010420a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80104210 <kill>:
// Kill the process with the given pid.
// Process won't exit until it returns
// to user space (see trap in trap.c).
int
kill(int pid)
{
80104210:	55                   	push   %ebp
80104211:	89 e5                	mov    %esp,%ebp
80104213:	53                   	push   %ebx
80104214:	83 ec 10             	sub    $0x10,%esp
80104217:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct proc *p;

	acquire(&ptable.lock);
8010421a:	68 e0 41 13 80       	push   $0x801341e0
8010421f:	e8 6c 04 00 00       	call   80104690 <acquire>
80104224:	83 c4 10             	add    $0x10,%esp
	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
80104227:	b8 14 42 13 80       	mov    $0x80134214,%eax
8010422c:	eb 0e                	jmp    8010423c <kill+0x2c>
8010422e:	66 90                	xchg   %ax,%ax
80104230:	05 20 01 00 00       	add    $0x120,%eax
80104235:	3d 14 8a 13 80       	cmp    $0x80138a14,%eax
8010423a:	74 34                	je     80104270 <kill+0x60>
		if (p->pid == pid) {
8010423c:	39 58 10             	cmp    %ebx,0x10(%eax)
8010423f:	75 ef                	jne    80104230 <kill+0x20>
			p->killed = 1;
			// Wake process from sleep if necessary.
			if (p->state == SLEEPING)
80104241:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
			p->killed = 1;
80104245:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
			if (p->state == SLEEPING)
8010424c:	75 07                	jne    80104255 <kill+0x45>
				p->state = RUNNABLE;
8010424e:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
			release(&ptable.lock);
80104255:	83 ec 0c             	sub    $0xc,%esp
80104258:	68 e0 41 13 80       	push   $0x801341e0
8010425d:	e8 ce 03 00 00       	call   80104630 <release>
			return 0;
		}
	}
	release(&ptable.lock);
	return -1;
}
80104262:	8b 5d fc             	mov    -0x4(%ebp),%ebx
			return 0;
80104265:	83 c4 10             	add    $0x10,%esp
80104268:	31 c0                	xor    %eax,%eax
}
8010426a:	c9                   	leave
8010426b:	c3                   	ret
8010426c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
	release(&ptable.lock);
80104270:	83 ec 0c             	sub    $0xc,%esp
80104273:	68 e0 41 13 80       	push   $0x801341e0
80104278:	e8 b3 03 00 00       	call   80104630 <release>
}
8010427d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
	return -1;
80104280:	83 c4 10             	add    $0x10,%esp
80104283:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80104288:	c9                   	leave
80104289:	c3                   	ret
8010428a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80104290 <procdump>:
// Print a process listing to console.  For debugging.
// Runs when user types ^P on console.
// No lock to avoid wedging a stuck machine further.
void
procdump(void)
{
80104290:	55                   	push   %ebp
80104291:	89 e5                	mov    %esp,%ebp
80104293:	57                   	push   %edi
80104294:	56                   	push   %esi
80104295:	8d 75 e8             	lea    -0x18(%ebp),%esi
80104298:	53                   	push   %ebx
80104299:	bb 08 43 13 80       	mov    $0x80134308,%ebx
8010429e:	83 ec 3c             	sub    $0x3c,%esp
801042a1:	eb 27                	jmp    801042ca <procdump+0x3a>
801042a3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
		if (p->state == SLEEPING) {
			getcallerpcs((uint *)p->context->ebp + 2, pc);
			for (i = 0; i < 10 && pc[i] != 0; i++)
				cprintf(" %x", pc[i]);
		}
		cprintf("\n");
801042a8:	83 ec 0c             	sub    $0xc,%esp
801042ab:	68 42 86 10 80       	push   $0x80108642
801042b0:	e8 9b c4 ff ff       	call   80100750 <cprintf>
801042b5:	83 c4 10             	add    $0x10,%esp
	for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
801042b8:	81 c3 20 01 00 00    	add    $0x120,%ebx
801042be:	81 fb 08 8b 13 80    	cmp    $0x80138b08,%ebx
801042c4:	0f 84 96 00 00 00    	je     80104360 <procdump+0xd0>
		if (p->state == UNUSED)
801042ca:	8b 83 18 ff ff ff    	mov    -0xe8(%ebx),%eax
801042d0:	85 c0                	test   %eax,%eax
801042d2:	74 e4                	je     801042b8 <procdump+0x28>
			state = "???";
801042d4:	ba a2 83 10 80       	mov    $0x801083a2,%edx
		if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
801042d9:	83 f8 05             	cmp    $0x5,%eax
801042dc:	77 11                	ja     801042ef <procdump+0x5f>
801042de:	8b 14 85 58 8a 10 80 	mov    -0x7fef75a8(,%eax,4),%edx
			state = "???";
801042e5:	b8 a2 83 10 80       	mov    $0x801083a2,%eax
801042ea:	85 d2                	test   %edx,%edx
801042ec:	0f 44 d0             	cmove  %eax,%edx
		cprintf("%d %s %s", p->pid, state, p->name);
801042ef:	53                   	push   %ebx
801042f0:	52                   	push   %edx
801042f1:	ff b3 1c ff ff ff    	push   -0xe4(%ebx)
801042f7:	68 a6 83 10 80       	push   $0x801083a6
801042fc:	e8 4f c4 ff ff       	call   80100750 <cprintf>
		if (p->state == SLEEPING) {
80104301:	83 c4 10             	add    $0x10,%esp
80104304:	83 bb 18 ff ff ff 02 	cmpl   $0x2,-0xe8(%ebx)
8010430b:	75 9b                	jne    801042a8 <procdump+0x18>
			getcallerpcs((uint *)p->context->ebp + 2, pc);
8010430d:	83 ec 08             	sub    $0x8,%esp
80104310:	8d 45 c0             	lea    -0x40(%ebp),%eax
80104313:	8d 7d c0             	lea    -0x40(%ebp),%edi
80104316:	50                   	push   %eax
80104317:	8b 83 2c ff ff ff    	mov    -0xd4(%ebx),%eax
8010431d:	8b 40 0c             	mov    0xc(%eax),%eax
80104320:	83 c0 08             	add    $0x8,%eax
80104323:	50                   	push   %eax
80104324:	e8 97 01 00 00       	call   801044c0 <getcallerpcs>
			for (i = 0; i < 10 && pc[i] != 0; i++)
80104329:	83 c4 10             	add    $0x10,%esp
8010432c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80104330:	8b 17                	mov    (%edi),%edx
80104332:	85 d2                	test   %edx,%edx
80104334:	0f 84 6e ff ff ff    	je     801042a8 <procdump+0x18>
				cprintf(" %x", pc[i]);
8010433a:	83 ec 08             	sub    $0x8,%esp
			for (i = 0; i < 10 && pc[i] != 0; i++)
8010433d:	83 c7 04             	add    $0x4,%edi
				cprintf(" %x", pc[i]);
80104340:	52                   	push   %edx
80104341:	68 81 80 10 80       	push   $0x80108081
80104346:	e8 05 c4 ff ff       	call   80100750 <cprintf>
			for (i = 0; i < 10 && pc[i] != 0; i++)
8010434b:	83 c4 10             	add    $0x10,%esp
8010434e:	39 f7                	cmp    %esi,%edi
80104350:	75 de                	jne    80104330 <procdump+0xa0>
80104352:	e9 51 ff ff ff       	jmp    801042a8 <procdump+0x18>
80104357:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010435e:	00 
8010435f:	90                   	nop
	}
}
80104360:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104363:	5b                   	pop    %ebx
80104364:	5e                   	pop    %esi
80104365:	5f                   	pop    %edi
80104366:	5d                   	pop    %ebp
80104367:	c3                   	ret
80104368:	66 90                	xchg   %ax,%ax
8010436a:	66 90                	xchg   %ax,%ax
8010436c:	66 90                	xchg   %ax,%ax
8010436e:	66 90                	xchg   %ax,%ax

80104370 <initsleeplock>:
#include "proc.h"
#include "sleeplock.h"

void
initsleeplock(struct sleeplock *lk, char *name)
{
80104370:	55                   	push   %ebp
80104371:	89 e5                	mov    %esp,%ebp
80104373:	53                   	push   %ebx
80104374:	83 ec 0c             	sub    $0xc,%esp
80104377:	8b 5d 08             	mov    0x8(%ebp),%ebx
	initlock(&lk->lk, "sleep lock");
8010437a:	68 d9 83 10 80       	push   $0x801083d9
8010437f:	8d 43 04             	lea    0x4(%ebx),%eax
80104382:	50                   	push   %eax
80104383:	e8 18 01 00 00       	call   801044a0 <initlock>
	lk->name = name;
80104388:	8b 45 0c             	mov    0xc(%ebp),%eax
	lk->locked = 0;
8010438b:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
	lk->pid = 0;
}
80104391:	83 c4 10             	add    $0x10,%esp
	lk->pid = 0;
80104394:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
	lk->name = name;
8010439b:	89 43 38             	mov    %eax,0x38(%ebx)
}
8010439e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801043a1:	c9                   	leave
801043a2:	c3                   	ret
801043a3:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801043aa:	00 
801043ab:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

801043b0 <acquiresleep>:

void
acquiresleep(struct sleeplock *lk)
{
801043b0:	55                   	push   %ebp
801043b1:	89 e5                	mov    %esp,%ebp
801043b3:	56                   	push   %esi
801043b4:	53                   	push   %ebx
801043b5:	8b 5d 08             	mov    0x8(%ebp),%ebx
	acquire(&lk->lk);
801043b8:	8d 73 04             	lea    0x4(%ebx),%esi
801043bb:	83 ec 0c             	sub    $0xc,%esp
801043be:	56                   	push   %esi
801043bf:	e8 cc 02 00 00       	call   80104690 <acquire>
	while (lk->locked) {
801043c4:	8b 13                	mov    (%ebx),%edx
801043c6:	83 c4 10             	add    $0x10,%esp
801043c9:	85 d2                	test   %edx,%edx
801043cb:	74 16                	je     801043e3 <acquiresleep+0x33>
801043cd:	8d 76 00             	lea    0x0(%esi),%esi
		sleep(lk, &lk->lk);
801043d0:	83 ec 08             	sub    $0x8,%esp
801043d3:	56                   	push   %esi
801043d4:	53                   	push   %ebx
801043d5:	e8 16 fd ff ff       	call   801040f0 <sleep>
	while (lk->locked) {
801043da:	8b 03                	mov    (%ebx),%eax
801043dc:	83 c4 10             	add    $0x10,%esp
801043df:	85 c0                	test   %eax,%eax
801043e1:	75 ed                	jne    801043d0 <acquiresleep+0x20>
	}
	lk->locked = 1;
801043e3:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
	lk->pid = myproc()->pid;
801043e9:	e8 f2 f5 ff ff       	call   801039e0 <myproc>
801043ee:	8b 40 10             	mov    0x10(%eax),%eax
801043f1:	89 43 3c             	mov    %eax,0x3c(%ebx)
	release(&lk->lk);
801043f4:	89 75 08             	mov    %esi,0x8(%ebp)
}
801043f7:	8d 65 f8             	lea    -0x8(%ebp),%esp
801043fa:	5b                   	pop    %ebx
801043fb:	5e                   	pop    %esi
801043fc:	5d                   	pop    %ebp
	release(&lk->lk);
801043fd:	e9 2e 02 00 00       	jmp    80104630 <release>
80104402:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80104409:	00 
8010440a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80104410 <releasesleep>:

void
releasesleep(struct sleeplock *lk)
{
80104410:	55                   	push   %ebp
80104411:	89 e5                	mov    %esp,%ebp
80104413:	56                   	push   %esi
80104414:	53                   	push   %ebx
80104415:	8b 5d 08             	mov    0x8(%ebp),%ebx
	acquire(&lk->lk);
80104418:	8d 73 04             	lea    0x4(%ebx),%esi
8010441b:	83 ec 0c             	sub    $0xc,%esp
8010441e:	56                   	push   %esi
8010441f:	e8 6c 02 00 00       	call   80104690 <acquire>
	lk->locked = 0;
80104424:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
	lk->pid = 0;
8010442a:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
	wakeup(lk);
80104431:	89 1c 24             	mov    %ebx,(%esp)
80104434:	e8 77 fd ff ff       	call   801041b0 <wakeup>
	release(&lk->lk);
80104439:	89 75 08             	mov    %esi,0x8(%ebp)
8010443c:	83 c4 10             	add    $0x10,%esp
}
8010443f:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104442:	5b                   	pop    %ebx
80104443:	5e                   	pop    %esi
80104444:	5d                   	pop    %ebp
	release(&lk->lk);
80104445:	e9 e6 01 00 00       	jmp    80104630 <release>
8010444a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80104450 <holdingsleep>:

int
holdingsleep(struct sleeplock *lk)
{
80104450:	55                   	push   %ebp
80104451:	89 e5                	mov    %esp,%ebp
80104453:	57                   	push   %edi
80104454:	31 ff                	xor    %edi,%edi
80104456:	56                   	push   %esi
80104457:	53                   	push   %ebx
80104458:	83 ec 18             	sub    $0x18,%esp
8010445b:	8b 5d 08             	mov    0x8(%ebp),%ebx
	int r;

	acquire(&lk->lk);
8010445e:	8d 73 04             	lea    0x4(%ebx),%esi
80104461:	56                   	push   %esi
80104462:	e8 29 02 00 00       	call   80104690 <acquire>
	r = lk->locked && (lk->pid == myproc()->pid);
80104467:	8b 03                	mov    (%ebx),%eax
80104469:	83 c4 10             	add    $0x10,%esp
8010446c:	85 c0                	test   %eax,%eax
8010446e:	75 18                	jne    80104488 <holdingsleep+0x38>
	release(&lk->lk);
80104470:	83 ec 0c             	sub    $0xc,%esp
80104473:	56                   	push   %esi
80104474:	e8 b7 01 00 00       	call   80104630 <release>
	return r;
}
80104479:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010447c:	89 f8                	mov    %edi,%eax
8010447e:	5b                   	pop    %ebx
8010447f:	5e                   	pop    %esi
80104480:	5f                   	pop    %edi
80104481:	5d                   	pop    %ebp
80104482:	c3                   	ret
80104483:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
	r = lk->locked && (lk->pid == myproc()->pid);
80104488:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
8010448b:	e8 50 f5 ff ff       	call   801039e0 <myproc>
80104490:	39 58 10             	cmp    %ebx,0x10(%eax)
80104493:	0f 94 c0             	sete   %al
80104496:	0f b6 c0             	movzbl %al,%eax
80104499:	89 c7                	mov    %eax,%edi
8010449b:	eb d3                	jmp    80104470 <holdingsleep+0x20>
8010449d:	66 90                	xchg   %ax,%ax
8010449f:	90                   	nop

801044a0 <initlock>:
#include "spinlock.h"
#include "console.h"

void
initlock(struct spinlock *lk, char *name)
{
801044a0:	55                   	push   %ebp
801044a1:	89 e5                	mov    %esp,%ebp
801044a3:	8b 45 08             	mov    0x8(%ebp),%eax
	lk->name = name;
801044a6:	8b 55 0c             	mov    0xc(%ebp),%edx
	lk->locked = 0;
801044a9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	lk->name = name;
801044af:	89 50 04             	mov    %edx,0x4(%eax)
	lk->cpu = 0;
801044b2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
801044b9:	5d                   	pop    %ebp
801044ba:	c3                   	ret
801044bb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

801044c0 <getcallerpcs>:
}

// Record the current call stack in pcs[] by following the %ebp chain.
void
getcallerpcs(void *v, uint pcs[])
{
801044c0:	55                   	push   %ebp
801044c1:	89 e5                	mov    %esp,%ebp
801044c3:	53                   	push   %ebx
801044c4:	8b 45 08             	mov    0x8(%ebp),%eax
801044c7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	uint *ebp;
	int i;

	ebp = (uint *)v - 2;
801044ca:	8d 50 f8             	lea    -0x8(%eax),%edx
	for (i = 0; i < 10; i++) {
		if (ebp == 0 || ebp < (uint *)KERNBASE || ebp == (uint *)0xffffffff)
801044cd:	05 f8 ff ff 7f       	add    $0x7ffffff8,%eax
801044d2:	3d fe ff ff 7f       	cmp    $0x7ffffffe,%eax
	for (i = 0; i < 10; i++) {
801044d7:	b8 00 00 00 00       	mov    $0x0,%eax
		if (ebp == 0 || ebp < (uint *)KERNBASE || ebp == (uint *)0xffffffff)
801044dc:	76 10                	jbe    801044ee <getcallerpcs+0x2e>
801044de:	eb 28                	jmp    80104508 <getcallerpcs+0x48>
801044e0:	8d 9a 00 00 00 80    	lea    -0x80000000(%edx),%ebx
801044e6:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
801044ec:	77 1a                	ja     80104508 <getcallerpcs+0x48>
			break;
		pcs[i] = ebp[1]; // saved %eip
801044ee:	8b 5a 04             	mov    0x4(%edx),%ebx
801044f1:	89 1c 81             	mov    %ebx,(%ecx,%eax,4)
	for (i = 0; i < 10; i++) {
801044f4:	83 c0 01             	add    $0x1,%eax
		ebp = (uint *)ebp[0]; // saved %ebp
801044f7:	8b 12                	mov    (%edx),%edx
	for (i = 0; i < 10; i++) {
801044f9:	83 f8 0a             	cmp    $0xa,%eax
801044fc:	75 e2                	jne    801044e0 <getcallerpcs+0x20>
	}
	for (; i < 10; i++)
		pcs[i] = 0;
}
801044fe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104501:	c9                   	leave
80104502:	c3                   	ret
80104503:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
80104508:	8d 04 81             	lea    (%ecx,%eax,4),%eax
8010450b:	83 c1 28             	add    $0x28,%ecx
8010450e:	89 ca                	mov    %ecx,%edx
80104510:	29 c2                	sub    %eax,%edx
80104512:	83 e2 04             	and    $0x4,%edx
80104515:	74 11                	je     80104528 <getcallerpcs+0x68>
		pcs[i] = 0;
80104517:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	for (; i < 10; i++)
8010451d:	83 c0 04             	add    $0x4,%eax
80104520:	39 c1                	cmp    %eax,%ecx
80104522:	74 da                	je     801044fe <getcallerpcs+0x3e>
80104524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
		pcs[i] = 0;
80104528:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	for (; i < 10; i++)
8010452e:	83 c0 08             	add    $0x8,%eax
		pcs[i] = 0;
80104531:	c7 40 fc 00 00 00 00 	movl   $0x0,-0x4(%eax)
	for (; i < 10; i++)
80104538:	39 c1                	cmp    %eax,%ecx
8010453a:	75 ec                	jne    80104528 <getcallerpcs+0x68>
8010453c:	eb c0                	jmp    801044fe <getcallerpcs+0x3e>
8010453e:	66 90                	xchg   %ax,%ax

80104540 <pushcli>:
// it takes two popcli to undo two pushcli.  Also, if interrupts
// are off, then pushcli, popcli leaves them off.

void
pushcli(void)
{
80104540:	55                   	push   %ebp
80104541:	89 e5                	mov    %esp,%ebp
80104543:	53                   	push   %ebx
80104544:	83 ec 04             	sub    $0x4,%esp
80104547:	9c                   	pushf
80104548:	5b                   	pop    %ebx
	__asm__ __volatile__("cli");
80104549:	fa                   	cli
	int eflags;

	eflags = readeflags();
	cli();
	if (mycpu()->ncli == 0)
8010454a:	e8 01 f4 ff ff       	call   80103950 <mycpu>
8010454f:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
80104555:	85 c0                	test   %eax,%eax
80104557:	74 17                	je     80104570 <pushcli+0x30>
		mycpu()->intena = eflags & FL_IF;
	mycpu()->ncli += 1;
80104559:	e8 f2 f3 ff ff       	call   80103950 <mycpu>
8010455e:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
}
80104565:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104568:	c9                   	leave
80104569:	c3                   	ret
8010456a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		mycpu()->intena = eflags & FL_IF;
80104570:	e8 db f3 ff ff       	call   80103950 <mycpu>
80104575:	81 e3 00 02 00 00    	and    $0x200,%ebx
8010457b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
80104581:	eb d6                	jmp    80104559 <pushcli+0x19>
80104583:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010458a:	00 
8010458b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

80104590 <popcli>:

void
popcli(void)
{
80104590:	55                   	push   %ebp
80104591:	89 e5                	mov    %esp,%ebp
80104593:	83 ec 08             	sub    $0x8,%esp
	__asm__ __volatile__("pushfl; popl %0" : "=r"(eflags));
80104596:	9c                   	pushf
80104597:	58                   	pop    %eax
	if (readeflags() & FL_IF)
80104598:	f6 c4 02             	test   $0x2,%ah
8010459b:	75 35                	jne    801045d2 <popcli+0x42>
		panic("popcli - interruptible");
	if (--mycpu()->ncli < 0)
8010459d:	e8 ae f3 ff ff       	call   80103950 <mycpu>
801045a2:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
801045a9:	78 34                	js     801045df <popcli+0x4f>
		panic("popcli");
	if (mycpu()->ncli == 0 && mycpu()->intena)
801045ab:	e8 a0 f3 ff ff       	call   80103950 <mycpu>
801045b0:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
801045b6:	85 d2                	test   %edx,%edx
801045b8:	74 06                	je     801045c0 <popcli+0x30>
		sti();
}
801045ba:	c9                   	leave
801045bb:	c3                   	ret
801045bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
	if (mycpu()->ncli == 0 && mycpu()->intena)
801045c0:	e8 8b f3 ff ff       	call   80103950 <mycpu>
801045c5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
801045cb:	85 c0                	test   %eax,%eax
801045cd:	74 eb                	je     801045ba <popcli+0x2a>
	__asm__ __volatile__("sti");
801045cf:	fb                   	sti
}
801045d0:	c9                   	leave
801045d1:	c3                   	ret
		panic("popcli - interruptible");
801045d2:	83 ec 0c             	sub    $0xc,%esp
801045d5:	68 e4 83 10 80       	push   $0x801083e4
801045da:	e8 a1 bd ff ff       	call   80100380 <panic>
		panic("popcli");
801045df:	83 ec 0c             	sub    $0xc,%esp
801045e2:	68 fb 83 10 80       	push   $0x801083fb
801045e7:	e8 94 bd ff ff       	call   80100380 <panic>
801045ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

801045f0 <holding>:
{
801045f0:	55                   	push   %ebp
801045f1:	89 e5                	mov    %esp,%ebp
801045f3:	56                   	push   %esi
801045f4:	53                   	push   %ebx
801045f5:	8b 75 08             	mov    0x8(%ebp),%esi
801045f8:	31 db                	xor    %ebx,%ebx
	pushcli();
801045fa:	e8 41 ff ff ff       	call   80104540 <pushcli>
	r = lock->locked && lock->cpu == mycpu();
801045ff:	8b 06                	mov    (%esi),%eax
80104601:	85 c0                	test   %eax,%eax
80104603:	75 0b                	jne    80104610 <holding+0x20>
	popcli();
80104605:	e8 86 ff ff ff       	call   80104590 <popcli>
}
8010460a:	89 d8                	mov    %ebx,%eax
8010460c:	5b                   	pop    %ebx
8010460d:	5e                   	pop    %esi
8010460e:	5d                   	pop    %ebp
8010460f:	c3                   	ret
	r = lock->locked && lock->cpu == mycpu();
80104610:	8b 5e 08             	mov    0x8(%esi),%ebx
80104613:	e8 38 f3 ff ff       	call   80103950 <mycpu>
80104618:	39 c3                	cmp    %eax,%ebx
8010461a:	0f 94 c3             	sete   %bl
	popcli();
8010461d:	e8 6e ff ff ff       	call   80104590 <popcli>
	r = lock->locked && lock->cpu == mycpu();
80104622:	0f b6 db             	movzbl %bl,%ebx
}
80104625:	89 d8                	mov    %ebx,%eax
80104627:	5b                   	pop    %ebx
80104628:	5e                   	pop    %esi
80104629:	5d                   	pop    %ebp
8010462a:	c3                   	ret
8010462b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

80104630 <release>:
{
80104630:	55                   	push   %ebp
80104631:	89 e5                	mov    %esp,%ebp
80104633:	56                   	push   %esi
80104634:	53                   	push   %ebx
80104635:	8b 5d 08             	mov    0x8(%ebp),%ebx
	pushcli();
80104638:	e8 03 ff ff ff       	call   80104540 <pushcli>
	r = lock->locked && lock->cpu == mycpu();
8010463d:	8b 03                	mov    (%ebx),%eax
8010463f:	85 c0                	test   %eax,%eax
80104641:	75 15                	jne    80104658 <release+0x28>
	popcli();
80104643:	e8 48 ff ff ff       	call   80104590 <popcli>
		panic("release");
80104648:	83 ec 0c             	sub    $0xc,%esp
8010464b:	68 02 84 10 80       	push   $0x80108402
80104650:	e8 2b bd ff ff       	call   80100380 <panic>
80104655:	8d 76 00             	lea    0x0(%esi),%esi
	r = lock->locked && lock->cpu == mycpu();
80104658:	8b 73 08             	mov    0x8(%ebx),%esi
8010465b:	e8 f0 f2 ff ff       	call   80103950 <mycpu>
80104660:	39 c6                	cmp    %eax,%esi
80104662:	75 df                	jne    80104643 <release+0x13>
	popcli();
80104664:	e8 27 ff ff ff       	call   80104590 <popcli>
	lk->pcs[0] = 0;
80104669:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
	lk->cpu = 0;
80104670:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
	__sync_synchronize();
80104677:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
	__asm__ __volatile__("movl $0, %0" : "+m"(lk->locked) :);
8010467c:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
}
80104682:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104685:	5b                   	pop    %ebx
80104686:	5e                   	pop    %esi
80104687:	5d                   	pop    %ebp
	popcli();
80104688:	e9 03 ff ff ff       	jmp    80104590 <popcli>
8010468d:	8d 76 00             	lea    0x0(%esi),%esi

80104690 <acquire>:
{
80104690:	55                   	push   %ebp
80104691:	89 e5                	mov    %esp,%ebp
80104693:	53                   	push   %ebx
80104694:	83 ec 04             	sub    $0x4,%esp
	pushcli(); // disable interrupts to avoid deadlock.
80104697:	e8 a4 fe ff ff       	call   80104540 <pushcli>
	if (holding(lk))
8010469c:	8b 5d 08             	mov    0x8(%ebp),%ebx
	pushcli();
8010469f:	e8 9c fe ff ff       	call   80104540 <pushcli>
	r = lock->locked && lock->cpu == mycpu();
801046a4:	8b 03                	mov    (%ebx),%eax
801046a6:	85 c0                	test   %eax,%eax
801046a8:	0f 85 b2 00 00 00    	jne    80104760 <acquire+0xd0>
	popcli();
801046ae:	e8 dd fe ff ff       	call   80104590 <popcli>
	__asm__ __volatile__("lock; xchgl %0, %1"
801046b3:	b9 01 00 00 00       	mov    $0x1,%ecx
801046b8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801046bf:	00 
	while (xchg(&lk->locked, 1) != 0)
801046c0:	8b 55 08             	mov    0x8(%ebp),%edx
801046c3:	89 c8                	mov    %ecx,%eax
801046c5:	f0 87 02             	lock xchg %eax,(%edx)
801046c8:	85 c0                	test   %eax,%eax
801046ca:	75 f4                	jne    801046c0 <acquire+0x30>
	__sync_synchronize();
801046cc:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
	lk->cpu = mycpu();
801046d1:	8b 5d 08             	mov    0x8(%ebp),%ebx
801046d4:	e8 77 f2 ff ff       	call   80103950 <mycpu>
	getcallerpcs(&lk, lk->pcs);
801046d9:	8b 4d 08             	mov    0x8(%ebp),%ecx
	for (i = 0; i < 10; i++) {
801046dc:	31 d2                	xor    %edx,%edx
	lk->cpu = mycpu();
801046de:	89 43 08             	mov    %eax,0x8(%ebx)
		if (ebp == 0 || ebp < (uint *)KERNBASE || ebp == (uint *)0xffffffff)
801046e1:	8d 85 00 00 00 80    	lea    -0x80000000(%ebp),%eax
801046e7:	3d fe ff ff 7f       	cmp    $0x7ffffffe,%eax
801046ec:	77 32                	ja     80104720 <acquire+0x90>
	ebp = (uint *)v - 2;
801046ee:	89 e8                	mov    %ebp,%eax
801046f0:	eb 14                	jmp    80104706 <acquire+0x76>
801046f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		if (ebp == 0 || ebp < (uint *)KERNBASE || ebp == (uint *)0xffffffff)
801046f8:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
801046fe:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
80104704:	77 1a                	ja     80104720 <acquire+0x90>
		pcs[i] = ebp[1]; // saved %eip
80104706:	8b 58 04             	mov    0x4(%eax),%ebx
80104709:	89 5c 91 0c          	mov    %ebx,0xc(%ecx,%edx,4)
	for (i = 0; i < 10; i++) {
8010470d:	83 c2 01             	add    $0x1,%edx
		ebp = (uint *)ebp[0]; // saved %ebp
80104710:	8b 00                	mov    (%eax),%eax
	for (i = 0; i < 10; i++) {
80104712:	83 fa 0a             	cmp    $0xa,%edx
80104715:	75 e1                	jne    801046f8 <acquire+0x68>
}
80104717:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010471a:	c9                   	leave
8010471b:	c3                   	ret
8010471c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
80104720:	8d 44 91 0c          	lea    0xc(%ecx,%edx,4),%eax
80104724:	83 c1 34             	add    $0x34,%ecx
80104727:	89 ca                	mov    %ecx,%edx
80104729:	29 c2                	sub    %eax,%edx
8010472b:	83 e2 04             	and    $0x4,%edx
8010472e:	74 10                	je     80104740 <acquire+0xb0>
		pcs[i] = 0;
80104730:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	for (; i < 10; i++)
80104736:	83 c0 04             	add    $0x4,%eax
80104739:	39 c1                	cmp    %eax,%ecx
8010473b:	74 da                	je     80104717 <acquire+0x87>
8010473d:	8d 76 00             	lea    0x0(%esi),%esi
		pcs[i] = 0;
80104740:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	for (; i < 10; i++)
80104746:	83 c0 08             	add    $0x8,%eax
		pcs[i] = 0;
80104749:	c7 40 fc 00 00 00 00 	movl   $0x0,-0x4(%eax)
	for (; i < 10; i++)
80104750:	39 c1                	cmp    %eax,%ecx
80104752:	75 ec                	jne    80104740 <acquire+0xb0>
80104754:	eb c1                	jmp    80104717 <acquire+0x87>
80104756:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010475d:	00 
8010475e:	66 90                	xchg   %ax,%ax
	r = lock->locked && lock->cpu == mycpu();
80104760:	8b 5b 08             	mov    0x8(%ebx),%ebx
80104763:	e8 e8 f1 ff ff       	call   80103950 <mycpu>
80104768:	39 c3                	cmp    %eax,%ebx
8010476a:	0f 85 3e ff ff ff    	jne    801046ae <acquire+0x1e>
	popcli();
80104770:	e8 1b fe ff ff       	call   80104590 <popcli>
		panic("acquire");
80104775:	83 ec 0c             	sub    $0xc,%esp
80104778:	68 0a 84 10 80       	push   $0x8010840a
8010477d:	e8 fe bb ff ff       	call   80100380 <panic>
80104782:	66 90                	xchg   %ax,%ax
80104784:	66 90                	xchg   %ax,%ax
80104786:	66 90                	xchg   %ax,%ax
80104788:	66 90                	xchg   %ax,%ax
8010478a:	66 90                	xchg   %ax,%ax
8010478c:	66 90                	xchg   %ax,%ax
8010478e:	66 90                	xchg   %ax,%ax

80104790 <memset>:
#include "kernel_string.h"
#include "x86.h"

void *
memset(void *dst, int c, uint n)
{
80104790:	55                   	push   %ebp
80104791:	89 e5                	mov    %esp,%ebp
80104793:	57                   	push   %edi
80104794:	8b 55 08             	mov    0x8(%ebp),%edx
80104797:	8b 4d 10             	mov    0x10(%ebp),%ecx
	if ((int)dst % 4 == 0 && n % 4 == 0) {
8010479a:	89 d0                	mov    %edx,%eax
8010479c:	09 c8                	or     %ecx,%eax
8010479e:	a8 03                	test   $0x3,%al
801047a0:	75 1e                	jne    801047c0 <memset+0x30>
		c &= 0xFF;
801047a2:	0f b6 45 0c          	movzbl 0xc(%ebp),%eax
		stosl(dst, (c << 24) | (c << 16) | (c << 8) | c, n / 4);
801047a6:	c1 e9 02             	shr    $0x2,%ecx
	__asm__ __volatile__("cld; rep stosl"
801047a9:	89 d7                	mov    %edx,%edi
801047ab:	69 c0 01 01 01 01    	imul   $0x1010101,%eax,%eax
801047b1:	fc                   	cld
801047b2:	f3 ab                	rep stos %eax,%es:(%edi)
	} else
		stosb(dst, c, n);
	return dst;
}
801047b4:	8b 7d fc             	mov    -0x4(%ebp),%edi
801047b7:	89 d0                	mov    %edx,%eax
801047b9:	c9                   	leave
801047ba:	c3                   	ret
801047bb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
	__asm__ __volatile__("cld; rep stosb"
801047c0:	8b 45 0c             	mov    0xc(%ebp),%eax
801047c3:	89 d7                	mov    %edx,%edi
801047c5:	fc                   	cld
801047c6:	f3 aa                	rep stos %al,%es:(%edi)
801047c8:	8b 7d fc             	mov    -0x4(%ebp),%edi
801047cb:	89 d0                	mov    %edx,%eax
801047cd:	c9                   	leave
801047ce:	c3                   	ret
801047cf:	90                   	nop

801047d0 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint n)
{
801047d0:	55                   	push   %ebp
801047d1:	89 e5                	mov    %esp,%ebp
801047d3:	56                   	push   %esi
801047d4:	8b 75 10             	mov    0x10(%ebp),%esi
801047d7:	8b 45 08             	mov    0x8(%ebp),%eax
801047da:	53                   	push   %ebx
801047db:	8b 55 0c             	mov    0xc(%ebp),%edx
	const uchar *s1, *s2;

	s1 = v1;
	s2 = v2;
	while (n-- > 0) {
801047de:	85 f6                	test   %esi,%esi
801047e0:	74 2e                	je     80104810 <memcmp+0x40>
801047e2:	01 c6                	add    %eax,%esi
801047e4:	eb 14                	jmp    801047fa <memcmp+0x2a>
801047e6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801047ed:	00 
801047ee:	66 90                	xchg   %ax,%ax
		if (*s1 != *s2)
			return *s1 - *s2;
		s1++, s2++;
801047f0:	83 c0 01             	add    $0x1,%eax
801047f3:	83 c2 01             	add    $0x1,%edx
	while (n-- > 0) {
801047f6:	39 f0                	cmp    %esi,%eax
801047f8:	74 16                	je     80104810 <memcmp+0x40>
		if (*s1 != *s2)
801047fa:	0f b6 08             	movzbl (%eax),%ecx
801047fd:	0f b6 1a             	movzbl (%edx),%ebx
80104800:	38 d9                	cmp    %bl,%cl
80104802:	74 ec                	je     801047f0 <memcmp+0x20>
			return *s1 - *s2;
80104804:	0f b6 c1             	movzbl %cl,%eax
80104807:	29 d8                	sub    %ebx,%eax
	}

	return 0;
}
80104809:	5b                   	pop    %ebx
8010480a:	5e                   	pop    %esi
8010480b:	5d                   	pop    %ebp
8010480c:	c3                   	ret
8010480d:	8d 76 00             	lea    0x0(%esi),%esi
80104810:	5b                   	pop    %ebx
	return 0;
80104811:	31 c0                	xor    %eax,%eax
}
80104813:	5e                   	pop    %esi
80104814:	5d                   	pop    %ebp
80104815:	c3                   	ret
80104816:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010481d:	00 
8010481e:	66 90                	xchg   %ax,%ax

80104820 <memmove>:

void *
memmove(void *dst, const void *src, uint n)
{
80104820:	55                   	push   %ebp
80104821:	89 e5                	mov    %esp,%ebp
80104823:	57                   	push   %edi
80104824:	8b 55 08             	mov    0x8(%ebp),%edx
80104827:	8b 45 10             	mov    0x10(%ebp),%eax
8010482a:	56                   	push   %esi
8010482b:	8b 75 0c             	mov    0xc(%ebp),%esi
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
8010482e:	39 d6                	cmp    %edx,%esi
80104830:	73 26                	jae    80104858 <memmove+0x38>
80104832:	8d 0c 06             	lea    (%esi,%eax,1),%ecx
80104835:	39 ca                	cmp    %ecx,%edx
80104837:	73 1f                	jae    80104858 <memmove+0x38>
		s += n;
		d += n;
		while (n-- > 0)
80104839:	85 c0                	test   %eax,%eax
8010483b:	74 0f                	je     8010484c <memmove+0x2c>
8010483d:	83 e8 01             	sub    $0x1,%eax
			*--d = *--s;
80104840:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
80104844:	88 0c 02             	mov    %cl,(%edx,%eax,1)
		while (n-- > 0)
80104847:	83 e8 01             	sub    $0x1,%eax
8010484a:	73 f4                	jae    80104840 <memmove+0x20>
	} else
		while (n-- > 0)
			*d++ = *s++;

	return dst;
}
8010484c:	5e                   	pop    %esi
8010484d:	89 d0                	mov    %edx,%eax
8010484f:	5f                   	pop    %edi
80104850:	5d                   	pop    %ebp
80104851:	c3                   	ret
80104852:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		while (n-- > 0)
80104858:	8d 0c 06             	lea    (%esi,%eax,1),%ecx
8010485b:	89 d7                	mov    %edx,%edi
8010485d:	85 c0                	test   %eax,%eax
8010485f:	74 eb                	je     8010484c <memmove+0x2c>
80104861:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
			*d++ = *s++;
80104868:	a4                   	movsb  %ds:(%esi),%es:(%edi)
		while (n-- > 0)
80104869:	39 ce                	cmp    %ecx,%esi
8010486b:	75 fb                	jne    80104868 <memmove+0x48>
}
8010486d:	5e                   	pop    %esi
8010486e:	89 d0                	mov    %edx,%eax
80104870:	5f                   	pop    %edi
80104871:	5d                   	pop    %ebp
80104872:	c3                   	ret
80104873:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010487a:	00 
8010487b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

80104880 <memcpy>:

// memcpy exists to placate GCC.  Use memmove.
void *
memcpy(void *dst, const void *src, uint n)
{
	return memmove(dst, src, n);
80104880:	eb 9e                	jmp    80104820 <memmove>
80104882:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80104889:	00 
8010488a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80104890 <strncmp>:
}

int
strncmp(const char *p, const char *q, uint n)
{
80104890:	55                   	push   %ebp
80104891:	89 e5                	mov    %esp,%ebp
80104893:	53                   	push   %ebx
80104894:	8b 55 10             	mov    0x10(%ebp),%edx
80104897:	8b 45 08             	mov    0x8(%ebp),%eax
8010489a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
	while (n > 0 && *p && *p == *q)
8010489d:	85 d2                	test   %edx,%edx
8010489f:	75 16                	jne    801048b7 <strncmp+0x27>
801048a1:	eb 2d                	jmp    801048d0 <strncmp+0x40>
801048a3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
801048a8:	3a 19                	cmp    (%ecx),%bl
801048aa:	75 12                	jne    801048be <strncmp+0x2e>
		n--, p++, q++;
801048ac:	83 c0 01             	add    $0x1,%eax
801048af:	83 c1 01             	add    $0x1,%ecx
	while (n > 0 && *p && *p == *q)
801048b2:	83 ea 01             	sub    $0x1,%edx
801048b5:	74 19                	je     801048d0 <strncmp+0x40>
801048b7:	0f b6 18             	movzbl (%eax),%ebx
801048ba:	84 db                	test   %bl,%bl
801048bc:	75 ea                	jne    801048a8 <strncmp+0x18>
	if (n == 0)
		return 0;
	return (uchar)*p - (uchar)*q;
801048be:	0f b6 00             	movzbl (%eax),%eax
801048c1:	0f b6 11             	movzbl (%ecx),%edx
}
801048c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801048c7:	c9                   	leave
	return (uchar)*p - (uchar)*q;
801048c8:	29 d0                	sub    %edx,%eax
}
801048ca:	c3                   	ret
801048cb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
801048d0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
		return 0;
801048d3:	31 c0                	xor    %eax,%eax
}
801048d5:	c9                   	leave
801048d6:	c3                   	ret
801048d7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801048de:	00 
801048df:	90                   	nop

801048e0 <strncpy>:

char *
strncpy(char *s, const char *t, int n)
{
801048e0:	55                   	push   %ebp
801048e1:	89 e5                	mov    %esp,%ebp
801048e3:	57                   	push   %edi
801048e4:	56                   	push   %esi
801048e5:	8b 75 08             	mov    0x8(%ebp),%esi
801048e8:	53                   	push   %ebx
801048e9:	8b 55 10             	mov    0x10(%ebp),%edx
	char *os;

	os = s;
	while (n-- > 0 && (*s++ = *t++) != 0)
801048ec:	89 f0                	mov    %esi,%eax
801048ee:	eb 15                	jmp    80104905 <strncpy+0x25>
801048f0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
801048f4:	8b 7d 0c             	mov    0xc(%ebp),%edi
801048f7:	83 c0 01             	add    $0x1,%eax
801048fa:	0f b6 4f ff          	movzbl -0x1(%edi),%ecx
801048fe:	88 48 ff             	mov    %cl,-0x1(%eax)
80104901:	84 c9                	test   %cl,%cl
80104903:	74 13                	je     80104918 <strncpy+0x38>
80104905:	89 d3                	mov    %edx,%ebx
80104907:	83 ea 01             	sub    $0x1,%edx
8010490a:	85 db                	test   %ebx,%ebx
8010490c:	7f e2                	jg     801048f0 <strncpy+0x10>
		;
	while (n-- > 0)
		*s++ = 0;
	return os;
}
8010490e:	5b                   	pop    %ebx
8010490f:	89 f0                	mov    %esi,%eax
80104911:	5e                   	pop    %esi
80104912:	5f                   	pop    %edi
80104913:	5d                   	pop    %ebp
80104914:	c3                   	ret
80104915:	8d 76 00             	lea    0x0(%esi),%esi
	while (n-- > 0)
80104918:	8d 0c 18             	lea    (%eax,%ebx,1),%ecx
8010491b:	83 e9 01             	sub    $0x1,%ecx
8010491e:	85 d2                	test   %edx,%edx
80104920:	74 ec                	je     8010490e <strncpy+0x2e>
80104922:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		*s++ = 0;
80104928:	83 c0 01             	add    $0x1,%eax
8010492b:	89 ca                	mov    %ecx,%edx
8010492d:	c6 40 ff 00          	movb   $0x0,-0x1(%eax)
	while (n-- > 0)
80104931:	29 c2                	sub    %eax,%edx
80104933:	85 d2                	test   %edx,%edx
80104935:	7f f1                	jg     80104928 <strncpy+0x48>
}
80104937:	5b                   	pop    %ebx
80104938:	89 f0                	mov    %esi,%eax
8010493a:	5e                   	pop    %esi
8010493b:	5f                   	pop    %edi
8010493c:	5d                   	pop    %ebp
8010493d:	c3                   	ret
8010493e:	66 90                	xchg   %ax,%ax

80104940 <safestrcpy>:

// Like strncpy but guaranteed to NUL-terminate.
char *
safestrcpy(char *s, const char *t, int n)
{
80104940:	55                   	push   %ebp
80104941:	89 e5                	mov    %esp,%ebp
80104943:	56                   	push   %esi
80104944:	8b 55 10             	mov    0x10(%ebp),%edx
80104947:	8b 75 08             	mov    0x8(%ebp),%esi
8010494a:	53                   	push   %ebx
8010494b:	8b 45 0c             	mov    0xc(%ebp),%eax
	char *os;

	os = s;
	if (n <= 0)
8010494e:	85 d2                	test   %edx,%edx
80104950:	7e 25                	jle    80104977 <safestrcpy+0x37>
80104952:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
80104956:	89 f2                	mov    %esi,%edx
80104958:	eb 16                	jmp    80104970 <safestrcpy+0x30>
8010495a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		return os;
	while (--n > 0 && (*s++ = *t++) != 0)
80104960:	0f b6 08             	movzbl (%eax),%ecx
80104963:	83 c0 01             	add    $0x1,%eax
80104966:	83 c2 01             	add    $0x1,%edx
80104969:	88 4a ff             	mov    %cl,-0x1(%edx)
8010496c:	84 c9                	test   %cl,%cl
8010496e:	74 04                	je     80104974 <safestrcpy+0x34>
80104970:	39 d8                	cmp    %ebx,%eax
80104972:	75 ec                	jne    80104960 <safestrcpy+0x20>
		;
	*s = 0;
80104974:	c6 02 00             	movb   $0x0,(%edx)
	return os;
}
80104977:	89 f0                	mov    %esi,%eax
80104979:	5b                   	pop    %ebx
8010497a:	5e                   	pop    %esi
8010497b:	5d                   	pop    %ebp
8010497c:	c3                   	ret
8010497d:	8d 76 00             	lea    0x0(%esi),%esi

80104980 <strlen>:

uint
strlen(const char *s)
{
80104980:	55                   	push   %ebp
80104981:	89 e5                	mov    %esp,%ebp
80104983:	8b 55 08             	mov    0x8(%ebp),%edx
	int n;

	for (n = 0; s[n]; n++)
80104986:	80 3a 00             	cmpb   $0x0,(%edx)
80104989:	74 15                	je     801049a0 <strlen+0x20>
8010498b:	31 c0                	xor    %eax,%eax
8010498d:	8d 76 00             	lea    0x0(%esi),%esi
80104990:	83 c0 01             	add    $0x1,%eax
80104993:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
80104997:	89 c1                	mov    %eax,%ecx
80104999:	75 f5                	jne    80104990 <strlen+0x10>
		;
	return n;
}
8010499b:	89 c8                	mov    %ecx,%eax
8010499d:	5d                   	pop    %ebp
8010499e:	c3                   	ret
8010499f:	90                   	nop
	for (n = 0; s[n]; n++)
801049a0:	31 c9                	xor    %ecx,%ecx
}
801049a2:	5d                   	pop    %ebp
801049a3:	89 c8                	mov    %ecx,%eax
801049a5:	c3                   	ret
801049a6:	66 90                	xchg   %ax,%ax
801049a8:	66 90                	xchg   %ax,%ax
801049aa:	66 90                	xchg   %ax,%ax
801049ac:	66 90                	xchg   %ax,%ax
801049ae:	66 90                	xchg   %ax,%ax

801049b0 <fetchint>:
// to a saved program counter, and then the first argument.

// Fetch the int at addr from the current process.
int
fetchint(uint addr, int *ip)
{
801049b0:	55                   	push   %ebp
801049b1:	89 e5                	mov    %esp,%ebp
801049b3:	53                   	push   %ebx
801049b4:	83 ec 04             	sub    $0x4,%esp
801049b7:	8b 5d 08             	mov    0x8(%ebp),%ebx
	struct proc *curproc = myproc();
801049ba:	e8 21 f0 ff ff       	call   801039e0 <myproc>

	if (addr >= curproc->sz || addr + 4 > curproc->sz)
801049bf:	8b 00                	mov    (%eax),%eax
801049c1:	39 c3                	cmp    %eax,%ebx
801049c3:	73 1b                	jae    801049e0 <fetchint+0x30>
801049c5:	8d 53 04             	lea    0x4(%ebx),%edx
801049c8:	39 d0                	cmp    %edx,%eax
801049ca:	72 14                	jb     801049e0 <fetchint+0x30>
		return -1;
	*ip = *(int *)(addr);
801049cc:	8b 45 0c             	mov    0xc(%ebp),%eax
801049cf:	8b 13                	mov    (%ebx),%edx
801049d1:	89 10                	mov    %edx,(%eax)
	return 0;
801049d3:	31 c0                	xor    %eax,%eax
}
801049d5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801049d8:	c9                   	leave
801049d9:	c3                   	ret
801049da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		return -1;
801049e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
801049e5:	eb ee                	jmp    801049d5 <fetchint+0x25>
801049e7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801049ee:	00 
801049ef:	90                   	nop

801049f0 <fetchstr>:
// Fetch the nul-terminated string at addr from the current process.
// Doesn't actually copy the string - just sets *pp to point at it.
// Returns length of string, not including nul.
int
fetchstr(uint addr, char **pp)
{
801049f0:	55                   	push   %ebp
801049f1:	89 e5                	mov    %esp,%ebp
801049f3:	53                   	push   %ebx
801049f4:	83 ec 04             	sub    $0x4,%esp
801049f7:	8b 5d 08             	mov    0x8(%ebp),%ebx
	char *s, *ep;
	struct proc *curproc = myproc();
801049fa:	e8 e1 ef ff ff       	call   801039e0 <myproc>

	if (addr >= curproc->sz)
801049ff:	3b 18                	cmp    (%eax),%ebx
80104a01:	73 2d                	jae    80104a30 <fetchstr+0x40>
		return -1;
	*pp = (char *)addr;
80104a03:	8b 55 0c             	mov    0xc(%ebp),%edx
80104a06:	89 1a                	mov    %ebx,(%edx)
	ep = (char *)curproc->sz;
80104a08:	8b 10                	mov    (%eax),%edx
	for (s = *pp; s < ep; s++) {
80104a0a:	39 d3                	cmp    %edx,%ebx
80104a0c:	73 22                	jae    80104a30 <fetchstr+0x40>
80104a0e:	89 d8                	mov    %ebx,%eax
80104a10:	eb 0d                	jmp    80104a1f <fetchstr+0x2f>
80104a12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80104a18:	83 c0 01             	add    $0x1,%eax
80104a1b:	39 d0                	cmp    %edx,%eax
80104a1d:	73 11                	jae    80104a30 <fetchstr+0x40>
		if (*s == 0)
80104a1f:	80 38 00             	cmpb   $0x0,(%eax)
80104a22:	75 f4                	jne    80104a18 <fetchstr+0x28>
			return s - *pp;
80104a24:	29 d8                	sub    %ebx,%eax
	}
	return -1;
}
80104a26:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80104a29:	c9                   	leave
80104a2a:	c3                   	ret
80104a2b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
80104a30:	8b 5d fc             	mov    -0x4(%ebp),%ebx
		return -1;
80104a33:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80104a38:	c9                   	leave
80104a39:	c3                   	ret
80104a3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80104a40 <argint>:

// Fetch the nth 32-bit system call argument.
int
argint(int n, int *ip)
{
80104a40:	55                   	push   %ebp
80104a41:	89 e5                	mov    %esp,%ebp
80104a43:	56                   	push   %esi
80104a44:	53                   	push   %ebx
	return fetchint((myproc()->tf->esp) + 4 + 4 * n, ip);
80104a45:	e8 96 ef ff ff       	call   801039e0 <myproc>
80104a4a:	8b 55 08             	mov    0x8(%ebp),%edx
80104a4d:	8b 40 1c             	mov    0x1c(%eax),%eax
80104a50:	8b 40 44             	mov    0x44(%eax),%eax
80104a53:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
	struct proc *curproc = myproc();
80104a56:	e8 85 ef ff ff       	call   801039e0 <myproc>
	return fetchint((myproc()->tf->esp) + 4 + 4 * n, ip);
80104a5b:	8d 73 04             	lea    0x4(%ebx),%esi
	if (addr >= curproc->sz || addr + 4 > curproc->sz)
80104a5e:	8b 00                	mov    (%eax),%eax
80104a60:	39 c6                	cmp    %eax,%esi
80104a62:	73 1c                	jae    80104a80 <argint+0x40>
80104a64:	8d 53 08             	lea    0x8(%ebx),%edx
80104a67:	39 d0                	cmp    %edx,%eax
80104a69:	72 15                	jb     80104a80 <argint+0x40>
	*ip = *(int *)(addr);
80104a6b:	8b 45 0c             	mov    0xc(%ebp),%eax
80104a6e:	8b 53 04             	mov    0x4(%ebx),%edx
80104a71:	89 10                	mov    %edx,(%eax)
	return 0;
80104a73:	31 c0                	xor    %eax,%eax
}
80104a75:	5b                   	pop    %ebx
80104a76:	5e                   	pop    %esi
80104a77:	5d                   	pop    %ebp
80104a78:	c3                   	ret
80104a79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		return -1;
80104a80:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	return fetchint((myproc()->tf->esp) + 4 + 4 * n, ip);
80104a85:	eb ee                	jmp    80104a75 <argint+0x35>
80104a87:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80104a8e:	00 
80104a8f:	90                   	nop

80104a90 <argptr>:
// Fetch the nth word-sized system call argument as a pointer
// to a block of memory of size bytes.  Check that the pointer
// lies within the process address space.
int
argptr(int n, char **pp, int size)
{
80104a90:	55                   	push   %ebp
80104a91:	89 e5                	mov    %esp,%ebp
80104a93:	57                   	push   %edi
80104a94:	56                   	push   %esi
80104a95:	53                   	push   %ebx
80104a96:	83 ec 0c             	sub    $0xc,%esp
	int i;
	struct proc *curproc = myproc();
80104a99:	e8 42 ef ff ff       	call   801039e0 <myproc>
80104a9e:	89 c6                	mov    %eax,%esi
	return fetchint((myproc()->tf->esp) + 4 + 4 * n, ip);
80104aa0:	e8 3b ef ff ff       	call   801039e0 <myproc>
80104aa5:	8b 55 08             	mov    0x8(%ebp),%edx
80104aa8:	8b 40 1c             	mov    0x1c(%eax),%eax
80104aab:	8b 40 44             	mov    0x44(%eax),%eax
80104aae:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
	struct proc *curproc = myproc();
80104ab1:	e8 2a ef ff ff       	call   801039e0 <myproc>
	return fetchint((myproc()->tf->esp) + 4 + 4 * n, ip);
80104ab6:	8d 7b 04             	lea    0x4(%ebx),%edi
	if (addr >= curproc->sz || addr + 4 > curproc->sz)
80104ab9:	8b 00                	mov    (%eax),%eax
80104abb:	39 c7                	cmp    %eax,%edi
80104abd:	73 31                	jae    80104af0 <argptr+0x60>
80104abf:	8d 4b 08             	lea    0x8(%ebx),%ecx
80104ac2:	39 c8                	cmp    %ecx,%eax
80104ac4:	72 2a                	jb     80104af0 <argptr+0x60>

	if (argint(n, &i) < 0)
		return -1;
	if (size < 0 || (uint)i >= curproc->sz || (uint)i + size > curproc->sz)
80104ac6:	8b 55 10             	mov    0x10(%ebp),%edx
	*ip = *(int *)(addr);
80104ac9:	8b 43 04             	mov    0x4(%ebx),%eax
	if (size < 0 || (uint)i >= curproc->sz || (uint)i + size > curproc->sz)
80104acc:	85 d2                	test   %edx,%edx
80104ace:	78 20                	js     80104af0 <argptr+0x60>
80104ad0:	8b 16                	mov    (%esi),%edx
80104ad2:	39 d0                	cmp    %edx,%eax
80104ad4:	73 1a                	jae    80104af0 <argptr+0x60>
80104ad6:	8b 5d 10             	mov    0x10(%ebp),%ebx
80104ad9:	01 c3                	add    %eax,%ebx
80104adb:	39 da                	cmp    %ebx,%edx
80104add:	72 11                	jb     80104af0 <argptr+0x60>
		return -1;
	*pp = (char *)i;
80104adf:	8b 55 0c             	mov    0xc(%ebp),%edx
80104ae2:	89 02                	mov    %eax,(%edx)
	return 0;
80104ae4:	31 c0                	xor    %eax,%eax
}
80104ae6:	83 c4 0c             	add    $0xc,%esp
80104ae9:	5b                   	pop    %ebx
80104aea:	5e                   	pop    %esi
80104aeb:	5f                   	pop    %edi
80104aec:	5d                   	pop    %ebp
80104aed:	c3                   	ret
80104aee:	66 90                	xchg   %ax,%ax
		return -1;
80104af0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104af5:	eb ef                	jmp    80104ae6 <argptr+0x56>
80104af7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80104afe:	00 
80104aff:	90                   	nop

80104b00 <argstr>:
// Check that the pointer is valid and the string is nul-terminated.
// (There is no shared writable memory, so the string can't change
// between this check and being used by the kernel.)
int
argstr(int n, char **pp)
{
80104b00:	55                   	push   %ebp
80104b01:	89 e5                	mov    %esp,%ebp
80104b03:	56                   	push   %esi
80104b04:	53                   	push   %ebx
	return fetchint((myproc()->tf->esp) + 4 + 4 * n, ip);
80104b05:	e8 d6 ee ff ff       	call   801039e0 <myproc>
80104b0a:	8b 55 08             	mov    0x8(%ebp),%edx
80104b0d:	8b 40 1c             	mov    0x1c(%eax),%eax
80104b10:	8b 40 44             	mov    0x44(%eax),%eax
80104b13:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
	struct proc *curproc = myproc();
80104b16:	e8 c5 ee ff ff       	call   801039e0 <myproc>
	return fetchint((myproc()->tf->esp) + 4 + 4 * n, ip);
80104b1b:	8d 73 04             	lea    0x4(%ebx),%esi
	if (addr >= curproc->sz || addr + 4 > curproc->sz)
80104b1e:	8b 00                	mov    (%eax),%eax
80104b20:	39 c6                	cmp    %eax,%esi
80104b22:	73 44                	jae    80104b68 <argstr+0x68>
80104b24:	8d 53 08             	lea    0x8(%ebx),%edx
80104b27:	39 d0                	cmp    %edx,%eax
80104b29:	72 3d                	jb     80104b68 <argstr+0x68>
	*ip = *(int *)(addr);
80104b2b:	8b 5b 04             	mov    0x4(%ebx),%ebx
	struct proc *curproc = myproc();
80104b2e:	e8 ad ee ff ff       	call   801039e0 <myproc>
	if (addr >= curproc->sz)
80104b33:	3b 18                	cmp    (%eax),%ebx
80104b35:	73 31                	jae    80104b68 <argstr+0x68>
	*pp = (char *)addr;
80104b37:	8b 55 0c             	mov    0xc(%ebp),%edx
80104b3a:	89 1a                	mov    %ebx,(%edx)
	ep = (char *)curproc->sz;
80104b3c:	8b 10                	mov    (%eax),%edx
	for (s = *pp; s < ep; s++) {
80104b3e:	39 d3                	cmp    %edx,%ebx
80104b40:	73 26                	jae    80104b68 <argstr+0x68>
80104b42:	89 d8                	mov    %ebx,%eax
80104b44:	eb 11                	jmp    80104b57 <argstr+0x57>
80104b46:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80104b4d:	00 
80104b4e:	66 90                	xchg   %ax,%ax
80104b50:	83 c0 01             	add    $0x1,%eax
80104b53:	39 d0                	cmp    %edx,%eax
80104b55:	73 11                	jae    80104b68 <argstr+0x68>
		if (*s == 0)
80104b57:	80 38 00             	cmpb   $0x0,(%eax)
80104b5a:	75 f4                	jne    80104b50 <argstr+0x50>
			return s - *pp;
80104b5c:	29 d8                	sub    %ebx,%eax
	int addr;
	if (argint(n, &addr) < 0)
		return -1;
	return fetchstr(addr, pp);
}
80104b5e:	5b                   	pop    %ebx
80104b5f:	5e                   	pop    %esi
80104b60:	5d                   	pop    %ebp
80104b61:	c3                   	ret
80104b62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80104b68:	5b                   	pop    %ebx
		return -1;
80104b69:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80104b6e:	5e                   	pop    %esi
80104b6f:	5d                   	pop    %ebp
80104b70:	c3                   	ret
80104b71:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80104b78:	00 
80104b79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80104b80 <syscall>:



void
syscall(void)
{
80104b80:	55                   	push   %ebp
80104b81:	89 e5                	mov    %esp,%ebp
80104b83:	56                   	push   %esi
80104b84:	53                   	push   %ebx
	int num;
	struct proc *curproc = myproc();
80104b85:	e8 56 ee ff ff       	call   801039e0 <myproc>
80104b8a:	89 c3                	mov    %eax,%ebx

	num = curproc->tf->eax;
80104b8c:	8b 40 1c             	mov    0x1c(%eax),%eax
80104b8f:	8b 70 1c             	mov    0x1c(%eax),%esi
	if (num > 0 && num < NELEM(syscalls) && syscalls[num]) {
80104b92:	8d 46 ff             	lea    -0x1(%esi),%eax
80104b95:	83 f8 1a             	cmp    $0x1a,%eax
80104b98:	77 46                	ja     80104be0 <syscall+0x60>
80104b9a:	8b 04 b5 80 8a 10 80 	mov    -0x7fef7580(,%esi,4),%eax
80104ba1:	85 c0                	test   %eax,%eax
80104ba3:	74 3b                	je     80104be0 <syscall+0x60>
		curproc->tf->eax = syscalls[num]();
80104ba5:	ff d0                	call   *%eax
80104ba7:	8b 53 1c             	mov    0x1c(%ebx),%edx
80104baa:	89 42 1c             	mov    %eax,0x1c(%edx)
		if (curproc->strace_mask_ptr[num] == 1) {
80104bad:	80 bc 33 04 01 00 00 	cmpb   $0x1,0x104(%ebx,%esi,1)
80104bb4:	01 
80104bb5:	75 4b                	jne    80104c02 <syscall+0x82>
			cprintf("pid %d: syscall %s returned %d\n", curproc->pid,
80104bb7:	8b 43 1c             	mov    0x1c(%ebx),%eax
80104bba:	ff 70 1c             	push   0x1c(%eax)
80104bbd:	ff 34 b5 00 8b 10 80 	push   -0x7fef7500(,%esi,4)
80104bc4:	ff 73 10             	push   0x10(%ebx)
80104bc7:	68 ac 88 10 80       	push   $0x801088ac
80104bcc:	e8 7f bb ff ff       	call   80100750 <cprintf>
80104bd1:	83 c4 10             	add    $0x10,%esp
80104bd4:	eb 2c                	jmp    80104c02 <syscall+0x82>
80104bd6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80104bdd:	00 
80104bde:	66 90                	xchg   %ax,%ax
							syscall_names[num], curproc->tf->eax);
		}
	} else {
		cprintf("%d %s: unknown sys call %d\n", curproc->pid, curproc->name, num);
80104be0:	8d 83 f4 00 00 00    	lea    0xf4(%ebx),%eax
80104be6:	56                   	push   %esi
80104be7:	50                   	push   %eax
80104be8:	ff 73 10             	push   0x10(%ebx)
80104beb:	68 12 84 10 80       	push   $0x80108412
80104bf0:	e8 5b bb ff ff       	call   80100750 <cprintf>
		curproc->tf->eax = -1;
80104bf5:	8b 43 1c             	mov    0x1c(%ebx),%eax
80104bf8:	83 c4 10             	add    $0x10,%esp
80104bfb:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
	}
}
80104c02:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104c05:	5b                   	pop    %ebx
80104c06:	5e                   	pop    %esi
80104c07:	5d                   	pop    %ebp
80104c08:	c3                   	ret
80104c09:	66 90                	xchg   %ax,%ax
80104c0b:	66 90                	xchg   %ax,%ax
80104c0d:	66 90                	xchg   %ax,%ax
80104c0f:	90                   	nop

80104c10 <create>:
	return -1;
}

static struct inode *
create(char *path, int mode, short major, short minor)
{
80104c10:	55                   	push   %ebp
80104c11:	89 e5                	mov    %esp,%ebp
80104c13:	57                   	push   %edi
80104c14:	56                   	push   %esi
80104c15:	89 ce                	mov    %ecx,%esi
80104c17:	53                   	push   %ebx
80104c18:	83 ec 54             	sub    $0x54,%esp
80104c1b:	8b 4d 08             	mov    0x8(%ebp),%ecx
80104c1e:	89 55 b4             	mov    %edx,-0x4c(%ebp)
80104c21:	89 4d b0             	mov    %ecx,-0x50(%ebp)
	struct inode *ip, *dp;
	char name[DIRSIZ];

	// get inode of path, and put the name in name.
	if ((dp = nameiparent(path, name)) == 0)
80104c24:	8d 4d c2             	lea    -0x3e(%ebp),%ecx
80104c27:	51                   	push   %ecx
80104c28:	50                   	push   %eax
80104c29:	e8 b2 d7 ff ff       	call   801023e0 <nameiparent>
80104c2e:	83 c4 10             	add    $0x10,%esp
80104c31:	85 c0                	test   %eax,%eax
80104c33:	74 77                	je     80104cac <create+0x9c>
		return 0;
	ilock(dp);
80104c35:	83 ec 0c             	sub    $0xc,%esp
80104c38:	89 c7                	mov    %eax,%edi
80104c3a:	50                   	push   %eax
80104c3b:	e8 20 ce ff ff       	call   80101a60 <ilock>

	if ((ip = dirlookup(dp, name, 0)) != 0) {
80104c40:	83 c4 0c             	add    $0xc,%esp
80104c43:	8d 45 c2             	lea    -0x3e(%ebp),%eax
80104c46:	6a 00                	push   $0x0
80104c48:	50                   	push   %eax
80104c49:	57                   	push   %edi
80104c4a:	e8 c1 d3 ff ff       	call   80102010 <dirlookup>
80104c4f:	83 c4 10             	add    $0x10,%esp
80104c52:	89 c3                	mov    %eax,%ebx
80104c54:	85 c0                	test   %eax,%eax
80104c56:	74 68                	je     80104cc0 <create+0xb0>
		iunlockput(dp);
80104c58:	83 ec 0c             	sub    $0xc,%esp
80104c5b:	57                   	push   %edi
80104c5c:	e8 af d0 ff ff       	call   80101d10 <iunlockput>
		ilock(ip);
80104c61:	89 1c 24             	mov    %ebx,(%esp)
80104c64:	e8 f7 cd ff ff       	call   80101a60 <ilock>
		if (S_ISREG(ip->mode) && S_ISREG(mode)) {
80104c69:	8b 43 5c             	mov    0x5c(%ebx),%eax
80104c6c:	83 c4 10             	add    $0x10,%esp
80104c6f:	25 00 f0 00 00       	and    $0xf000,%eax
80104c74:	3d 00 80 00 00       	cmp    $0x8000,%eax
80104c79:	75 25                	jne    80104ca0 <create+0x90>
80104c7b:	8b 55 b4             	mov    -0x4c(%ebp),%edx
80104c7e:	89 d0                	mov    %edx,%eax
80104c80:	25 00 f0 00 00       	and    $0xf000,%eax
80104c85:	3d 00 80 00 00       	cmp    $0x8000,%eax
80104c8a:	75 14                	jne    80104ca0 <create+0x90>
			ip->mode = mode; // TODO limit permissions
80104c8c:	89 53 5c             	mov    %edx,0x5c(%ebx)
		panic("create: dirlink");

	iunlockput(dp);

	return ip;
}
80104c8f:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104c92:	89 d8                	mov    %ebx,%eax
80104c94:	5b                   	pop    %ebx
80104c95:	5e                   	pop    %esi
80104c96:	5f                   	pop    %edi
80104c97:	5d                   	pop    %ebp
80104c98:	c3                   	ret
80104c99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		iunlockput(ip);
80104ca0:	83 ec 0c             	sub    $0xc,%esp
80104ca3:	53                   	push   %ebx
80104ca4:	e8 67 d0 ff ff       	call   80101d10 <iunlockput>
		return 0;
80104ca9:	83 c4 10             	add    $0x10,%esp
}
80104cac:	8d 65 f4             	lea    -0xc(%ebp),%esp
		return 0;
80104caf:	31 db                	xor    %ebx,%ebx
}
80104cb1:	89 d8                	mov    %ebx,%eax
80104cb3:	5b                   	pop    %ebx
80104cb4:	5e                   	pop    %esi
80104cb5:	5f                   	pop    %edi
80104cb6:	5d                   	pop    %ebp
80104cb7:	c3                   	ret
80104cb8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80104cbf:	00 
	if ((ip = ialloc(dp->dev, mode)) == 0)
80104cc0:	83 ec 08             	sub    $0x8,%esp
80104cc3:	ff 75 b4             	push   -0x4c(%ebp)
80104cc6:	ff 37                	push   (%edi)
80104cc8:	e8 43 cb ff ff       	call   80101810 <ialloc>
80104ccd:	83 c4 10             	add    $0x10,%esp
80104cd0:	89 c3                	mov    %eax,%ebx
80104cd2:	85 c0                	test   %eax,%eax
80104cd4:	0f 84 16 01 00 00    	je     80104df0 <create+0x1e0>
	ilock(ip);
80104cda:	83 ec 0c             	sub    $0xc,%esp
80104cdd:	50                   	push   %eax
80104cde:	e8 7d cd ff ff       	call   80101a60 <ilock>
	ip->minor = minor;
80104ce3:	0f b7 45 b0          	movzwl -0x50(%ebp),%eax
	ip->major = major;
80104ce7:	66 89 73 50          	mov    %si,0x50(%ebx)
	ip->gid = DEFAULT_GID;
80104ceb:	c7 43 60 00 00 00 00 	movl   $0x0,0x60(%ebx)
	ip->minor = minor;
80104cf2:	66 89 43 52          	mov    %ax,0x52(%ebx)
	ip->nlink = 1;
80104cf6:	b8 01 00 00 00       	mov    $0x1,%eax
80104cfb:	66 89 43 54          	mov    %ax,0x54(%ebx)
	ip->mode = mode;
80104cff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
80104d02:	89 43 5c             	mov    %eax,0x5c(%ebx)
	cmostime(&rtc);
80104d05:	8d 45 d0             	lea    -0x30(%ebp),%eax
80104d08:	89 04 24             	mov    %eax,(%esp)
80104d0b:	e8 30 2e 00 00       	call   80107b40 <cmostime>
	ip->mtime = ip->atime = ip->ctime = RTC_TO_UNIX(rtc);
80104d10:	69 75 d8 10 0e 00 00 	imul   $0xe10,-0x28(%ebp),%esi
80104d17:	8b 45 d0             	mov    -0x30(%ebp),%eax
80104d1a:	8d 84 06 00 a8 9d 50 	lea    0x509da800(%esi,%eax,1),%eax
80104d21:	6b 75 d4 3c          	imul   $0x3c,-0x2c(%ebp),%esi
80104d25:	01 f0                	add    %esi,%eax
80104d27:	69 75 e0 00 8d 27 00 	imul   $0x278d00,-0x20(%ebp),%esi
80104d2e:	01 f0                	add    %esi,%eax
80104d30:	69 75 dc 80 51 01 00 	imul   $0x15180,-0x24(%ebp),%esi
80104d37:	01 f0                	add    %esi,%eax
80104d39:	69 75 e4 80 33 e1 01 	imul   $0x1e13380,-0x1c(%ebp),%esi
80104d40:	01 f0                	add    %esi,%eax
80104d42:	89 43 64             	mov    %eax,0x64(%ebx)
80104d45:	89 43 68             	mov    %eax,0x68(%ebx)
80104d48:	89 43 6c             	mov    %eax,0x6c(%ebx)
	iupdate(ip);
80104d4b:	89 1c 24             	mov    %ebx,(%esp)
80104d4e:	e8 0d cc ff ff       	call   80101960 <iupdate>
	if (S_ISDIR(mode)) {
80104d53:	8b 45 b4             	mov    -0x4c(%ebp),%eax
80104d56:	83 c4 10             	add    $0x10,%esp
80104d59:	25 00 f0 00 00       	and    $0xf000,%eax
80104d5e:	3d 00 40 00 00       	cmp    $0x4000,%eax
80104d63:	74 33                	je     80104d98 <create+0x188>
	if (dirlink(dp, name, ip->inum) < 0)
80104d65:	83 ec 04             	sub    $0x4,%esp
80104d68:	8d 45 c2             	lea    -0x3e(%ebp),%eax
80104d6b:	ff 73 04             	push   0x4(%ebx)
80104d6e:	50                   	push   %eax
80104d6f:	57                   	push   %edi
80104d70:	e8 8b d5 ff ff       	call   80102300 <dirlink>
80104d75:	83 c4 10             	add    $0x10,%esp
80104d78:	85 c0                	test   %eax,%eax
80104d7a:	78 67                	js     80104de3 <create+0x1d3>
	iunlockput(dp);
80104d7c:	83 ec 0c             	sub    $0xc,%esp
80104d7f:	57                   	push   %edi
80104d80:	e8 8b cf ff ff       	call   80101d10 <iunlockput>
	return ip;
80104d85:	83 c4 10             	add    $0x10,%esp
}
80104d88:	8d 65 f4             	lea    -0xc(%ebp),%esp
80104d8b:	89 d8                	mov    %ebx,%eax
80104d8d:	5b                   	pop    %ebx
80104d8e:	5e                   	pop    %esi
80104d8f:	5f                   	pop    %edi
80104d90:	5d                   	pop    %ebp
80104d91:	c3                   	ret
80104d92:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		iupdate(dp);
80104d98:	83 ec 0c             	sub    $0xc,%esp
		dp->nlink++; // for ".."
80104d9b:	66 83 47 54 01       	addw   $0x1,0x54(%edi)
		iupdate(dp);
80104da0:	57                   	push   %edi
80104da1:	e8 ba cb ff ff       	call   80101960 <iupdate>
		if (dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
80104da6:	83 c4 0c             	add    $0xc,%esp
80104da9:	ff 73 04             	push   0x4(%ebx)
80104dac:	68 bd 84 10 80       	push   $0x801084bd
80104db1:	53                   	push   %ebx
80104db2:	e8 49 d5 ff ff       	call   80102300 <dirlink>
80104db7:	83 c4 10             	add    $0x10,%esp
80104dba:	85 c0                	test   %eax,%eax
80104dbc:	78 18                	js     80104dd6 <create+0x1c6>
80104dbe:	83 ec 04             	sub    $0x4,%esp
80104dc1:	ff 77 04             	push   0x4(%edi)
80104dc4:	68 bc 84 10 80       	push   $0x801084bc
80104dc9:	53                   	push   %ebx
80104dca:	e8 31 d5 ff ff       	call   80102300 <dirlink>
80104dcf:	83 c4 10             	add    $0x10,%esp
80104dd2:	85 c0                	test   %eax,%eax
80104dd4:	79 8f                	jns    80104d65 <create+0x155>
			panic("create dots");
80104dd6:	83 ec 0c             	sub    $0xc,%esp
80104dd9:	68 b0 84 10 80       	push   $0x801084b0
80104dde:	e8 9d b5 ff ff       	call   80100380 <panic>
		panic("create: dirlink");
80104de3:	83 ec 0c             	sub    $0xc,%esp
80104de6:	68 bf 84 10 80       	push   $0x801084bf
80104deb:	e8 90 b5 ff ff       	call   80100380 <panic>
		panic("create: ialloc");
80104df0:	83 ec 0c             	sub    $0xc,%esp
80104df3:	68 a1 84 10 80       	push   $0x801084a1
80104df8:	e8 83 b5 ff ff       	call   80100380 <panic>
80104dfd:	8d 76 00             	lea    0x0(%esi),%esi

80104e00 <sys_dup>:
{
80104e00:	55                   	push   %ebp
80104e01:	89 e5                	mov    %esp,%ebp
80104e03:	56                   	push   %esi
80104e04:	53                   	push   %ebx
	if (argint(n, &fd) < 0)
80104e05:	8d 45 f4             	lea    -0xc(%ebp),%eax
{
80104e08:	83 ec 18             	sub    $0x18,%esp
	if (argint(n, &fd) < 0)
80104e0b:	50                   	push   %eax
80104e0c:	6a 00                	push   $0x0
80104e0e:	e8 2d fc ff ff       	call   80104a40 <argint>
80104e13:	83 c4 10             	add    $0x10,%esp
80104e16:	85 c0                	test   %eax,%eax
80104e18:	78 36                	js     80104e50 <sys_dup+0x50>
	if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == 0)
80104e1a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
80104e1e:	77 30                	ja     80104e50 <sys_dup+0x50>
80104e20:	e8 bb eb ff ff       	call   801039e0 <myproc>
80104e25:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104e28:	8b 74 90 2c          	mov    0x2c(%eax,%edx,4),%esi
80104e2c:	85 f6                	test   %esi,%esi
80104e2e:	74 20                	je     80104e50 <sys_dup+0x50>
	struct proc *curproc = myproc();
80104e30:	e8 ab eb ff ff       	call   801039e0 <myproc>
	for (fd = 0; fd < NOFILE; fd++) {
80104e35:	31 db                	xor    %ebx,%ebx
80104e37:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80104e3e:	00 
80104e3f:	90                   	nop
		if (curproc->ofile[fd] == 0) {
80104e40:	8b 54 98 2c          	mov    0x2c(%eax,%ebx,4),%edx
80104e44:	85 d2                	test   %edx,%edx
80104e46:	74 18                	je     80104e60 <sys_dup+0x60>
	for (fd = 0; fd < NOFILE; fd++) {
80104e48:	83 c3 01             	add    $0x1,%ebx
80104e4b:	83 fb 10             	cmp    $0x10,%ebx
80104e4e:	75 f0                	jne    80104e40 <sys_dup+0x40>
}
80104e50:	8d 65 f8             	lea    -0x8(%ebp),%esp
		return -1;
80104e53:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
}
80104e58:	89 d8                	mov    %ebx,%eax
80104e5a:	5b                   	pop    %ebx
80104e5b:	5e                   	pop    %esi
80104e5c:	5d                   	pop    %ebp
80104e5d:	c3                   	ret
80104e5e:	66 90                	xchg   %ax,%ax
	filedup(f);
80104e60:	83 ec 0c             	sub    $0xc,%esp
			curproc->ofile[fd] = f;
80104e63:	89 74 98 2c          	mov    %esi,0x2c(%eax,%ebx,4)
	filedup(f);
80104e67:	56                   	push   %esi
80104e68:	e8 33 c2 ff ff       	call   801010a0 <filedup>
	return fd;
80104e6d:	83 c4 10             	add    $0x10,%esp
}
80104e70:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104e73:	89 d8                	mov    %ebx,%eax
80104e75:	5b                   	pop    %ebx
80104e76:	5e                   	pop    %esi
80104e77:	5d                   	pop    %ebp
80104e78:	c3                   	ret
80104e79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80104e80 <sys_read>:
{
80104e80:	55                   	push   %ebp
80104e81:	89 e5                	mov    %esp,%ebp
80104e83:	56                   	push   %esi
80104e84:	53                   	push   %ebx
	if (argint(n, &fd) < 0)
80104e85:	8d 5d f4             	lea    -0xc(%ebp),%ebx
{
80104e88:	83 ec 18             	sub    $0x18,%esp
	if (argint(n, &fd) < 0)
80104e8b:	53                   	push   %ebx
80104e8c:	6a 00                	push   $0x0
80104e8e:	e8 ad fb ff ff       	call   80104a40 <argint>
80104e93:	83 c4 10             	add    $0x10,%esp
80104e96:	85 c0                	test   %eax,%eax
80104e98:	78 5e                	js     80104ef8 <sys_read+0x78>
	if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == 0)
80104e9a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
80104e9e:	77 58                	ja     80104ef8 <sys_read+0x78>
80104ea0:	e8 3b eb ff ff       	call   801039e0 <myproc>
80104ea5:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104ea8:	8b 74 90 2c          	mov    0x2c(%eax,%edx,4),%esi
80104eac:	85 f6                	test   %esi,%esi
80104eae:	74 48                	je     80104ef8 <sys_read+0x78>
	if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
80104eb0:	83 ec 08             	sub    $0x8,%esp
80104eb3:	8d 45 f0             	lea    -0x10(%ebp),%eax
80104eb6:	50                   	push   %eax
80104eb7:	6a 02                	push   $0x2
80104eb9:	e8 82 fb ff ff       	call   80104a40 <argint>
80104ebe:	83 c4 10             	add    $0x10,%esp
80104ec1:	85 c0                	test   %eax,%eax
80104ec3:	78 33                	js     80104ef8 <sys_read+0x78>
80104ec5:	83 ec 04             	sub    $0x4,%esp
80104ec8:	ff 75 f0             	push   -0x10(%ebp)
80104ecb:	53                   	push   %ebx
80104ecc:	6a 01                	push   $0x1
80104ece:	e8 bd fb ff ff       	call   80104a90 <argptr>
80104ed3:	83 c4 10             	add    $0x10,%esp
80104ed6:	85 c0                	test   %eax,%eax
80104ed8:	78 1e                	js     80104ef8 <sys_read+0x78>
	return fileread(f, p, n);
80104eda:	83 ec 04             	sub    $0x4,%esp
80104edd:	ff 75 f0             	push   -0x10(%ebp)
80104ee0:	ff 75 f4             	push   -0xc(%ebp)
80104ee3:	56                   	push   %esi
80104ee4:	e8 37 c3 ff ff       	call   80101220 <fileread>
80104ee9:	83 c4 10             	add    $0x10,%esp
}
80104eec:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104eef:	5b                   	pop    %ebx
80104ef0:	5e                   	pop    %esi
80104ef1:	5d                   	pop    %ebp
80104ef2:	c3                   	ret
80104ef3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
		return -1;
80104ef8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104efd:	eb ed                	jmp    80104eec <sys_read+0x6c>
80104eff:	90                   	nop

80104f00 <sys_write>:
{
80104f00:	55                   	push   %ebp
80104f01:	89 e5                	mov    %esp,%ebp
80104f03:	56                   	push   %esi
80104f04:	53                   	push   %ebx
	if (argint(n, &fd) < 0)
80104f05:	8d 5d f4             	lea    -0xc(%ebp),%ebx
{
80104f08:	83 ec 18             	sub    $0x18,%esp
	if (argint(n, &fd) < 0)
80104f0b:	53                   	push   %ebx
80104f0c:	6a 00                	push   $0x0
80104f0e:	e8 2d fb ff ff       	call   80104a40 <argint>
80104f13:	83 c4 10             	add    $0x10,%esp
80104f16:	85 c0                	test   %eax,%eax
80104f18:	78 5e                	js     80104f78 <sys_write+0x78>
	if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == 0)
80104f1a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
80104f1e:	77 58                	ja     80104f78 <sys_write+0x78>
80104f20:	e8 bb ea ff ff       	call   801039e0 <myproc>
80104f25:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104f28:	8b 74 90 2c          	mov    0x2c(%eax,%edx,4),%esi
80104f2c:	85 f6                	test   %esi,%esi
80104f2e:	74 48                	je     80104f78 <sys_write+0x78>
	if (argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
80104f30:	83 ec 08             	sub    $0x8,%esp
80104f33:	8d 45 f0             	lea    -0x10(%ebp),%eax
80104f36:	50                   	push   %eax
80104f37:	6a 02                	push   $0x2
80104f39:	e8 02 fb ff ff       	call   80104a40 <argint>
80104f3e:	83 c4 10             	add    $0x10,%esp
80104f41:	85 c0                	test   %eax,%eax
80104f43:	78 33                	js     80104f78 <sys_write+0x78>
80104f45:	83 ec 04             	sub    $0x4,%esp
80104f48:	ff 75 f0             	push   -0x10(%ebp)
80104f4b:	53                   	push   %ebx
80104f4c:	6a 01                	push   $0x1
80104f4e:	e8 3d fb ff ff       	call   80104a90 <argptr>
80104f53:	83 c4 10             	add    $0x10,%esp
80104f56:	85 c0                	test   %eax,%eax
80104f58:	78 1e                	js     80104f78 <sys_write+0x78>
	return filewrite(f, p, n);
80104f5a:	83 ec 04             	sub    $0x4,%esp
80104f5d:	ff 75 f0             	push   -0x10(%ebp)
80104f60:	ff 75 f4             	push   -0xc(%ebp)
80104f63:	56                   	push   %esi
80104f64:	e8 47 c3 ff ff       	call   801012b0 <filewrite>
80104f69:	83 c4 10             	add    $0x10,%esp
}
80104f6c:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104f6f:	5b                   	pop    %ebx
80104f70:	5e                   	pop    %esi
80104f71:	5d                   	pop    %ebp
80104f72:	c3                   	ret
80104f73:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
		return -1;
80104f78:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104f7d:	eb ed                	jmp    80104f6c <sys_write+0x6c>
80104f7f:	90                   	nop

80104f80 <sys_close>:
{
80104f80:	55                   	push   %ebp
80104f81:	89 e5                	mov    %esp,%ebp
80104f83:	56                   	push   %esi
80104f84:	53                   	push   %ebx
	if (argint(n, &fd) < 0)
80104f85:	8d 45 f4             	lea    -0xc(%ebp),%eax
{
80104f88:	83 ec 18             	sub    $0x18,%esp
	if (argint(n, &fd) < 0)
80104f8b:	50                   	push   %eax
80104f8c:	6a 00                	push   $0x0
80104f8e:	e8 ad fa ff ff       	call   80104a40 <argint>
80104f93:	83 c4 10             	add    $0x10,%esp
80104f96:	85 c0                	test   %eax,%eax
80104f98:	78 3e                	js     80104fd8 <sys_close+0x58>
	if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == 0)
80104f9a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
80104f9e:	77 38                	ja     80104fd8 <sys_close+0x58>
80104fa0:	e8 3b ea ff ff       	call   801039e0 <myproc>
80104fa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
80104fa8:	8d 5a 08             	lea    0x8(%edx),%ebx
80104fab:	8b 74 98 0c          	mov    0xc(%eax,%ebx,4),%esi
80104faf:	85 f6                	test   %esi,%esi
80104fb1:	74 25                	je     80104fd8 <sys_close+0x58>
	myproc()->ofile[fd] = 0;
80104fb3:	e8 28 ea ff ff       	call   801039e0 <myproc>
	fileclose(f);
80104fb8:	83 ec 0c             	sub    $0xc,%esp
	myproc()->ofile[fd] = 0;
80104fbb:	c7 44 98 0c 00 00 00 	movl   $0x0,0xc(%eax,%ebx,4)
80104fc2:	00 
	fileclose(f);
80104fc3:	56                   	push   %esi
80104fc4:	e8 27 c1 ff ff       	call   801010f0 <fileclose>
	return 0;
80104fc9:	83 c4 10             	add    $0x10,%esp
80104fcc:	31 c0                	xor    %eax,%eax
}
80104fce:	8d 65 f8             	lea    -0x8(%ebp),%esp
80104fd1:	5b                   	pop    %ebx
80104fd2:	5e                   	pop    %esi
80104fd3:	5d                   	pop    %ebp
80104fd4:	c3                   	ret
80104fd5:	8d 76 00             	lea    0x0(%esi),%esi
		return -1;
80104fd8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80104fdd:	eb ef                	jmp    80104fce <sys_close+0x4e>
80104fdf:	90                   	nop

80104fe0 <sys_fstat>:
{
80104fe0:	55                   	push   %ebp
80104fe1:	89 e5                	mov    %esp,%ebp
80104fe3:	56                   	push   %esi
80104fe4:	53                   	push   %ebx
	if (argint(n, &fd) < 0)
80104fe5:	8d 5d f4             	lea    -0xc(%ebp),%ebx
{
80104fe8:	83 ec 18             	sub    $0x18,%esp
	if (argint(n, &fd) < 0)
80104feb:	53                   	push   %ebx
80104fec:	6a 00                	push   $0x0
80104fee:	e8 4d fa ff ff       	call   80104a40 <argint>
80104ff3:	83 c4 10             	add    $0x10,%esp
80104ff6:	85 c0                	test   %eax,%eax
80104ff8:	78 46                	js     80105040 <sys_fstat+0x60>
	if (fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == 0)
80104ffa:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
80104ffe:	77 40                	ja     80105040 <sys_fstat+0x60>
80105000:	e8 db e9 ff ff       	call   801039e0 <myproc>
80105005:	8b 55 f4             	mov    -0xc(%ebp),%edx
80105008:	8b 74 90 2c          	mov    0x2c(%eax,%edx,4),%esi
8010500c:	85 f6                	test   %esi,%esi
8010500e:	74 30                	je     80105040 <sys_fstat+0x60>
	if (argfd(0, 0, &f) < 0 || argptr(1, (void *)&st, sizeof(*st)) < 0)
80105010:	83 ec 04             	sub    $0x4,%esp
80105013:	6a 24                	push   $0x24
80105015:	53                   	push   %ebx
80105016:	6a 01                	push   $0x1
80105018:	e8 73 fa ff ff       	call   80104a90 <argptr>
8010501d:	83 c4 10             	add    $0x10,%esp
80105020:	85 c0                	test   %eax,%eax
80105022:	78 1c                	js     80105040 <sys_fstat+0x60>
	if (st == NULL)
80105024:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105027:	85 c0                	test   %eax,%eax
80105029:	74 15                	je     80105040 <sys_fstat+0x60>
	return filestat(f, st);
8010502b:	83 ec 08             	sub    $0x8,%esp
8010502e:	50                   	push   %eax
8010502f:	56                   	push   %esi
80105030:	e8 9b c1 ff ff       	call   801011d0 <filestat>
80105035:	83 c4 10             	add    $0x10,%esp
}
80105038:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010503b:	5b                   	pop    %ebx
8010503c:	5e                   	pop    %esi
8010503d:	5d                   	pop    %ebp
8010503e:	c3                   	ret
8010503f:	90                   	nop
		return -1;
80105040:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105045:	eb f1                	jmp    80105038 <sys_fstat+0x58>
80105047:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010504e:	00 
8010504f:	90                   	nop

80105050 <sys_link>:
{
80105050:	55                   	push   %ebp
80105051:	89 e5                	mov    %esp,%ebp
80105053:	57                   	push   %edi
80105054:	56                   	push   %esi
	if (argstr(0, &old) < 0 || argstr(1, &new) < 0)
80105055:	8d 45 d4             	lea    -0x2c(%ebp),%eax
{
80105058:	53                   	push   %ebx
80105059:	83 ec 34             	sub    $0x34,%esp
	if (argstr(0, &old) < 0 || argstr(1, &new) < 0)
8010505c:	50                   	push   %eax
8010505d:	6a 00                	push   $0x0
8010505f:	e8 9c fa ff ff       	call   80104b00 <argstr>
80105064:	83 c4 10             	add    $0x10,%esp
80105067:	85 c0                	test   %eax,%eax
80105069:	0f 88 03 01 00 00    	js     80105172 <sys_link+0x122>
8010506f:	83 ec 08             	sub    $0x8,%esp
80105072:	8d 45 d0             	lea    -0x30(%ebp),%eax
80105075:	50                   	push   %eax
80105076:	6a 01                	push   $0x1
80105078:	e8 83 fa ff ff       	call   80104b00 <argstr>
8010507d:	83 c4 10             	add    $0x10,%esp
80105080:	85 c0                	test   %eax,%eax
80105082:	0f 88 ea 00 00 00    	js     80105172 <sys_link+0x122>
	begin_op();
80105088:	e8 33 db ff ff       	call   80102bc0 <begin_op>
	if ((ip = namei(old)) == 0) {
8010508d:	83 ec 0c             	sub    $0xc,%esp
80105090:	ff 75 d4             	push   -0x2c(%ebp)
80105093:	e8 28 d3 ff ff       	call   801023c0 <namei>
80105098:	83 c4 10             	add    $0x10,%esp
8010509b:	89 c3                	mov    %eax,%ebx
8010509d:	85 c0                	test   %eax,%eax
8010509f:	0f 84 e7 00 00 00    	je     8010518c <sys_link+0x13c>
	ilock(ip);
801050a5:	83 ec 0c             	sub    $0xc,%esp
801050a8:	50                   	push   %eax
801050a9:	e8 b2 c9 ff ff       	call   80101a60 <ilock>
	if (S_ISDIR(ip->mode)) {
801050ae:	8b 43 5c             	mov    0x5c(%ebx),%eax
801050b1:	83 c4 10             	add    $0x10,%esp
801050b4:	25 00 f0 00 00       	and    $0xf000,%eax
801050b9:	3d 00 40 00 00       	cmp    $0x4000,%eax
801050be:	0f 84 b5 00 00 00    	je     80105179 <sys_link+0x129>
	iupdate(ip);
801050c4:	83 ec 0c             	sub    $0xc,%esp
	ip->nlink++;
801050c7:	66 83 43 54 01       	addw   $0x1,0x54(%ebx)
	if ((dp = nameiparent(new, name)) == 0)
801050cc:	8d 7d da             	lea    -0x26(%ebp),%edi
	iupdate(ip);
801050cf:	53                   	push   %ebx
801050d0:	e8 8b c8 ff ff       	call   80101960 <iupdate>
	iunlock(ip);
801050d5:	89 1c 24             	mov    %ebx,(%esp)
801050d8:	e8 83 ca ff ff       	call   80101b60 <iunlock>
	if ((dp = nameiparent(new, name)) == 0)
801050dd:	58                   	pop    %eax
801050de:	5a                   	pop    %edx
801050df:	57                   	push   %edi
801050e0:	ff 75 d0             	push   -0x30(%ebp)
801050e3:	e8 f8 d2 ff ff       	call   801023e0 <nameiparent>
801050e8:	83 c4 10             	add    $0x10,%esp
801050eb:	89 c6                	mov    %eax,%esi
801050ed:	85 c0                	test   %eax,%eax
801050ef:	74 5b                	je     8010514c <sys_link+0xfc>
	ilock(dp);
801050f1:	83 ec 0c             	sub    $0xc,%esp
801050f4:	50                   	push   %eax
801050f5:	e8 66 c9 ff ff       	call   80101a60 <ilock>
	if (dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0) {
801050fa:	8b 03                	mov    (%ebx),%eax
801050fc:	83 c4 10             	add    $0x10,%esp
801050ff:	39 06                	cmp    %eax,(%esi)
80105101:	75 3d                	jne    80105140 <sys_link+0xf0>
80105103:	83 ec 04             	sub    $0x4,%esp
80105106:	ff 73 04             	push   0x4(%ebx)
80105109:	57                   	push   %edi
8010510a:	56                   	push   %esi
8010510b:	e8 f0 d1 ff ff       	call   80102300 <dirlink>
80105110:	83 c4 10             	add    $0x10,%esp
80105113:	85 c0                	test   %eax,%eax
80105115:	78 29                	js     80105140 <sys_link+0xf0>
	iunlockput(dp);
80105117:	83 ec 0c             	sub    $0xc,%esp
8010511a:	56                   	push   %esi
8010511b:	e8 f0 cb ff ff       	call   80101d10 <iunlockput>
	iput(ip);
80105120:	89 1c 24             	mov    %ebx,(%esp)
80105123:	e8 88 ca ff ff       	call   80101bb0 <iput>
	end_op();
80105128:	e8 03 db ff ff       	call   80102c30 <end_op>
	return 0;
8010512d:	83 c4 10             	add    $0x10,%esp
80105130:	31 c0                	xor    %eax,%eax
}
80105132:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105135:	5b                   	pop    %ebx
80105136:	5e                   	pop    %esi
80105137:	5f                   	pop    %edi
80105138:	5d                   	pop    %ebp
80105139:	c3                   	ret
8010513a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		iunlockput(dp);
80105140:	83 ec 0c             	sub    $0xc,%esp
80105143:	56                   	push   %esi
80105144:	e8 c7 cb ff ff       	call   80101d10 <iunlockput>
		goto bad;
80105149:	83 c4 10             	add    $0x10,%esp
	ilock(ip);
8010514c:	83 ec 0c             	sub    $0xc,%esp
8010514f:	53                   	push   %ebx
80105150:	e8 0b c9 ff ff       	call   80101a60 <ilock>
	ip->nlink--;
80105155:	66 83 6b 54 01       	subw   $0x1,0x54(%ebx)
	iupdate(ip);
8010515a:	89 1c 24             	mov    %ebx,(%esp)
8010515d:	e8 fe c7 ff ff       	call   80101960 <iupdate>
	iunlockput(ip);
80105162:	89 1c 24             	mov    %ebx,(%esp)
80105165:	e8 a6 cb ff ff       	call   80101d10 <iunlockput>
	end_op();
8010516a:	e8 c1 da ff ff       	call   80102c30 <end_op>
	return -1;
8010516f:	83 c4 10             	add    $0x10,%esp
		return -1;
80105172:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105177:	eb b9                	jmp    80105132 <sys_link+0xe2>
		iunlockput(ip);
80105179:	83 ec 0c             	sub    $0xc,%esp
8010517c:	53                   	push   %ebx
8010517d:	e8 8e cb ff ff       	call   80101d10 <iunlockput>
		end_op();
80105182:	e8 a9 da ff ff       	call   80102c30 <end_op>
		return -1;
80105187:	83 c4 10             	add    $0x10,%esp
8010518a:	eb e6                	jmp    80105172 <sys_link+0x122>
		end_op();
8010518c:	e8 9f da ff ff       	call   80102c30 <end_op>
		return -1;
80105191:	eb df                	jmp    80105172 <sys_link+0x122>
80105193:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010519a:	00 
8010519b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

801051a0 <sys_unlink>:
{
801051a0:	55                   	push   %ebp
801051a1:	89 e5                	mov    %esp,%ebp
801051a3:	57                   	push   %edi
801051a4:	56                   	push   %esi
	if (argstr(0, &path) < 0)
801051a5:	8d 45 c0             	lea    -0x40(%ebp),%eax
{
801051a8:	53                   	push   %ebx
801051a9:	83 ec 54             	sub    $0x54,%esp
	if (argstr(0, &path) < 0)
801051ac:	50                   	push   %eax
801051ad:	6a 00                	push   $0x0
801051af:	e8 4c f9 ff ff       	call   80104b00 <argstr>
801051b4:	83 c4 10             	add    $0x10,%esp
801051b7:	85 c0                	test   %eax,%eax
801051b9:	0f 88 6c 01 00 00    	js     8010532b <sys_unlink+0x18b>
	begin_op();
801051bf:	e8 fc d9 ff ff       	call   80102bc0 <begin_op>
	if ((dp = nameiparent(path, name)) == 0) {
801051c4:	8d 5d ca             	lea    -0x36(%ebp),%ebx
801051c7:	83 ec 08             	sub    $0x8,%esp
801051ca:	53                   	push   %ebx
801051cb:	ff 75 c0             	push   -0x40(%ebp)
801051ce:	e8 0d d2 ff ff       	call   801023e0 <nameiparent>
801051d3:	83 c4 10             	add    $0x10,%esp
801051d6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
801051d9:	85 c0                	test   %eax,%eax
801051db:	0f 84 70 01 00 00    	je     80105351 <sys_unlink+0x1b1>
	ilock(dp);
801051e1:	8b 7d b4             	mov    -0x4c(%ebp),%edi
801051e4:	83 ec 0c             	sub    $0xc,%esp
801051e7:	57                   	push   %edi
801051e8:	e8 73 c8 ff ff       	call   80101a60 <ilock>
	if (namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
801051ed:	58                   	pop    %eax
801051ee:	5a                   	pop    %edx
801051ef:	68 bd 84 10 80       	push   $0x801084bd
801051f4:	53                   	push   %ebx
801051f5:	e8 f6 cd ff ff       	call   80101ff0 <namecmp>
801051fa:	83 c4 10             	add    $0x10,%esp
801051fd:	85 c0                	test   %eax,%eax
801051ff:	0f 84 13 01 00 00    	je     80105318 <sys_unlink+0x178>
80105205:	83 ec 08             	sub    $0x8,%esp
80105208:	68 bc 84 10 80       	push   $0x801084bc
8010520d:	53                   	push   %ebx
8010520e:	e8 dd cd ff ff       	call   80101ff0 <namecmp>
80105213:	83 c4 10             	add    $0x10,%esp
80105216:	85 c0                	test   %eax,%eax
80105218:	0f 84 fa 00 00 00    	je     80105318 <sys_unlink+0x178>
	if ((ip = dirlookup(dp, name, &off)) == 0)
8010521e:	83 ec 04             	sub    $0x4,%esp
80105221:	8d 45 c4             	lea    -0x3c(%ebp),%eax
80105224:	50                   	push   %eax
80105225:	53                   	push   %ebx
80105226:	57                   	push   %edi
80105227:	e8 e4 cd ff ff       	call   80102010 <dirlookup>
8010522c:	83 c4 10             	add    $0x10,%esp
8010522f:	89 c3                	mov    %eax,%ebx
80105231:	85 c0                	test   %eax,%eax
80105233:	0f 84 df 00 00 00    	je     80105318 <sys_unlink+0x178>
	ilock(ip);
80105239:	83 ec 0c             	sub    $0xc,%esp
8010523c:	50                   	push   %eax
8010523d:	e8 1e c8 ff ff       	call   80101a60 <ilock>
	if (ip->nlink < 1)
80105242:	83 c4 10             	add    $0x10,%esp
80105245:	66 83 7b 54 00       	cmpw   $0x0,0x54(%ebx)
8010524a:	0f 8e 22 01 00 00    	jle    80105372 <sys_unlink+0x1d2>
	if (S_ISDIR(ip->mode) && !isdirempty(ip)) {
80105250:	8b 43 5c             	mov    0x5c(%ebx),%eax
80105253:	8d 7d d8             	lea    -0x28(%ebp),%edi
80105256:	25 00 f0 00 00       	and    $0xf000,%eax
8010525b:	3d 00 40 00 00       	cmp    $0x4000,%eax
80105260:	74 6e                	je     801052d0 <sys_unlink+0x130>
	memset(&de, 0, sizeof(de));
80105262:	83 ec 04             	sub    $0x4,%esp
80105265:	6a 10                	push   $0x10
80105267:	6a 00                	push   $0x0
80105269:	57                   	push   %edi
8010526a:	e8 21 f5 ff ff       	call   80104790 <memset>
	if (writei(dp, (char *)&de, off, sizeof(de)) != sizeof(de))
8010526f:	6a 10                	push   $0x10
80105271:	ff 75 c4             	push   -0x3c(%ebp)
80105274:	57                   	push   %edi
80105275:	ff 75 b4             	push   -0x4c(%ebp)
80105278:	e8 43 cc ff ff       	call   80101ec0 <writei>
8010527d:	83 c4 20             	add    $0x20,%esp
80105280:	83 f8 10             	cmp    $0x10,%eax
80105283:	0f 85 dc 00 00 00    	jne    80105365 <sys_unlink+0x1c5>
	if (S_ISDIR(ip->mode)) {
80105289:	8b 43 5c             	mov    0x5c(%ebx),%eax
8010528c:	25 00 f0 00 00       	and    $0xf000,%eax
80105291:	3d 00 40 00 00       	cmp    $0x4000,%eax
80105296:	0f 84 9c 00 00 00    	je     80105338 <sys_unlink+0x198>
	iunlockput(dp);
8010529c:	83 ec 0c             	sub    $0xc,%esp
8010529f:	ff 75 b4             	push   -0x4c(%ebp)
801052a2:	e8 69 ca ff ff       	call   80101d10 <iunlockput>
	ip->nlink--;
801052a7:	66 83 6b 54 01       	subw   $0x1,0x54(%ebx)
	iupdate(ip);
801052ac:	89 1c 24             	mov    %ebx,(%esp)
801052af:	e8 ac c6 ff ff       	call   80101960 <iupdate>
	iunlockput(ip);
801052b4:	89 1c 24             	mov    %ebx,(%esp)
801052b7:	e8 54 ca ff ff       	call   80101d10 <iunlockput>
	end_op();
801052bc:	e8 6f d9 ff ff       	call   80102c30 <end_op>
	return 0;
801052c1:	83 c4 10             	add    $0x10,%esp
801052c4:	31 c0                	xor    %eax,%eax
}
801052c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
801052c9:	5b                   	pop    %ebx
801052ca:	5e                   	pop    %esi
801052cb:	5f                   	pop    %edi
801052cc:	5d                   	pop    %ebp
801052cd:	c3                   	ret
801052ce:	66 90                	xchg   %ax,%ax
	for (off = 2 * sizeof(de); off < dp->size; off += sizeof(de)) {
801052d0:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
801052d4:	76 8c                	jbe    80105262 <sys_unlink+0xc2>
801052d6:	be 20 00 00 00       	mov    $0x20,%esi
801052db:	eb 0f                	jmp    801052ec <sys_unlink+0x14c>
801052dd:	8d 76 00             	lea    0x0(%esi),%esi
801052e0:	83 c6 10             	add    $0x10,%esi
801052e3:	3b 73 58             	cmp    0x58(%ebx),%esi
801052e6:	0f 83 76 ff ff ff    	jae    80105262 <sys_unlink+0xc2>
		if (readi(dp, (char *)&de, off, sizeof(de)) != sizeof(de))
801052ec:	6a 10                	push   $0x10
801052ee:	56                   	push   %esi
801052ef:	57                   	push   %edi
801052f0:	53                   	push   %ebx
801052f1:	e8 ba ca ff ff       	call   80101db0 <readi>
801052f6:	83 c4 10             	add    $0x10,%esp
801052f9:	83 f8 10             	cmp    $0x10,%eax
801052fc:	75 5a                	jne    80105358 <sys_unlink+0x1b8>
		if (de.inum != 0)
801052fe:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
80105303:	74 db                	je     801052e0 <sys_unlink+0x140>
		iunlockput(ip);
80105305:	83 ec 0c             	sub    $0xc,%esp
80105308:	53                   	push   %ebx
80105309:	e8 02 ca ff ff       	call   80101d10 <iunlockput>
		goto bad;
8010530e:	83 c4 10             	add    $0x10,%esp
80105311:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
	iunlockput(dp);
80105318:	83 ec 0c             	sub    $0xc,%esp
8010531b:	ff 75 b4             	push   -0x4c(%ebp)
8010531e:	e8 ed c9 ff ff       	call   80101d10 <iunlockput>
	end_op();
80105323:	e8 08 d9 ff ff       	call   80102c30 <end_op>
	return -1;
80105328:	83 c4 10             	add    $0x10,%esp
		return -1;
8010532b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105330:	eb 94                	jmp    801052c6 <sys_unlink+0x126>
80105332:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		dp->nlink--;
80105338:	8b 45 b4             	mov    -0x4c(%ebp),%eax
		iupdate(dp);
8010533b:	83 ec 0c             	sub    $0xc,%esp
		dp->nlink--;
8010533e:	66 83 68 54 01       	subw   $0x1,0x54(%eax)
		iupdate(dp);
80105343:	50                   	push   %eax
80105344:	e8 17 c6 ff ff       	call   80101960 <iupdate>
80105349:	83 c4 10             	add    $0x10,%esp
8010534c:	e9 4b ff ff ff       	jmp    8010529c <sys_unlink+0xfc>
		end_op();
80105351:	e8 da d8 ff ff       	call   80102c30 <end_op>
		return -1;
80105356:	eb d3                	jmp    8010532b <sys_unlink+0x18b>
			panic("isdirempty: readi");
80105358:	83 ec 0c             	sub    $0xc,%esp
8010535b:	68 e1 84 10 80       	push   $0x801084e1
80105360:	e8 1b b0 ff ff       	call   80100380 <panic>
		panic("unlink: writei");
80105365:	83 ec 0c             	sub    $0xc,%esp
80105368:	68 f3 84 10 80       	push   $0x801084f3
8010536d:	e8 0e b0 ff ff       	call   80100380 <panic>
		panic("unlink: nlink < 1");
80105372:	83 ec 0c             	sub    $0xc,%esp
80105375:	68 cf 84 10 80       	push   $0x801084cf
8010537a:	e8 01 b0 ff ff       	call   80100380 <panic>
8010537f:	90                   	nop

80105380 <sys_open>:

int
sys_open(void)
{
80105380:	55                   	push   %ebp
80105381:	89 e5                	mov    %esp,%ebp
80105383:	57                   	push   %edi
80105384:	56                   	push   %esi
	char *path;
	int fd, omode;
	struct file *f;
	struct inode *ip;

	if (argstr(0, &path) < 0 || argint(1, &omode) < 0)
80105385:	8d 45 e0             	lea    -0x20(%ebp),%eax
{
80105388:	53                   	push   %ebx
80105389:	83 ec 24             	sub    $0x24,%esp
	if (argstr(0, &path) < 0 || argint(1, &omode) < 0)
8010538c:	50                   	push   %eax
8010538d:	6a 00                	push   $0x0
8010538f:	e8 6c f7 ff ff       	call   80104b00 <argstr>
80105394:	83 c4 10             	add    $0x10,%esp
80105397:	85 c0                	test   %eax,%eax
80105399:	0f 88 9e 00 00 00    	js     8010543d <sys_open+0xbd>
8010539f:	83 ec 08             	sub    $0x8,%esp
801053a2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
801053a5:	50                   	push   %eax
801053a6:	6a 01                	push   $0x1
801053a8:	e8 93 f6 ff ff       	call   80104a40 <argint>
801053ad:	83 c4 10             	add    $0x10,%esp
801053b0:	85 c0                	test   %eax,%eax
801053b2:	0f 88 85 00 00 00    	js     8010543d <sys_open+0xbd>
		return -1;

	begin_op();
801053b8:	e8 03 d8 ff ff       	call   80102bc0 <begin_op>

	if (omode & O_CREATE) {
801053bd:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
801053c1:	0f 85 81 00 00 00    	jne    80105448 <sys_open+0xc8>
		if (ip == 0) {
			end_op();
			return -1;
		}
	} else {
		if ((ip = namei(path)) == 0) {
801053c7:	83 ec 0c             	sub    $0xc,%esp
801053ca:	ff 75 e0             	push   -0x20(%ebp)
801053cd:	e8 ee cf ff ff       	call   801023c0 <namei>
801053d2:	83 c4 10             	add    $0x10,%esp
801053d5:	89 c6                	mov    %eax,%esi
801053d7:	85 c0                	test   %eax,%eax
801053d9:	0f 84 22 01 00 00    	je     80105501 <sys_open+0x181>
			end_op();
			return -1;
		}
		ilock(ip);
801053df:	83 ec 0c             	sub    $0xc,%esp
801053e2:	50                   	push   %eax
801053e3:	e8 78 c6 ff ff       	call   80101a60 <ilock>
		if (S_ISDIR(ip->mode) && omode != O_RDONLY) {
801053e8:	8b 46 5c             	mov    0x5c(%esi),%eax
801053eb:	83 c4 10             	add    $0x10,%esp
801053ee:	25 00 f0 00 00       	and    $0xf000,%eax
801053f3:	3d 00 40 00 00       	cmp    $0x4000,%eax
801053f8:	0f 84 ca 00 00 00    	je     801054c8 <sys_open+0x148>
			return -1;
		}
	}
get_fd:

	if ((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0) {
801053fe:	e8 2d bc ff ff       	call   80101030 <filealloc>
80105403:	89 c7                	mov    %eax,%edi
80105405:	85 c0                	test   %eax,%eax
80105407:	74 23                	je     8010542c <sys_open+0xac>
	struct proc *curproc = myproc();
80105409:	e8 d2 e5 ff ff       	call   801039e0 <myproc>
	for (fd = 0; fd < NOFILE; fd++) {
8010540e:	31 db                	xor    %ebx,%ebx
		if (curproc->ofile[fd] == 0) {
80105410:	8b 54 98 2c          	mov    0x2c(%eax,%ebx,4),%edx
80105414:	85 d2                	test   %edx,%edx
80105416:	74 68                	je     80105480 <sys_open+0x100>
	for (fd = 0; fd < NOFILE; fd++) {
80105418:	83 c3 01             	add    $0x1,%ebx
8010541b:	83 fb 10             	cmp    $0x10,%ebx
8010541e:	75 f0                	jne    80105410 <sys_open+0x90>
		if (f)
			fileclose(f);
80105420:	83 ec 0c             	sub    $0xc,%esp
80105423:	57                   	push   %edi
80105424:	e8 c7 bc ff ff       	call   801010f0 <fileclose>
80105429:	83 c4 10             	add    $0x10,%esp
			iunlockput(ip);
8010542c:	83 ec 0c             	sub    $0xc,%esp
8010542f:	56                   	push   %esi
80105430:	e8 db c8 ff ff       	call   80101d10 <iunlockput>
			end_op();
80105435:	e8 f6 d7 ff ff       	call   80102c30 <end_op>
			return -1;
8010543a:	83 c4 10             	add    $0x10,%esp
		return -1;
8010543d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
80105442:	eb 75                	jmp    801054b9 <sys_open+0x139>
80105444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
		if ((ip = namei(path)) != 0) {
80105448:	83 ec 0c             	sub    $0xc,%esp
8010544b:	ff 75 e0             	push   -0x20(%ebp)
8010544e:	e8 6d cf ff ff       	call   801023c0 <namei>
80105453:	83 c4 10             	add    $0x10,%esp
80105456:	89 c6                	mov    %eax,%esi
80105458:	85 c0                	test   %eax,%eax
8010545a:	0f 84 80 00 00 00    	je     801054e0 <sys_open+0x160>
			ilock(ip);
80105460:	83 ec 0c             	sub    $0xc,%esp
80105463:	50                   	push   %eax
80105464:	e8 f7 c5 ff ff       	call   80101a60 <ilock>
			if (S_ISBLK(ip->mode))
80105469:	8b 46 5c             	mov    0x5c(%esi),%eax
8010546c:	83 c4 10             	add    $0x10,%esp
8010546f:	25 00 f0 00 00       	and    $0xf000,%eax
80105474:	3d 00 60 00 00       	cmp    $0x6000,%eax
80105479:	74 83                	je     801053fe <sys_open+0x7e>
8010547b:	eb af                	jmp    8010542c <sys_open+0xac>
8010547d:	8d 76 00             	lea    0x0(%esi),%esi
		iunlockput(ip);
		end_op();
		return -1;
	}
	iunlock(ip);
80105480:	83 ec 0c             	sub    $0xc,%esp
			curproc->ofile[fd] = f;
80105483:	89 7c 98 2c          	mov    %edi,0x2c(%eax,%ebx,4)
	iunlock(ip);
80105487:	56                   	push   %esi
80105488:	e8 d3 c6 ff ff       	call   80101b60 <iunlock>
	end_op();
8010548d:	e8 9e d7 ff ff       	call   80102c30 <end_op>

	f->type = FD_INODE;
80105492:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
	f->ip = ip;
	f->off = 0;
	f->readable = !(omode & O_WRONLY);
80105498:	8b 55 e4             	mov    -0x1c(%ebp),%edx
	f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
8010549b:	83 c4 10             	add    $0x10,%esp
	f->ip = ip;
8010549e:	89 77 10             	mov    %esi,0x10(%edi)
	f->readable = !(omode & O_WRONLY);
801054a1:	89 d0                	mov    %edx,%eax
	f->off = 0;
801054a3:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
	f->readable = !(omode & O_WRONLY);
801054aa:	f7 d0                	not    %eax
801054ac:	83 e0 01             	and    $0x1,%eax
	f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
801054af:	83 e2 03             	and    $0x3,%edx
	f->readable = !(omode & O_WRONLY);
801054b2:	88 47 08             	mov    %al,0x8(%edi)
	f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
801054b5:	0f 95 47 09          	setne  0x9(%edi)
	return fd;
}
801054b9:	8d 65 f4             	lea    -0xc(%ebp),%esp
801054bc:	89 d8                	mov    %ebx,%eax
801054be:	5b                   	pop    %ebx
801054bf:	5e                   	pop    %esi
801054c0:	5f                   	pop    %edi
801054c1:	5d                   	pop    %ebp
801054c2:	c3                   	ret
801054c3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
		if (S_ISDIR(ip->mode) && omode != O_RDONLY) {
801054c8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
801054cb:	85 c9                	test   %ecx,%ecx
801054cd:	0f 84 2b ff ff ff    	je     801053fe <sys_open+0x7e>
801054d3:	e9 54 ff ff ff       	jmp    8010542c <sys_open+0xac>
801054d8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801054df:	00 
		ip = create(path, S_IFREG | S_IAUSR, 0, 0);
801054e0:	83 ec 0c             	sub    $0xc,%esp
801054e3:	31 c9                	xor    %ecx,%ecx
801054e5:	ba c0 81 00 00       	mov    $0x81c0,%edx
801054ea:	6a 00                	push   $0x0
801054ec:	8b 45 e0             	mov    -0x20(%ebp),%eax
801054ef:	e8 1c f7 ff ff       	call   80104c10 <create>
		if (ip == 0) {
801054f4:	83 c4 10             	add    $0x10,%esp
		ip = create(path, S_IFREG | S_IAUSR, 0, 0);
801054f7:	89 c6                	mov    %eax,%esi
		if (ip == 0) {
801054f9:	85 c0                	test   %eax,%eax
801054fb:	0f 85 fd fe ff ff    	jne    801053fe <sys_open+0x7e>
			end_op();
80105501:	e8 2a d7 ff ff       	call   80102c30 <end_op>
			return -1;
80105506:	e9 32 ff ff ff       	jmp    8010543d <sys_open+0xbd>
8010550b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

80105510 <sys_mkdir>:

int
sys_mkdir(void)
{
80105510:	55                   	push   %ebp
80105511:	89 e5                	mov    %esp,%ebp
80105513:	83 ec 18             	sub    $0x18,%esp
	char *path;
	struct inode *ip;

	begin_op();
80105516:	e8 a5 d6 ff ff       	call   80102bc0 <begin_op>
	if (argstr(0, &path) < 0 || (ip = create(path, S_IFDIR | S_IAUSR, 0, 0)) == 0) {
8010551b:	83 ec 08             	sub    $0x8,%esp
8010551e:	8d 45 f4             	lea    -0xc(%ebp),%eax
80105521:	50                   	push   %eax
80105522:	6a 00                	push   $0x0
80105524:	e8 d7 f5 ff ff       	call   80104b00 <argstr>
80105529:	83 c4 10             	add    $0x10,%esp
8010552c:	85 c0                	test   %eax,%eax
8010552e:	78 30                	js     80105560 <sys_mkdir+0x50>
80105530:	83 ec 0c             	sub    $0xc,%esp
80105533:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105536:	31 c9                	xor    %ecx,%ecx
80105538:	ba c0 41 00 00       	mov    $0x41c0,%edx
8010553d:	6a 00                	push   $0x0
8010553f:	e8 cc f6 ff ff       	call   80104c10 <create>
80105544:	83 c4 10             	add    $0x10,%esp
80105547:	85 c0                	test   %eax,%eax
80105549:	74 15                	je     80105560 <sys_mkdir+0x50>
		end_op();
		return -1;
	}
	iunlockput(ip);
8010554b:	83 ec 0c             	sub    $0xc,%esp
8010554e:	50                   	push   %eax
8010554f:	e8 bc c7 ff ff       	call   80101d10 <iunlockput>
	end_op();
80105554:	e8 d7 d6 ff ff       	call   80102c30 <end_op>
	return 0;
80105559:	83 c4 10             	add    $0x10,%esp
8010555c:	31 c0                	xor    %eax,%eax
}
8010555e:	c9                   	leave
8010555f:	c3                   	ret
		end_op();
80105560:	e8 cb d6 ff ff       	call   80102c30 <end_op>
		return -1;
80105565:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010556a:	c9                   	leave
8010556b:	c3                   	ret
8010556c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80105570 <sys_mknod>:

int
sys_mknod(void)
{
80105570:	55                   	push   %ebp
80105571:	89 e5                	mov    %esp,%ebp
80105573:	83 ec 18             	sub    $0x18,%esp
	struct inode *ip;
	char *path;
	int major, minor;

	begin_op();
80105576:	e8 45 d6 ff ff       	call   80102bc0 <begin_op>
	if ((argstr(0, &path)) < 0 || argint(1, &major) < 0 ||
8010557b:	83 ec 08             	sub    $0x8,%esp
8010557e:	8d 45 ec             	lea    -0x14(%ebp),%eax
80105581:	50                   	push   %eax
80105582:	6a 00                	push   $0x0
80105584:	e8 77 f5 ff ff       	call   80104b00 <argstr>
80105589:	83 c4 10             	add    $0x10,%esp
8010558c:	85 c0                	test   %eax,%eax
8010558e:	78 60                	js     801055f0 <sys_mknod+0x80>
80105590:	83 ec 08             	sub    $0x8,%esp
80105593:	8d 45 f0             	lea    -0x10(%ebp),%eax
80105596:	50                   	push   %eax
80105597:	6a 01                	push   $0x1
80105599:	e8 a2 f4 ff ff       	call   80104a40 <argint>
8010559e:	83 c4 10             	add    $0x10,%esp
801055a1:	85 c0                	test   %eax,%eax
801055a3:	78 4b                	js     801055f0 <sys_mknod+0x80>
			argint(2, &minor) < 0 || (ip = create(path, S_IFBLK | S_IAUSR, major, minor)) == 0) {
801055a5:	83 ec 08             	sub    $0x8,%esp
801055a8:	8d 45 f4             	lea    -0xc(%ebp),%eax
801055ab:	50                   	push   %eax
801055ac:	6a 02                	push   $0x2
801055ae:	e8 8d f4 ff ff       	call   80104a40 <argint>
	if ((argstr(0, &path)) < 0 || argint(1, &major) < 0 ||
801055b3:	83 c4 10             	add    $0x10,%esp
801055b6:	85 c0                	test   %eax,%eax
801055b8:	78 36                	js     801055f0 <sys_mknod+0x80>
			argint(2, &minor) < 0 || (ip = create(path, S_IFBLK | S_IAUSR, major, minor)) == 0) {
801055ba:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
801055be:	83 ec 0c             	sub    $0xc,%esp
801055c1:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
801055c5:	ba c0 61 00 00       	mov    $0x61c0,%edx
801055ca:	50                   	push   %eax
801055cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
801055ce:	e8 3d f6 ff ff       	call   80104c10 <create>
801055d3:	83 c4 10             	add    $0x10,%esp
801055d6:	85 c0                	test   %eax,%eax
801055d8:	74 16                	je     801055f0 <sys_mknod+0x80>
		end_op();
		return -1;
	}
	iunlockput(ip);
801055da:	83 ec 0c             	sub    $0xc,%esp
801055dd:	50                   	push   %eax
801055de:	e8 2d c7 ff ff       	call   80101d10 <iunlockput>
	end_op();
801055e3:	e8 48 d6 ff ff       	call   80102c30 <end_op>
	return 0;
801055e8:	83 c4 10             	add    $0x10,%esp
801055eb:	31 c0                	xor    %eax,%eax
}
801055ed:	c9                   	leave
801055ee:	c3                   	ret
801055ef:	90                   	nop
		end_op();
801055f0:	e8 3b d6 ff ff       	call   80102c30 <end_op>
		return -1;
801055f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
801055fa:	c9                   	leave
801055fb:	c3                   	ret
801055fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80105600 <sys_chdir>:

int
sys_chdir(void)
{
80105600:	55                   	push   %ebp
80105601:	89 e5                	mov    %esp,%ebp
80105603:	56                   	push   %esi
80105604:	53                   	push   %ebx
80105605:	83 ec 10             	sub    $0x10,%esp
	char *path;
	struct inode *ip;
	struct proc *curproc = myproc();
80105608:	e8 d3 e3 ff ff       	call   801039e0 <myproc>
8010560d:	89 c6                	mov    %eax,%esi

	begin_op();
8010560f:	e8 ac d5 ff ff       	call   80102bc0 <begin_op>
	if (argstr(0, &path) < 0 || (ip = namei(path)) == 0) {
80105614:	83 ec 08             	sub    $0x8,%esp
80105617:	8d 45 f4             	lea    -0xc(%ebp),%eax
8010561a:	50                   	push   %eax
8010561b:	6a 00                	push   $0x0
8010561d:	e8 de f4 ff ff       	call   80104b00 <argstr>
80105622:	83 c4 10             	add    $0x10,%esp
80105625:	85 c0                	test   %eax,%eax
80105627:	78 77                	js     801056a0 <sys_chdir+0xa0>
80105629:	83 ec 0c             	sub    $0xc,%esp
8010562c:	ff 75 f4             	push   -0xc(%ebp)
8010562f:	e8 8c cd ff ff       	call   801023c0 <namei>
80105634:	83 c4 10             	add    $0x10,%esp
80105637:	89 c3                	mov    %eax,%ebx
80105639:	85 c0                	test   %eax,%eax
8010563b:	74 63                	je     801056a0 <sys_chdir+0xa0>
		end_op();
		return -1;
	}
	ilock(ip);
8010563d:	83 ec 0c             	sub    $0xc,%esp
80105640:	50                   	push   %eax
80105641:	e8 1a c4 ff ff       	call   80101a60 <ilock>
	if (!S_ISDIR(ip->mode)) {
80105646:	8b 43 5c             	mov    0x5c(%ebx),%eax
80105649:	83 c4 10             	add    $0x10,%esp
8010564c:	25 00 f0 00 00       	and    $0xf000,%eax
80105651:	3d 00 40 00 00       	cmp    $0x4000,%eax
80105656:	75 28                	jne    80105680 <sys_chdir+0x80>
		iunlockput(ip);
		end_op();
		return -1;
	}
	iunlock(ip);
80105658:	83 ec 0c             	sub    $0xc,%esp
8010565b:	53                   	push   %ebx
8010565c:	e8 ff c4 ff ff       	call   80101b60 <iunlock>
	iput(curproc->cwd);
80105661:	58                   	pop    %eax
80105662:	ff 76 6c             	push   0x6c(%esi)
80105665:	e8 46 c5 ff ff       	call   80101bb0 <iput>
	end_op();
8010566a:	e8 c1 d5 ff ff       	call   80102c30 <end_op>
	curproc->cwd = ip;
8010566f:	89 5e 6c             	mov    %ebx,0x6c(%esi)
	return 0;
80105672:	83 c4 10             	add    $0x10,%esp
80105675:	31 c0                	xor    %eax,%eax
}
80105677:	8d 65 f8             	lea    -0x8(%ebp),%esp
8010567a:	5b                   	pop    %ebx
8010567b:	5e                   	pop    %esi
8010567c:	5d                   	pop    %ebp
8010567d:	c3                   	ret
8010567e:	66 90                	xchg   %ax,%ax
		iunlockput(ip);
80105680:	83 ec 0c             	sub    $0xc,%esp
80105683:	53                   	push   %ebx
80105684:	e8 87 c6 ff ff       	call   80101d10 <iunlockput>
		end_op();
80105689:	e8 a2 d5 ff ff       	call   80102c30 <end_op>
		return -1;
8010568e:	83 c4 10             	add    $0x10,%esp
		return -1;
80105691:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105696:	eb df                	jmp    80105677 <sys_chdir+0x77>
80105698:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010569f:	00 
		end_op();
801056a0:	e8 8b d5 ff ff       	call   80102c30 <end_op>
		return -1;
801056a5:	eb ea                	jmp    80105691 <sys_chdir+0x91>
801056a7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801056ae:	00 
801056af:	90                   	nop

801056b0 <sys_exec>:

int
sys_exec(void)
{
801056b0:	55                   	push   %ebp
801056b1:	89 e5                	mov    %esp,%ebp
801056b3:	57                   	push   %edi
801056b4:	56                   	push   %esi
	char *path, *argv[MAXARG];
	int i;
	uint uargv, uarg;

	if (argstr(0, &path) < 0 || argint(1, (int *)&uargv) < 0) {
801056b5:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
{
801056bb:	53                   	push   %ebx
801056bc:	81 ec a4 00 00 00    	sub    $0xa4,%esp
	if (argstr(0, &path) < 0 || argint(1, (int *)&uargv) < 0) {
801056c2:	50                   	push   %eax
801056c3:	6a 00                	push   $0x0
801056c5:	e8 36 f4 ff ff       	call   80104b00 <argstr>
801056ca:	83 c4 10             	add    $0x10,%esp
801056cd:	85 c0                	test   %eax,%eax
801056cf:	0f 88 87 00 00 00    	js     8010575c <sys_exec+0xac>
801056d5:	83 ec 08             	sub    $0x8,%esp
801056d8:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
801056de:	50                   	push   %eax
801056df:	6a 01                	push   $0x1
801056e1:	e8 5a f3 ff ff       	call   80104a40 <argint>
801056e6:	83 c4 10             	add    $0x10,%esp
801056e9:	85 c0                	test   %eax,%eax
801056eb:	78 6f                	js     8010575c <sys_exec+0xac>
		return -1;
	}
	memset(argv, 0, sizeof(argv));
801056ed:	83 ec 04             	sub    $0x4,%esp
801056f0:	8d b5 68 ff ff ff    	lea    -0x98(%ebp),%esi
	for (i = 0;; i++) {
801056f6:	31 db                	xor    %ebx,%ebx
	memset(argv, 0, sizeof(argv));
801056f8:	68 80 00 00 00       	push   $0x80
801056fd:	6a 00                	push   $0x0
801056ff:	56                   	push   %esi
80105700:	e8 8b f0 ff ff       	call   80104790 <memset>
80105705:	83 c4 10             	add    $0x10,%esp
80105708:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010570f:	00 
		if (i >= NELEM(argv))
			return -1;
		if (fetchint(uargv + 4 * i, (int *)&uarg) < 0)
80105710:	83 ec 08             	sub    $0x8,%esp
80105713:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
80105719:	8d 3c 9d 00 00 00 00 	lea    0x0(,%ebx,4),%edi
80105720:	50                   	push   %eax
80105721:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
80105727:	01 f8                	add    %edi,%eax
80105729:	50                   	push   %eax
8010572a:	e8 81 f2 ff ff       	call   801049b0 <fetchint>
8010572f:	83 c4 10             	add    $0x10,%esp
80105732:	85 c0                	test   %eax,%eax
80105734:	78 26                	js     8010575c <sys_exec+0xac>
			return -1;
		if (uarg == 0) {
80105736:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
8010573c:	85 c0                	test   %eax,%eax
8010573e:	74 30                	je     80105770 <sys_exec+0xc0>
			argv[i] = 0;
			break;
		}
		if (fetchstr(uarg, &argv[i]) < 0)
80105740:	83 ec 08             	sub    $0x8,%esp
80105743:	8d 14 3e             	lea    (%esi,%edi,1),%edx
80105746:	52                   	push   %edx
80105747:	50                   	push   %eax
80105748:	e8 a3 f2 ff ff       	call   801049f0 <fetchstr>
8010574d:	83 c4 10             	add    $0x10,%esp
80105750:	85 c0                	test   %eax,%eax
80105752:	78 08                	js     8010575c <sys_exec+0xac>
	for (i = 0;; i++) {
80105754:	83 c3 01             	add    $0x1,%ebx
		if (i >= NELEM(argv))
80105757:	83 fb 20             	cmp    $0x20,%ebx
8010575a:	75 b4                	jne    80105710 <sys_exec+0x60>
			return -1;
	}
	return exec(path, argv);
}
8010575c:	8d 65 f4             	lea    -0xc(%ebp),%esp
		return -1;
8010575f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105764:	5b                   	pop    %ebx
80105765:	5e                   	pop    %esi
80105766:	5f                   	pop    %edi
80105767:	5d                   	pop    %ebp
80105768:	c3                   	ret
80105769:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
			argv[i] = 0;
80105770:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
80105777:	00 00 00 00 
	return exec(path, argv);
8010577b:	83 ec 08             	sub    $0x8,%esp
8010577e:	56                   	push   %esi
8010577f:	ff b5 5c ff ff ff    	push   -0xa4(%ebp)
80105785:	e8 c6 b4 ff ff       	call   80100c50 <exec>
8010578a:	83 c4 10             	add    $0x10,%esp
}
8010578d:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105790:	5b                   	pop    %ebx
80105791:	5e                   	pop    %esi
80105792:	5f                   	pop    %edi
80105793:	5d                   	pop    %ebp
80105794:	c3                   	ret
80105795:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010579c:	00 
8010579d:	8d 76 00             	lea    0x0(%esi),%esi

801057a0 <sys_pipe>:

int
sys_pipe(void)
{
801057a0:	55                   	push   %ebp
801057a1:	89 e5                	mov    %esp,%ebp
801057a3:	57                   	push   %edi
801057a4:	56                   	push   %esi
	int *fd;
	struct file *rf, *wf;
	int fd0, fd1;

	if (argptr(0, (void *)&fd, 2 * sizeof(fd[0])) < 0)
801057a5:	8d 45 dc             	lea    -0x24(%ebp),%eax
{
801057a8:	53                   	push   %ebx
801057a9:	83 ec 20             	sub    $0x20,%esp
	if (argptr(0, (void *)&fd, 2 * sizeof(fd[0])) < 0)
801057ac:	6a 08                	push   $0x8
801057ae:	50                   	push   %eax
801057af:	6a 00                	push   $0x0
801057b1:	e8 da f2 ff ff       	call   80104a90 <argptr>
801057b6:	83 c4 10             	add    $0x10,%esp
801057b9:	85 c0                	test   %eax,%eax
801057bb:	0f 88 8b 00 00 00    	js     8010584c <sys_pipe+0xac>
		return -1;
	if (pipealloc(&rf, &wf) < 0)
801057c1:	83 ec 08             	sub    $0x8,%esp
801057c4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
801057c7:	50                   	push   %eax
801057c8:	8d 45 e0             	lea    -0x20(%ebp),%eax
801057cb:	50                   	push   %eax
801057cc:	e8 8f dc ff ff       	call   80103460 <pipealloc>
801057d1:	83 c4 10             	add    $0x10,%esp
801057d4:	85 c0                	test   %eax,%eax
801057d6:	78 74                	js     8010584c <sys_pipe+0xac>
		return -1;
	fd0 = -1;
	if ((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0) {
801057d8:	8b 7d e0             	mov    -0x20(%ebp),%edi
	for (fd = 0; fd < NOFILE; fd++) {
801057db:	31 db                	xor    %ebx,%ebx
	struct proc *curproc = myproc();
801057dd:	e8 fe e1 ff ff       	call   801039e0 <myproc>
		if (curproc->ofile[fd] == 0) {
801057e2:	8b 74 98 2c          	mov    0x2c(%eax,%ebx,4),%esi
801057e6:	85 f6                	test   %esi,%esi
801057e8:	74 16                	je     80105800 <sys_pipe+0x60>
801057ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
	for (fd = 0; fd < NOFILE; fd++) {
801057f0:	83 c3 01             	add    $0x1,%ebx
801057f3:	83 fb 10             	cmp    $0x10,%ebx
801057f6:	74 3d                	je     80105835 <sys_pipe+0x95>
		if (curproc->ofile[fd] == 0) {
801057f8:	8b 74 98 2c          	mov    0x2c(%eax,%ebx,4),%esi
801057fc:	85 f6                	test   %esi,%esi
801057fe:	75 f0                	jne    801057f0 <sys_pipe+0x50>
			curproc->ofile[fd] = f;
80105800:	8d 73 08             	lea    0x8(%ebx),%esi
80105803:	89 7c b0 0c          	mov    %edi,0xc(%eax,%esi,4)
	if ((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0) {
80105807:	8b 7d e4             	mov    -0x1c(%ebp),%edi
	struct proc *curproc = myproc();
8010580a:	e8 d1 e1 ff ff       	call   801039e0 <myproc>
	for (fd = 0; fd < NOFILE; fd++) {
8010580f:	31 d2                	xor    %edx,%edx
80105811:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		if (curproc->ofile[fd] == 0) {
80105818:	8b 4c 90 2c          	mov    0x2c(%eax,%edx,4),%ecx
8010581c:	85 c9                	test   %ecx,%ecx
8010581e:	74 38                	je     80105858 <sys_pipe+0xb8>
	for (fd = 0; fd < NOFILE; fd++) {
80105820:	83 c2 01             	add    $0x1,%edx
80105823:	83 fa 10             	cmp    $0x10,%edx
80105826:	75 f0                	jne    80105818 <sys_pipe+0x78>
		if (fd0 >= 0)
			myproc()->ofile[fd0] = 0;
80105828:	e8 b3 e1 ff ff       	call   801039e0 <myproc>
8010582d:	c7 44 b0 0c 00 00 00 	movl   $0x0,0xc(%eax,%esi,4)
80105834:	00 
		fileclose(rf);
80105835:	83 ec 0c             	sub    $0xc,%esp
80105838:	ff 75 e0             	push   -0x20(%ebp)
8010583b:	e8 b0 b8 ff ff       	call   801010f0 <fileclose>
		fileclose(wf);
80105840:	58                   	pop    %eax
80105841:	ff 75 e4             	push   -0x1c(%ebp)
80105844:	e8 a7 b8 ff ff       	call   801010f0 <fileclose>
		return -1;
80105849:	83 c4 10             	add    $0x10,%esp
		return -1;
8010584c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105851:	eb 16                	jmp    80105869 <sys_pipe+0xc9>
80105853:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
			curproc->ofile[fd] = f;
80105858:	89 7c 90 2c          	mov    %edi,0x2c(%eax,%edx,4)
	}
	fd[0] = fd0;
8010585c:	8b 45 dc             	mov    -0x24(%ebp),%eax
8010585f:	89 18                	mov    %ebx,(%eax)
	fd[1] = fd1;
80105861:	8b 45 dc             	mov    -0x24(%ebp),%eax
80105864:	89 50 04             	mov    %edx,0x4(%eax)
	return 0;
80105867:	31 c0                	xor    %eax,%eax
}
80105869:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010586c:	5b                   	pop    %ebx
8010586d:	5e                   	pop    %esi
8010586e:	5f                   	pop    %edi
8010586f:	5d                   	pop    %ebp
80105870:	c3                   	ret
80105871:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80105878:	00 
80105879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80105880 <sys_chmod>:

int
sys_chmod(void)
{
80105880:	55                   	push   %ebp
80105881:	89 e5                	mov    %esp,%ebp
80105883:	53                   	push   %ebx
80105884:	83 ec 14             	sub    $0x14,%esp
	char *path;
	int mode;
	struct inode *ip;
	begin_op();
80105887:	e8 34 d3 ff ff       	call   80102bc0 <begin_op>
	if (argstr(0, &path) < 0 || argint(1, (int *)&mode) < 0 ||
8010588c:	83 ec 08             	sub    $0x8,%esp
8010588f:	8d 45 f0             	lea    -0x10(%ebp),%eax
80105892:	50                   	push   %eax
80105893:	6a 00                	push   $0x0
80105895:	e8 66 f2 ff ff       	call   80104b00 <argstr>
8010589a:	83 c4 10             	add    $0x10,%esp
8010589d:	85 c0                	test   %eax,%eax
8010589f:	78 5f                	js     80105900 <sys_chmod+0x80>
801058a1:	83 ec 08             	sub    $0x8,%esp
801058a4:	8d 45 f4             	lea    -0xc(%ebp),%eax
801058a7:	50                   	push   %eax
801058a8:	6a 01                	push   $0x1
801058aa:	e8 91 f1 ff ff       	call   80104a40 <argint>
801058af:	83 c4 10             	add    $0x10,%esp
801058b2:	85 c0                	test   %eax,%eax
801058b4:	78 4a                	js     80105900 <sys_chmod+0x80>
			(ip = namei(path)) == 0) {
801058b6:	83 ec 0c             	sub    $0xc,%esp
801058b9:	ff 75 f0             	push   -0x10(%ebp)
801058bc:	e8 ff ca ff ff       	call   801023c0 <namei>
	if (argstr(0, &path) < 0 || argint(1, (int *)&mode) < 0 ||
801058c1:	83 c4 10             	add    $0x10,%esp
			(ip = namei(path)) == 0) {
801058c4:	89 c3                	mov    %eax,%ebx
	if (argstr(0, &path) < 0 || argint(1, (int *)&mode) < 0 ||
801058c6:	85 c0                	test   %eax,%eax
801058c8:	74 36                	je     80105900 <sys_chmod+0x80>
		end_op();
		return -1; // EINVAL?
	}
	ilock(ip);
801058ca:	83 ec 0c             	sub    $0xc,%esp
801058cd:	50                   	push   %eax
801058ce:	e8 8d c1 ff ff       	call   80101a60 <ilock>
	// capture the file type and change the permissions
	ip->mode = (ip->mode & S_IFMT) | mode;
801058d3:	8b 43 5c             	mov    0x5c(%ebx),%eax
801058d6:	25 00 f0 00 00       	and    $0xf000,%eax
801058db:	0b 45 f4             	or     -0xc(%ebp),%eax
801058de:	89 43 5c             	mov    %eax,0x5c(%ebx)
	iunlock(ip);
801058e1:	89 1c 24             	mov    %ebx,(%esp)
801058e4:	e8 77 c2 ff ff       	call   80101b60 <iunlock>
	end_op();
801058e9:	e8 42 d3 ff ff       	call   80102c30 <end_op>
	return 0;
801058ee:	83 c4 10             	add    $0x10,%esp
801058f1:	31 c0                	xor    %eax,%eax
}
801058f3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801058f6:	c9                   	leave
801058f7:	c3                   	ret
801058f8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801058ff:	00 
		end_op();
80105900:	e8 2b d3 ff ff       	call   80102c30 <end_op>
		return -1; // EINVAL?
80105905:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010590a:	eb e7                	jmp    801058f3 <sys_chmod+0x73>
8010590c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80105910 <sys_echoout>:

int
sys_echoout(void)
{
80105910:	55                   	push   %ebp
80105911:	89 e5                	mov    %esp,%ebp
80105913:	83 ec 18             	sub    $0x18,%esp
	int answer;
	begin_op();
80105916:	e8 a5 d2 ff ff       	call   80102bc0 <begin_op>
	if (argint(0, &answer) < 0) {
8010591b:	83 ec 08             	sub    $0x8,%esp
8010591e:	8d 45 f4             	lea    -0xc(%ebp),%eax
80105921:	50                   	push   %eax
80105922:	6a 00                	push   $0x0
80105924:	e8 17 f1 ff ff       	call   80104a40 <argint>
80105929:	83 c4 10             	add    $0x10,%esp
8010592c:	85 c0                	test   %eax,%eax
8010592e:	78 11                	js     80105941 <sys_echoout+0x31>
		end_op();
		return -1;
	}
	echo_out = answer;
80105930:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105933:	a3 04 a0 10 80       	mov    %eax,0x8010a004
	end_op();
80105938:	e8 f3 d2 ff ff       	call   80102c30 <end_op>
	return 0;
8010593d:	31 c0                	xor    %eax,%eax
}
8010593f:	c9                   	leave
80105940:	c3                   	ret
		end_op();
80105941:	e8 ea d2 ff ff       	call   80102c30 <end_op>
		return -1;
80105946:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
8010594b:	c9                   	leave
8010594c:	c3                   	ret
8010594d:	66 90                	xchg   %ax,%ax
8010594f:	90                   	nop

80105950 <sys_fork>:
#include "console.h"

int
sys_fork(void)
{
	return fork();
80105950:	e9 2b e2 ff ff       	jmp    80103b80 <fork>
80105955:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010595c:	00 
8010595d:	8d 76 00             	lea    0x0(%esi),%esi

80105960 <sys_exit>:
}

int
sys_exit(void)
{
80105960:	55                   	push   %ebp
80105961:	89 e5                	mov    %esp,%ebp
80105963:	83 ec 20             	sub    $0x20,%esp
	int status;
	if (argint(0, &status) < 0)
80105966:	8d 45 f4             	lea    -0xc(%ebp),%eax
80105969:	50                   	push   %eax
8010596a:	6a 00                	push   $0x0
8010596c:	e8 cf f0 ff ff       	call   80104a40 <argint>
80105971:	83 c4 10             	add    $0x10,%esp
80105974:	85 c0                	test   %eax,%eax
80105976:	79 07                	jns    8010597f <sys_exit+0x1f>
		return -1;
	exit(status);
	return 0; // not reached
}
80105978:	c9                   	leave
80105979:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
8010597e:	c3                   	ret
	exit(status);
8010597f:	83 ec 0c             	sub    $0xc,%esp
80105982:	ff 75 f4             	push   -0xc(%ebp)
80105985:	e8 96 e4 ff ff       	call   80103e20 <exit>
8010598a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80105990 <sys_wait>:

int
sys_wait(void)
{
80105990:	55                   	push   %ebp
80105991:	89 e5                	mov    %esp,%ebp
80105993:	83 ec 1c             	sub    $0x1c,%esp
	// very strange: is this correct behavior?
	int *status;
	if (argptr(0, (char **)&status, 1) < 0)
80105996:	8d 45 f4             	lea    -0xc(%ebp),%eax
80105999:	6a 01                	push   $0x1
8010599b:	50                   	push   %eax
8010599c:	6a 00                	push   $0x0
8010599e:	e8 ed f0 ff ff       	call   80104a90 <argptr>
801059a3:	83 c4 10             	add    $0x10,%esp
801059a6:	85 c0                	test   %eax,%eax
801059a8:	78 16                	js     801059c0 <sys_wait+0x30>
		return -1;
	return wait(status);
801059aa:	83 ec 0c             	sub    $0xc,%esp
801059ad:	ff 75 f4             	push   -0xc(%ebp)
801059b0:	e8 9b e5 ff ff       	call   80103f50 <wait>
801059b5:	83 c4 10             	add    $0x10,%esp
}
801059b8:	c9                   	leave
801059b9:	c3                   	ret
801059ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801059c0:	c9                   	leave
		return -1;
801059c1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
801059c6:	c3                   	ret
801059c7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801059ce:	00 
801059cf:	90                   	nop

801059d0 <sys_kill>:

int
sys_kill(void)
{
801059d0:	55                   	push   %ebp
801059d1:	89 e5                	mov    %esp,%ebp
801059d3:	83 ec 20             	sub    $0x20,%esp
	int pid;

	if (argint(0, &pid) < 0)
801059d6:	8d 45 f4             	lea    -0xc(%ebp),%eax
801059d9:	50                   	push   %eax
801059da:	6a 00                	push   $0x0
801059dc:	e8 5f f0 ff ff       	call   80104a40 <argint>
801059e1:	83 c4 10             	add    $0x10,%esp
801059e4:	85 c0                	test   %eax,%eax
801059e6:	78 18                	js     80105a00 <sys_kill+0x30>
		return -1;
	return kill(pid);
801059e8:	83 ec 0c             	sub    $0xc,%esp
801059eb:	ff 75 f4             	push   -0xc(%ebp)
801059ee:	e8 1d e8 ff ff       	call   80104210 <kill>
801059f3:	83 c4 10             	add    $0x10,%esp
}
801059f6:	c9                   	leave
801059f7:	c3                   	ret
801059f8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801059ff:	00 
80105a00:	c9                   	leave
		return -1;
80105a01:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105a06:	c3                   	ret
80105a07:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80105a0e:	00 
80105a0f:	90                   	nop

80105a10 <sys_getpid>:

int
sys_getpid(void)
{
80105a10:	55                   	push   %ebp
80105a11:	89 e5                	mov    %esp,%ebp
80105a13:	83 ec 08             	sub    $0x8,%esp
	return myproc()->pid;
80105a16:	e8 c5 df ff ff       	call   801039e0 <myproc>
80105a1b:	8b 40 10             	mov    0x10(%eax),%eax
}
80105a1e:	c9                   	leave
80105a1f:	c3                   	ret

80105a20 <sys_sbrk>:

int
sys_sbrk(void)
{
80105a20:	55                   	push   %ebp
80105a21:	89 e5                	mov    %esp,%ebp
80105a23:	53                   	push   %ebx
	int addr;
	int n;

	if (argint(0, &n) < 0)
80105a24:	8d 45 f4             	lea    -0xc(%ebp),%eax
{
80105a27:	83 ec 1c             	sub    $0x1c,%esp
	if (argint(0, &n) < 0)
80105a2a:	50                   	push   %eax
80105a2b:	6a 00                	push   $0x0
80105a2d:	e8 0e f0 ff ff       	call   80104a40 <argint>
80105a32:	83 c4 10             	add    $0x10,%esp
80105a35:	85 c0                	test   %eax,%eax
80105a37:	78 27                	js     80105a60 <sys_sbrk+0x40>
		return -1;
	addr = myproc()->sz;
80105a39:	e8 a2 df ff ff       	call   801039e0 <myproc>
	if (growproc(n) < 0)
80105a3e:	83 ec 0c             	sub    $0xc,%esp
	addr = myproc()->sz;
80105a41:	8b 18                	mov    (%eax),%ebx
	if (growproc(n) < 0)
80105a43:	ff 75 f4             	push   -0xc(%ebp)
80105a46:	e8 b5 e0 ff ff       	call   80103b00 <growproc>
80105a4b:	83 c4 10             	add    $0x10,%esp
80105a4e:	85 c0                	test   %eax,%eax
80105a50:	78 0e                	js     80105a60 <sys_sbrk+0x40>
		return -1;
	return addr;
}
80105a52:	89 d8                	mov    %ebx,%eax
80105a54:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80105a57:	c9                   	leave
80105a58:	c3                   	ret
80105a59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		return -1;
80105a60:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
80105a65:	eb eb                	jmp    80105a52 <sys_sbrk+0x32>
80105a67:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80105a6e:	00 
80105a6f:	90                   	nop

80105a70 <sys_sleep>:

int
sys_sleep(void)
{
80105a70:	55                   	push   %ebp
80105a71:	89 e5                	mov    %esp,%ebp
80105a73:	53                   	push   %ebx
	int n;
	uint ticks0;

	if (argint(0, &n) < 0)
80105a74:	8d 45 f4             	lea    -0xc(%ebp),%eax
{
80105a77:	83 ec 1c             	sub    $0x1c,%esp
	if (argint(0, &n) < 0)
80105a7a:	50                   	push   %eax
80105a7b:	6a 00                	push   $0x0
80105a7d:	e8 be ef ff ff       	call   80104a40 <argint>
80105a82:	83 c4 10             	add    $0x10,%esp
80105a85:	85 c0                	test   %eax,%eax
80105a87:	78 64                	js     80105aed <sys_sleep+0x7d>
		return -1;
	acquire(&tickslock);
80105a89:	83 ec 0c             	sub    $0xc,%esp
80105a8c:	68 40 8a 13 80       	push   $0x80138a40
80105a91:	e8 fa eb ff ff       	call   80104690 <acquire>
	ticks0 = ticks;
	while (ticks - ticks0 < n) {
80105a96:	8b 55 f4             	mov    -0xc(%ebp),%edx
	ticks0 = ticks;
80105a99:	8b 1d 20 8a 13 80    	mov    0x80138a20,%ebx
	while (ticks - ticks0 < n) {
80105a9f:	83 c4 10             	add    $0x10,%esp
80105aa2:	85 d2                	test   %edx,%edx
80105aa4:	75 2b                	jne    80105ad1 <sys_sleep+0x61>
80105aa6:	eb 58                	jmp    80105b00 <sys_sleep+0x90>
80105aa8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80105aaf:	00 
		if (myproc()->killed) {
			release(&tickslock);
			return -1;
		}
		sleep(&ticks, &tickslock);
80105ab0:	83 ec 08             	sub    $0x8,%esp
80105ab3:	68 40 8a 13 80       	push   $0x80138a40
80105ab8:	68 20 8a 13 80       	push   $0x80138a20
80105abd:	e8 2e e6 ff ff       	call   801040f0 <sleep>
	while (ticks - ticks0 < n) {
80105ac2:	a1 20 8a 13 80       	mov    0x80138a20,%eax
80105ac7:	83 c4 10             	add    $0x10,%esp
80105aca:	29 d8                	sub    %ebx,%eax
80105acc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
80105acf:	73 2f                	jae    80105b00 <sys_sleep+0x90>
		if (myproc()->killed) {
80105ad1:	e8 0a df ff ff       	call   801039e0 <myproc>
80105ad6:	8b 40 28             	mov    0x28(%eax),%eax
80105ad9:	85 c0                	test   %eax,%eax
80105adb:	74 d3                	je     80105ab0 <sys_sleep+0x40>
			release(&tickslock);
80105add:	83 ec 0c             	sub    $0xc,%esp
80105ae0:	68 40 8a 13 80       	push   $0x80138a40
80105ae5:	e8 46 eb ff ff       	call   80104630 <release>
			return -1;
80105aea:	83 c4 10             	add    $0x10,%esp
	}
	release(&tickslock);
	return 0;
}
80105aed:	8b 5d fc             	mov    -0x4(%ebp),%ebx
		return -1;
80105af0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80105af5:	c9                   	leave
80105af6:	c3                   	ret
80105af7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80105afe:	00 
80105aff:	90                   	nop
	release(&tickslock);
80105b00:	83 ec 0c             	sub    $0xc,%esp
80105b03:	68 40 8a 13 80       	push   $0x80138a40
80105b08:	e8 23 eb ff ff       	call   80104630 <release>
}
80105b0d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
	return 0;
80105b10:	83 c4 10             	add    $0x10,%esp
80105b13:	31 c0                	xor    %eax,%eax
}
80105b15:	c9                   	leave
80105b16:	c3                   	ret
80105b17:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80105b1e:	00 
80105b1f:	90                   	nop

80105b20 <sys_uptime>:

// return how many clock tick interrupts have occurred
// since start.
int
sys_uptime(void)
{
80105b20:	55                   	push   %ebp
80105b21:	89 e5                	mov    %esp,%ebp
80105b23:	53                   	push   %ebx
80105b24:	83 ec 10             	sub    $0x10,%esp
	uint xticks;

	acquire(&tickslock);
80105b27:	68 40 8a 13 80       	push   $0x80138a40
80105b2c:	e8 5f eb ff ff       	call   80104690 <acquire>
	xticks = ticks;
80105b31:	8b 1d 20 8a 13 80    	mov    0x80138a20,%ebx
	release(&tickslock);
80105b37:	c7 04 24 40 8a 13 80 	movl   $0x80138a40,(%esp)
80105b3e:	e8 ed ea ff ff       	call   80104630 <release>
	return xticks;
}
80105b43:	89 d8                	mov    %ebx,%eax
80105b45:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80105b48:	c9                   	leave
80105b49:	c3                   	ret
80105b4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80105b50 <sys_date>:

int
sys_date(void)
{
80105b50:	55                   	push   %ebp
80105b51:	89 e5                	mov    %esp,%ebp
80105b53:	83 ec 08             	sub    $0x8,%esp
	struct rtcdate *r = (struct rtcdate *)(myproc()->tf->esp + 4 + 4 * 6);
80105b56:	e8 85 de ff ff       	call   801039e0 <myproc>
	cmostime(r);
80105b5b:	83 ec 0c             	sub    $0xc,%esp
	struct rtcdate *r = (struct rtcdate *)(myproc()->tf->esp + 4 + 4 * 6);
80105b5e:	8b 40 1c             	mov    0x1c(%eax),%eax
80105b61:	8b 40 44             	mov    0x44(%eax),%eax
80105b64:	83 c0 1c             	add    $0x1c,%eax
	cmostime(r);
80105b67:	50                   	push   %eax
80105b68:	e8 d3 1f 00 00       	call   80107b40 <cmostime>
	return 0;
}
80105b6d:	31 c0                	xor    %eax,%eax
80105b6f:	c9                   	leave
80105b70:	c3                   	ret
80105b71:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80105b78:	00 
80105b79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80105b80 <sys_reboot>:
	outw(0x604, 0x0 | 0x2000);
	exit(0); // get rid of "noreturn" warning
}
int
sys_reboot(void)
{
80105b80:	55                   	push   %ebp
80105b81:	89 e5                	mov    %esp,%ebp
80105b83:	83 ec 20             	sub    $0x20,%esp
	int cmd;
	if (argint(0, &cmd) < 0) {
80105b86:	8d 45 f4             	lea    -0xc(%ebp),%eax
80105b89:	50                   	push   %eax
80105b8a:	6a 00                	push   $0x0
80105b8c:	e8 af ee ff ff       	call   80104a40 <argint>
80105b91:	83 c4 10             	add    $0x10,%esp
80105b94:	85 c0                	test   %eax,%eax
80105b96:	78 11                	js     80105ba9 <sys_reboot+0x29>
		return -1;
	}

	switch (cmd) {
80105b98:	8b 45 f4             	mov    -0xc(%ebp),%eax
80105b9b:	3d 34 12 00 00       	cmp    $0x1234,%eax
80105ba0:	74 2d                	je     80105bcf <sys_reboot+0x4f>
80105ba2:	3d ad de 00 00       	cmp    $0xdead,%eax
80105ba7:	74 07                	je     80105bb0 <sys_reboot+0x30>
		return 0;
		break;
	default:
		return -1;
	}
}
80105ba9:	c9                   	leave
80105baa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105baf:	c3                   	ret
		kill(1);
80105bb0:	83 ec 0c             	sub    $0xc,%esp
80105bb3:	6a 01                	push   $0x1
80105bb5:	e8 56 e6 ff ff       	call   80104210 <kill>
		cprintf("System Halted.\n");
80105bba:	c7 04 24 12 85 10 80 	movl   $0x80108512,(%esp)
80105bc1:	e8 8a ab ff ff       	call   80100750 <cprintf>
	__asm__ __volatile__("cli");
80105bc6:	fa                   	cli
	__asm__ __volatile__("hlt");
80105bc7:	f4                   	hlt
		return 0;
80105bc8:	31 c0                	xor    %eax,%eax
80105bca:	83 c4 10             	add    $0x10,%esp
}
80105bcd:	c9                   	leave
80105bce:	c3                   	ret
		kill(1);
80105bcf:	83 ec 0c             	sub    $0xc,%esp
80105bd2:	6a 01                	push   $0x1
80105bd4:	e8 37 e6 ff ff       	call   80104210 <kill>
		cprintf("Shutting down.\n");
80105bd9:	c7 04 24 02 85 10 80 	movl   $0x80108502,(%esp)
80105be0:	e8 6b ab ff ff       	call   80100750 <cprintf>
	kill(0);
80105be5:	31 c0                	xor    %eax,%eax
80105be7:	89 04 24             	mov    %eax,(%esp)
80105bea:	e8 21 e6 ff ff       	call   80104210 <kill>
	kill(1);
80105bef:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
80105bf6:	e8 15 e6 ff ff       	call   80104210 <kill>
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
80105bfb:	b8 00 20 00 00       	mov    $0x2000,%eax
80105c00:	ba 04 b0 ff ff       	mov    $0xffffb004,%edx
80105c05:	66 ef                	out    %ax,(%dx)
80105c07:	ba 04 06 00 00       	mov    $0x604,%edx
80105c0c:	66 ef                	out    %ax,(%dx)
	exit(0); // get rid of "noreturn" warning
80105c0e:	31 d2                	xor    %edx,%edx
80105c10:	89 14 24             	mov    %edx,(%esp)
80105c13:	e8 08 e2 ff ff       	call   80103e20 <exit>
80105c18:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80105c1f:	00 

80105c20 <sys_setuid>:

int
sys_setuid(void)
{
80105c20:	55                   	push   %ebp
80105c21:	89 e5                	mov    %esp,%ebp
80105c23:	53                   	push   %ebx
80105c24:	83 ec 14             	sub    $0x14,%esp
	// cannot setuid if not root
	if (myproc()->cred.uid != 0)
80105c27:	e8 b4 dd ff ff       	call   801039e0 <myproc>
80105c2c:	8b 40 70             	mov    0x70(%eax),%eax
80105c2f:	85 c0                	test   %eax,%eax
80105c31:	75 2d                	jne    80105c60 <sys_setuid+0x40>
		return -1;
	int uid;
	if (argint(0, &uid) < 0)
80105c33:	83 ec 08             	sub    $0x8,%esp
80105c36:	8d 45 f4             	lea    -0xc(%ebp),%eax
80105c39:	50                   	push   %eax
80105c3a:	6a 00                	push   $0x0
80105c3c:	e8 ff ed ff ff       	call   80104a40 <argint>
80105c41:	83 c4 10             	add    $0x10,%esp
80105c44:	85 c0                	test   %eax,%eax
80105c46:	78 18                	js     80105c60 <sys_setuid+0x40>
		return -1;
	struct cred cred;
	cred.uid = uid;
80105c48:	8b 5d f4             	mov    -0xc(%ebp),%ebx
	cred.gids[0] = uid;
	myproc()->cred = cred;
80105c4b:	e8 90 dd ff ff       	call   801039e0 <myproc>
80105c50:	89 58 70             	mov    %ebx,0x70(%eax)
80105c53:	89 58 74             	mov    %ebx,0x74(%eax)
	return 0;
80105c56:	31 c0                	xor    %eax,%eax
}
80105c58:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80105c5b:	c9                   	leave
80105c5c:	c3                   	ret
80105c5d:	8d 76 00             	lea    0x0(%esi),%esi
		return -1;
80105c60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105c65:	eb f1                	jmp    80105c58 <sys_setuid+0x38>
80105c67:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80105c6e:	00 
80105c6f:	90                   	nop

80105c70 <sys_strace>:

int
sys_strace(void)
{
80105c70:	55                   	push   %ebp
80105c71:	89 e5                	mov    %esp,%ebp
80105c73:	53                   	push   %ebx
	char *trace_ptr;
	if (argptr(0, &trace_ptr, SYSCALL_AMT) < 0)
80105c74:	8d 45 f4             	lea    -0xc(%ebp),%eax
{
80105c77:	83 ec 18             	sub    $0x18,%esp
	if (argptr(0, &trace_ptr, SYSCALL_AMT) < 0)
80105c7a:	6a 1b                	push   $0x1b
80105c7c:	50                   	push   %eax
80105c7d:	6a 00                	push   $0x0
80105c7f:	e8 0c ee ff ff       	call   80104a90 <argptr>
80105c84:	83 c4 10             	add    $0x10,%esp
80105c87:	85 c0                	test   %eax,%eax
80105c89:	78 25                	js     80105cb0 <sys_strace+0x40>
		return -1;
	memmove(myproc()->strace_mask_ptr, trace_ptr, SYSCALL_AMT);
80105c8b:	8b 5d f4             	mov    -0xc(%ebp),%ebx
80105c8e:	e8 4d dd ff ff       	call   801039e0 <myproc>
80105c93:	83 ec 04             	sub    $0x4,%esp
80105c96:	05 04 01 00 00       	add    $0x104,%eax
80105c9b:	6a 1b                	push   $0x1b
80105c9d:	53                   	push   %ebx
80105c9e:	50                   	push   %eax
80105c9f:	e8 7c eb ff ff       	call   80104820 <memmove>
	return 0;
80105ca4:	83 c4 10             	add    $0x10,%esp
80105ca7:	31 c0                	xor    %eax,%eax
}
80105ca9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80105cac:	c9                   	leave
80105cad:	c3                   	ret
80105cae:	66 90                	xchg   %ax,%ax
		return -1;
80105cb0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
80105cb5:	eb f2                	jmp    80105ca9 <sys_strace+0x39>
80105cb7:	66 90                	xchg   %ax,%ax
80105cb9:	66 90                	xchg   %ax,%ax
80105cbb:	66 90                	xchg   %ax,%ax
80105cbd:	66 90                	xchg   %ax,%ax
80105cbf:	90                   	nop

80105cc0 <tvinit>:
struct spinlock tickslock;
uint ticks;

void
tvinit(void)
{
80105cc0:	55                   	push   %ebp
	int i;

	for (i = 0; i < 256; i++)
80105cc1:	31 c0                	xor    %eax,%eax
{
80105cc3:	89 e5                	mov    %esp,%ebp
80105cc5:	83 ec 08             	sub    $0x8,%esp
80105cc8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80105ccf:	00 
		SETGATE(idt[i], 0, SEG_KCODE << 3, vectors[i], 0);
80105cd0:	8b 14 85 60 c0 10 80 	mov    -0x7fef3fa0(,%eax,4),%edx
80105cd7:	c7 04 c5 82 8a 13 80 	movl   $0x8e000008,-0x7fec757e(,%eax,8)
80105cde:	08 00 00 8e 
80105ce2:	66 89 14 c5 80 8a 13 	mov    %dx,-0x7fec7580(,%eax,8)
80105ce9:	80 
80105cea:	c1 ea 10             	shr    $0x10,%edx
80105ced:	66 89 14 c5 86 8a 13 	mov    %dx,-0x7fec757a(,%eax,8)
80105cf4:	80 
	for (i = 0; i < 256; i++)
80105cf5:	83 c0 01             	add    $0x1,%eax
80105cf8:	3d 00 01 00 00       	cmp    $0x100,%eax
80105cfd:	75 d1                	jne    80105cd0 <tvinit+0x10>
	SETGATE(idt[T_SYSCALL], 1, SEG_KCODE << 3, vectors[T_SYSCALL], DPL_USER);

	initlock(&tickslock, "time");
80105cff:	83 ec 08             	sub    $0x8,%esp
	SETGATE(idt[T_SYSCALL], 1, SEG_KCODE << 3, vectors[T_SYSCALL], DPL_USER);
80105d02:	a1 60 c1 10 80       	mov    0x8010c160,%eax
80105d07:	c7 05 82 8c 13 80 08 	movl   $0xef000008,0x80138c82
80105d0e:	00 00 ef 
	initlock(&tickslock, "time");
80105d11:	68 5c 84 10 80       	push   $0x8010845c
80105d16:	68 40 8a 13 80       	push   $0x80138a40
	SETGATE(idt[T_SYSCALL], 1, SEG_KCODE << 3, vectors[T_SYSCALL], DPL_USER);
80105d1b:	66 a3 80 8c 13 80    	mov    %ax,0x80138c80
80105d21:	c1 e8 10             	shr    $0x10,%eax
80105d24:	66 a3 86 8c 13 80    	mov    %ax,0x80138c86
	initlock(&tickslock, "time");
80105d2a:	e8 71 e7 ff ff       	call   801044a0 <initlock>
}
80105d2f:	83 c4 10             	add    $0x10,%esp
80105d32:	c9                   	leave
80105d33:	c3                   	ret
80105d34:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80105d3b:	00 
80105d3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80105d40 <idtinit>:

void
idtinit(void)
{
80105d40:	55                   	push   %ebp
	pd[0] = size - 1;
80105d41:	b8 ff 07 00 00       	mov    $0x7ff,%eax
80105d46:	89 e5                	mov    %esp,%ebp
80105d48:	83 ec 10             	sub    $0x10,%esp
80105d4b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	pd[1] = (uint)p;
80105d4f:	b8 80 8a 13 80       	mov    $0x80138a80,%eax
80105d54:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	pd[2] = (uint)p >> 16;
80105d58:	c1 e8 10             	shr    $0x10,%eax
80105d5b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	__asm__ __volatile__("lidt (%0)" : : "r"(pd));
80105d5f:	8d 45 fa             	lea    -0x6(%ebp),%eax
80105d62:	0f 01 18             	lidtl  (%eax)
	lidt(idt, sizeof(idt));
}
80105d65:	c9                   	leave
80105d66:	c3                   	ret
80105d67:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80105d6e:	00 
80105d6f:	90                   	nop

80105d70 <trap>:

void
trap(struct trapframe *tf)
{
80105d70:	55                   	push   %ebp
80105d71:	89 e5                	mov    %esp,%ebp
80105d73:	57                   	push   %edi
80105d74:	56                   	push   %esi
80105d75:	53                   	push   %ebx
80105d76:	83 ec 1c             	sub    $0x1c,%esp
80105d79:	8b 5d 08             	mov    0x8(%ebp),%ebx
	if (tf->trapno == T_SYSCALL) {
80105d7c:	8b 43 30             	mov    0x30(%ebx),%eax
80105d7f:	83 f8 40             	cmp    $0x40,%eax
80105d82:	0f 84 88 00 00 00    	je     80105e10 <trap+0xa0>
		if (myproc()->killed)
			exit(0);
		return;
	}

	switch (tf->trapno) {
80105d88:	83 f8 3f             	cmp    $0x3f,%eax
80105d8b:	0f 87 af 00 00 00    	ja     80105e40 <trap+0xd0>
80105d91:	ff 24 85 70 8b 10 80 	jmp    *-0x7fef7490(,%eax,4)
80105d98:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80105d9f:	00 
			release(&tickslock);
		}
		lapiceoi();
		break;
	case T_IRQ0 + IRQ_IDE:
		ideintr();
80105da0:	e8 cb c7 ff ff       	call   80102570 <ideintr>
		lapiceoi();
80105da5:	e8 76 1c 00 00       	call   80107a20 <lapiceoi>
		break;
80105daa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
	}

	// Force process exit if it has been killed and is in user space.
	// (If it is still executing in the kernel, let it keep running
	// until it gets to the regular system call return.)
	if (myproc() && myproc()->killed && (tf->cs & 3) == DPL_USER)
80105db0:	e8 2b dc ff ff       	call   801039e0 <myproc>
80105db5:	85 c0                	test   %eax,%eax
80105db7:	74 16                	je     80105dcf <trap+0x5f>
80105db9:	e8 22 dc ff ff       	call   801039e0 <myproc>
80105dbe:	8b 50 28             	mov    0x28(%eax),%edx
80105dc1:	85 d2                	test   %edx,%edx
80105dc3:	74 0a                	je     80105dcf <trap+0x5f>
80105dc5:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
80105dc9:	f7 d0                	not    %eax
80105dcb:	a8 03                	test   $0x3,%al
80105dcd:	74 66                	je     80105e35 <trap+0xc5>
		exit(0);

	// Force process to give up CPU on clock tick.
	// If interrupts were on while locks held, would need to check nlock.
	if (myproc() && myproc()->state == RUNNING &&
80105dcf:	e8 0c dc ff ff       	call   801039e0 <myproc>
80105dd4:	85 c0                	test   %eax,%eax
80105dd6:	74 0f                	je     80105de7 <trap+0x77>
80105dd8:	e8 03 dc ff ff       	call   801039e0 <myproc>
80105ddd:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
80105de1:	0f 84 41 02 00 00    	je     80106028 <trap+0x2b8>
			tf->trapno == T_IRQ0 + IRQ_TIMER)
		yield();

	// Check if the process has been killed since we yielded
	if (myproc() && myproc()->killed && (tf->cs & 3) == DPL_USER)
80105de7:	e8 f4 db ff ff       	call   801039e0 <myproc>
80105dec:	85 c0                	test   %eax,%eax
80105dee:	74 16                	je     80105e06 <trap+0x96>
80105df0:	e8 eb db ff ff       	call   801039e0 <myproc>
80105df5:	8b 40 28             	mov    0x28(%eax),%eax
80105df8:	85 c0                	test   %eax,%eax
80105dfa:	74 0a                	je     80105e06 <trap+0x96>
80105dfc:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
80105e00:	f7 d0                	not    %eax
80105e02:	a8 03                	test   $0x3,%al
80105e04:	74 2f                	je     80105e35 <trap+0xc5>
		exit(0);
}
80105e06:	8d 65 f4             	lea    -0xc(%ebp),%esp
80105e09:	5b                   	pop    %ebx
80105e0a:	5e                   	pop    %esi
80105e0b:	5f                   	pop    %edi
80105e0c:	5d                   	pop    %ebp
80105e0d:	c3                   	ret
80105e0e:	66 90                	xchg   %ax,%ax
		if (myproc()->killed)
80105e10:	e8 cb db ff ff       	call   801039e0 <myproc>
80105e15:	8b 70 28             	mov    0x28(%eax),%esi
80105e18:	85 f6                	test   %esi,%esi
80105e1a:	75 19                	jne    80105e35 <trap+0xc5>
		myproc()->tf = tf;
80105e1c:	e8 bf db ff ff       	call   801039e0 <myproc>
80105e21:	89 58 1c             	mov    %ebx,0x1c(%eax)
		syscall();
80105e24:	e8 57 ed ff ff       	call   80104b80 <syscall>
		if (myproc()->killed)
80105e29:	e8 b2 db ff ff       	call   801039e0 <myproc>
80105e2e:	8b 48 28             	mov    0x28(%eax),%ecx
80105e31:	85 c9                	test   %ecx,%ecx
80105e33:	74 d1                	je     80105e06 <trap+0x96>
			exit(0);
80105e35:	83 ec 0c             	sub    $0xc,%esp
80105e38:	6a 00                	push   $0x0
80105e3a:	e8 e1 df ff ff       	call   80103e20 <exit>
80105e3f:	90                   	nop
		if (myproc() == 0 || (tf->cs & 3) == 0) {
80105e40:	e8 9b db ff ff       	call   801039e0 <myproc>
80105e45:	8b 7b 38             	mov    0x38(%ebx),%edi
80105e48:	85 c0                	test   %eax,%eax
80105e4a:	0f 84 ec 01 00 00    	je     8010603c <trap+0x2cc>
80105e50:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
80105e54:	0f 84 e2 01 00 00    	je     8010603c <trap+0x2cc>
	__asm__ __volatile__("movl %%cr2,%0" : "=r"(val));
80105e5a:	0f 20 d1             	mov    %cr2,%ecx
80105e5d:	89 4d d8             	mov    %ecx,-0x28(%ebp)
		cprintf("pid %d %s: trap %d err %d on cpu %d "
80105e60:	e8 4b db ff ff       	call   801039b0 <my_cpu_id>
80105e65:	8b 73 30             	mov    0x30(%ebx),%esi
80105e68:	89 45 dc             	mov    %eax,-0x24(%ebp)
80105e6b:	8b 43 34             	mov    0x34(%ebx),%eax
80105e6e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
						myproc()->pid, myproc()->name, tf->trapno, tf->err, my_cpu_id(),
80105e71:	e8 6a db ff ff       	call   801039e0 <myproc>
80105e76:	89 45 e0             	mov    %eax,-0x20(%ebp)
80105e79:	e8 62 db ff ff       	call   801039e0 <myproc>
		cprintf("pid %d %s: trap %d err %d on cpu %d "
80105e7e:	8b 4d d8             	mov    -0x28(%ebp),%ecx
80105e81:	51                   	push   %ecx
80105e82:	57                   	push   %edi
80105e83:	8b 55 dc             	mov    -0x24(%ebp),%edx
80105e86:	52                   	push   %edx
80105e87:	ff 75 e4             	push   -0x1c(%ebp)
80105e8a:	56                   	push   %esi
						myproc()->pid, myproc()->name, tf->trapno, tf->err, my_cpu_id(),
80105e8b:	8b 75 e0             	mov    -0x20(%ebp),%esi
80105e8e:	81 c6 f4 00 00 00    	add    $0xf4,%esi
		cprintf("pid %d %s: trap %d err %d on cpu %d "
80105e94:	56                   	push   %esi
80105e95:	ff 70 10             	push   0x10(%eax)
80105e98:	68 24 89 10 80       	push   $0x80108924
80105e9d:	e8 ae a8 ff ff       	call   80100750 <cprintf>
		myproc()->killed = 1;
80105ea2:	83 c4 20             	add    $0x20,%esp
80105ea5:	e8 36 db ff ff       	call   801039e0 <myproc>
80105eaa:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
80105eb1:	e9 fa fe ff ff       	jmp    80105db0 <trap+0x40>
80105eb6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80105ebd:	00 
80105ebe:	66 90                	xchg   %ax,%ax
		cprintf("cpu%d: spurious interrupt at %x:%x\n", my_cpu_id(), tf->cs,
80105ec0:	8b 7b 38             	mov    0x38(%ebx),%edi
80105ec3:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
80105ec7:	e8 e4 da ff ff       	call   801039b0 <my_cpu_id>
80105ecc:	57                   	push   %edi
80105ecd:	56                   	push   %esi
80105ece:	50                   	push   %eax
80105ecf:	68 cc 88 10 80       	push   $0x801088cc
80105ed4:	e8 77 a8 ff ff       	call   80100750 <cprintf>
		lapiceoi();
80105ed9:	e8 42 1b 00 00       	call   80107a20 <lapiceoi>
		break;
80105ede:	83 c4 10             	add    $0x10,%esp
80105ee1:	e9 ca fe ff ff       	jmp    80105db0 <trap+0x40>
80105ee6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80105eed:	00 
80105eee:	66 90                	xchg   %ax,%ax
		cprintf("Floating point error\n");
80105ef0:	83 ec 0c             	sub    $0xc,%esp
80105ef3:	68 5d 85 10 80       	push   $0x8010855d
80105ef8:	e8 53 a8 ff ff       	call   80100750 <cprintf>
		myproc()->killed = 1;
80105efd:	e8 de da ff ff       	call   801039e0 <myproc>
		break;
80105f02:	83 c4 10             	add    $0x10,%esp
		myproc()->killed = 1;
80105f05:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
		break;
80105f0c:	e9 9f fe ff ff       	jmp    80105db0 <trap+0x40>
80105f11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		uartintr();
80105f18:	e8 d3 02 00 00       	call   801061f0 <uartintr>
		lapiceoi();
80105f1d:	e8 fe 1a 00 00       	call   80107a20 <lapiceoi>
		break;
80105f22:	e9 89 fe ff ff       	jmp    80105db0 <trap+0x40>
80105f27:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80105f2e:	00 
80105f2f:	90                   	nop
		kbdintr();
80105f30:	e8 2b 18 00 00       	call   80107760 <kbdintr>
		lapiceoi();
80105f35:	e8 e6 1a 00 00       	call   80107a20 <lapiceoi>
		break;
80105f3a:	e9 71 fe ff ff       	jmp    80105db0 <trap+0x40>
80105f3f:	90                   	nop
		if (my_cpu_id() == 0) {
80105f40:	e8 6b da ff ff       	call   801039b0 <my_cpu_id>
80105f45:	85 c0                	test   %eax,%eax
80105f47:	0f 85 58 fe ff ff    	jne    80105da5 <trap+0x35>
			acquire(&tickslock);
80105f4d:	83 ec 0c             	sub    $0xc,%esp
80105f50:	68 40 8a 13 80       	push   $0x80138a40
80105f55:	e8 36 e7 ff ff       	call   80104690 <acquire>
			ticks++;
80105f5a:	83 05 20 8a 13 80 01 	addl   $0x1,0x80138a20
			wakeup(&ticks);
80105f61:	c7 04 24 20 8a 13 80 	movl   $0x80138a20,(%esp)
80105f68:	e8 43 e2 ff ff       	call   801041b0 <wakeup>
			release(&tickslock);
80105f6d:	c7 04 24 40 8a 13 80 	movl   $0x80138a40,(%esp)
80105f74:	e8 b7 e6 ff ff       	call   80104630 <release>
80105f79:	83 c4 10             	add    $0x10,%esp
		lapiceoi();
80105f7c:	e9 24 fe ff ff       	jmp    80105da5 <trap+0x35>
80105f81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		cprintf("Page fault\n");
80105f88:	83 ec 0c             	sub    $0xc,%esp
80105f8b:	68 51 85 10 80       	push   $0x80108551
80105f90:	e8 bb a7 ff ff       	call   80100750 <cprintf>
		myproc()->killed = 1;
80105f95:	e8 46 da ff ff       	call   801039e0 <myproc>
		break;
80105f9a:	83 c4 10             	add    $0x10,%esp
		myproc()->killed = 1;
80105f9d:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
		break;
80105fa4:	e9 07 fe ff ff       	jmp    80105db0 <trap+0x40>
80105fa9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		cprintf("General protection fault\n");
80105fb0:	83 ec 0c             	sub    $0xc,%esp
80105fb3:	68 37 85 10 80       	push   $0x80108537
80105fb8:	e8 93 a7 ff ff       	call   80100750 <cprintf>
		myproc()->killed = 1;
80105fbd:	e8 1e da ff ff       	call   801039e0 <myproc>
		break;
80105fc2:	83 c4 10             	add    $0x10,%esp
		myproc()->killed = 1;
80105fc5:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
		break;
80105fcc:	e9 df fd ff ff       	jmp    80105db0 <trap+0x40>
80105fd1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		cprintf("Illegal instruction\n");
80105fd8:	83 ec 0c             	sub    $0xc,%esp
80105fdb:	68 22 85 10 80       	push   $0x80108522
80105fe0:	e8 6b a7 ff ff       	call   80100750 <cprintf>
		myproc()->killed = 1;
80105fe5:	e8 f6 d9 ff ff       	call   801039e0 <myproc>
		break;
80105fea:	83 c4 10             	add    $0x10,%esp
		myproc()->killed = 1;
80105fed:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
		break;
80105ff4:	e9 b7 fd ff ff       	jmp    80105db0 <trap+0x40>
80105ff9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		cprintf("Division by zero.\n");
80106000:	83 ec 0c             	sub    $0xc,%esp
80106003:	68 73 85 10 80       	push   $0x80108573
80106008:	e8 43 a7 ff ff       	call   80100750 <cprintf>
		myproc()->killed = 1;
8010600d:	e8 ce d9 ff ff       	call   801039e0 <myproc>
		break;
80106012:	83 c4 10             	add    $0x10,%esp
		myproc()->killed = 1;
80106015:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
		break;
8010601c:	e9 8f fd ff ff       	jmp    80105db0 <trap+0x40>
80106021:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
	if (myproc() && myproc()->state == RUNNING &&
80106028:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
8010602c:	0f 85 b5 fd ff ff    	jne    80105de7 <trap+0x77>
		yield();
80106032:	e8 69 e0 ff ff       	call   801040a0 <yield>
80106037:	e9 ab fd ff ff       	jmp    80105de7 <trap+0x77>
8010603c:	0f 20 d6             	mov    %cr2,%esi
			cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n", tf->trapno,
8010603f:	e8 6c d9 ff ff       	call   801039b0 <my_cpu_id>
80106044:	83 ec 0c             	sub    $0xc,%esp
80106047:	56                   	push   %esi
80106048:	57                   	push   %edi
80106049:	50                   	push   %eax
8010604a:	ff 73 30             	push   0x30(%ebx)
8010604d:	68 f0 88 10 80       	push   $0x801088f0
80106052:	e8 f9 a6 ff ff       	call   80100750 <cprintf>
			panic("trap");
80106057:	83 c4 14             	add    $0x14,%esp
8010605a:	68 86 85 10 80       	push   $0x80108586
8010605f:	e8 1c a3 ff ff       	call   80100380 <panic>
80106064:	66 90                	xchg   %ax,%ax
80106066:	66 90                	xchg   %ax,%ax
80106068:	66 90                	xchg   %ax,%ax
8010606a:	66 90                	xchg   %ax,%ax
8010606c:	66 90                	xchg   %ax,%ax
8010606e:	66 90                	xchg   %ax,%ax

80106070 <uartgetc>:
}

static int
uartgetc(void)
{
	if (!uart)
80106070:	a1 80 92 13 80       	mov    0x80139280,%eax
80106075:	85 c0                	test   %eax,%eax
80106077:	74 17                	je     80106090 <uartgetc+0x20>
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
80106079:	ba fd 03 00 00       	mov    $0x3fd,%edx
8010607e:	ec                   	in     (%dx),%al
		return -1;
	if (!(inb(COM1 + 5) & 0x01))
8010607f:	a8 01                	test   $0x1,%al
80106081:	74 0d                	je     80106090 <uartgetc+0x20>
80106083:	ba f8 03 00 00       	mov    $0x3f8,%edx
80106088:	ec                   	in     (%dx),%al
		return -1;
	return inb(COM1 + 0);
80106089:	0f b6 c0             	movzbl %al,%eax
8010608c:	c3                   	ret
8010608d:	8d 76 00             	lea    0x0(%esi),%esi
		return -1;
80106090:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80106095:	c3                   	ret
80106096:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010609d:	00 
8010609e:	66 90                	xchg   %ax,%ax

801060a0 <uartinit>:
{
801060a0:	55                   	push   %ebp
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
801060a1:	31 c9                	xor    %ecx,%ecx
801060a3:	89 c8                	mov    %ecx,%eax
801060a5:	89 e5                	mov    %esp,%ebp
801060a7:	57                   	push   %edi
801060a8:	bf fa 03 00 00       	mov    $0x3fa,%edi
801060ad:	56                   	push   %esi
801060ae:	89 fa                	mov    %edi,%edx
801060b0:	53                   	push   %ebx
801060b1:	83 ec 1c             	sub    $0x1c,%esp
801060b4:	ee                   	out    %al,(%dx)
801060b5:	be fb 03 00 00       	mov    $0x3fb,%esi
801060ba:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
801060bf:	89 f2                	mov    %esi,%edx
801060c1:	ee                   	out    %al,(%dx)
801060c2:	b8 0c 00 00 00       	mov    $0xc,%eax
801060c7:	ba f8 03 00 00       	mov    $0x3f8,%edx
801060cc:	ee                   	out    %al,(%dx)
801060cd:	bb f9 03 00 00       	mov    $0x3f9,%ebx
801060d2:	89 c8                	mov    %ecx,%eax
801060d4:	89 da                	mov    %ebx,%edx
801060d6:	ee                   	out    %al,(%dx)
801060d7:	b8 03 00 00 00       	mov    $0x3,%eax
801060dc:	89 f2                	mov    %esi,%edx
801060de:	ee                   	out    %al,(%dx)
801060df:	ba fc 03 00 00       	mov    $0x3fc,%edx
801060e4:	89 c8                	mov    %ecx,%eax
801060e6:	ee                   	out    %al,(%dx)
801060e7:	b8 01 00 00 00       	mov    $0x1,%eax
801060ec:	89 da                	mov    %ebx,%edx
801060ee:	ee                   	out    %al,(%dx)
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
801060ef:	ba fd 03 00 00       	mov    $0x3fd,%edx
801060f4:	ec                   	in     (%dx),%al
	if (inb(COM1 + 5) == 0xFF)
801060f5:	3c ff                	cmp    $0xff,%al
801060f7:	0f 84 7c 00 00 00    	je     80106179 <uartinit+0xd9>
	uart = 1;
801060fd:	c7 05 80 92 13 80 01 	movl   $0x1,0x80139280
80106104:	00 00 00 
80106107:	89 fa                	mov    %edi,%edx
80106109:	ec                   	in     (%dx),%al
8010610a:	ba f8 03 00 00       	mov    $0x3f8,%edx
8010610f:	ec                   	in     (%dx),%al
	ioapicenable(IRQ_COM1, 0);
80106110:	83 ec 08             	sub    $0x8,%esp
	for (p = "xv6...\n"; *p; p++)
80106113:	bf 8b 85 10 80       	mov    $0x8010858b,%edi
80106118:	be fd 03 00 00       	mov    $0x3fd,%esi
	ioapicenable(IRQ_COM1, 0);
8010611d:	6a 00                	push   $0x0
8010611f:	6a 04                	push   $0x4
80106121:	e8 7a c6 ff ff       	call   801027a0 <ioapicenable>
	for (p = "xv6...\n"; *p; p++)
80106126:	c6 45 e7 78          	movb   $0x78,-0x19(%ebp)
	ioapicenable(IRQ_COM1, 0);
8010612a:	83 c4 10             	add    $0x10,%esp
8010612d:	8d 76 00             	lea    0x0(%esi),%esi
	if (!uart)
80106130:	a1 80 92 13 80       	mov    0x80139280,%eax
80106135:	85 c0                	test   %eax,%eax
80106137:	74 32                	je     8010616b <uartinit+0xcb>
80106139:	89 f2                	mov    %esi,%edx
8010613b:	ec                   	in     (%dx),%al
	for (i = 0; i < 128 && !(inb(COM1 + 5) & 0x20); i++)
8010613c:	a8 20                	test   $0x20,%al
8010613e:	75 21                	jne    80106161 <uartinit+0xc1>
80106140:	bb 80 00 00 00       	mov    $0x80,%ebx
80106145:	8d 76 00             	lea    0x0(%esi),%esi
		microdelay(10);
80106148:	83 ec 0c             	sub    $0xc,%esp
8010614b:	6a 0a                	push   $0xa
8010614d:	e8 ee 18 00 00       	call   80107a40 <microdelay>
	for (i = 0; i < 128 && !(inb(COM1 + 5) & 0x20); i++)
80106152:	83 c4 10             	add    $0x10,%esp
80106155:	83 eb 01             	sub    $0x1,%ebx
80106158:	74 07                	je     80106161 <uartinit+0xc1>
8010615a:	89 f2                	mov    %esi,%edx
8010615c:	ec                   	in     (%dx),%al
8010615d:	a8 20                	test   $0x20,%al
8010615f:	74 e7                	je     80106148 <uartinit+0xa8>
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
80106161:	ba f8 03 00 00       	mov    $0x3f8,%edx
80106166:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
8010616a:	ee                   	out    %al,(%dx)
	for (p = "xv6...\n"; *p; p++)
8010616b:	0f b6 47 01          	movzbl 0x1(%edi),%eax
8010616f:	83 c7 01             	add    $0x1,%edi
80106172:	88 45 e7             	mov    %al,-0x19(%ebp)
80106175:	84 c0                	test   %al,%al
80106177:	75 b7                	jne    80106130 <uartinit+0x90>
}
80106179:	8d 65 f4             	lea    -0xc(%ebp),%esp
8010617c:	5b                   	pop    %ebx
8010617d:	5e                   	pop    %esi
8010617e:	5f                   	pop    %edi
8010617f:	5d                   	pop    %ebp
80106180:	c3                   	ret
80106181:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80106188:	00 
80106189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80106190 <uartputc>:
	if (!uart)
80106190:	a1 80 92 13 80       	mov    0x80139280,%eax
80106195:	85 c0                	test   %eax,%eax
80106197:	74 4f                	je     801061e8 <uartputc+0x58>
{
80106199:	55                   	push   %ebp
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
8010619a:	ba fd 03 00 00       	mov    $0x3fd,%edx
8010619f:	89 e5                	mov    %esp,%ebp
801061a1:	56                   	push   %esi
801061a2:	53                   	push   %ebx
801061a3:	ec                   	in     (%dx),%al
	for (i = 0; i < 128 && !(inb(COM1 + 5) & 0x20); i++)
801061a4:	a8 20                	test   $0x20,%al
801061a6:	75 29                	jne    801061d1 <uartputc+0x41>
801061a8:	bb 80 00 00 00       	mov    $0x80,%ebx
801061ad:	be fd 03 00 00       	mov    $0x3fd,%esi
801061b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		microdelay(10);
801061b8:	83 ec 0c             	sub    $0xc,%esp
801061bb:	6a 0a                	push   $0xa
801061bd:	e8 7e 18 00 00       	call   80107a40 <microdelay>
	for (i = 0; i < 128 && !(inb(COM1 + 5) & 0x20); i++)
801061c2:	83 c4 10             	add    $0x10,%esp
801061c5:	83 eb 01             	sub    $0x1,%ebx
801061c8:	74 07                	je     801061d1 <uartputc+0x41>
801061ca:	89 f2                	mov    %esi,%edx
801061cc:	ec                   	in     (%dx),%al
801061cd:	a8 20                	test   $0x20,%al
801061cf:	74 e7                	je     801061b8 <uartputc+0x28>
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
801061d1:	8b 45 08             	mov    0x8(%ebp),%eax
801061d4:	ba f8 03 00 00       	mov    $0x3f8,%edx
801061d9:	ee                   	out    %al,(%dx)
}
801061da:	8d 65 f8             	lea    -0x8(%ebp),%esp
801061dd:	5b                   	pop    %ebx
801061de:	5e                   	pop    %esi
801061df:	5d                   	pop    %ebp
801061e0:	c3                   	ret
801061e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
801061e8:	c3                   	ret
801061e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

801061f0 <uartintr>:

void
uartintr(void)
{
801061f0:	55                   	push   %ebp
801061f1:	89 e5                	mov    %esp,%ebp
801061f3:	83 ec 14             	sub    $0x14,%esp
	consoleintr(uartgetc);
801061f6:	68 70 60 10 80       	push   $0x80106070
801061fb:	e8 30 a8 ff ff       	call   80100a30 <consoleintr>
}
80106200:	83 c4 10             	add    $0x10,%esp
80106203:	c9                   	leave
80106204:	c3                   	ret
80106205:	66 90                	xchg   %ax,%ax
80106207:	66 90                	xchg   %ax,%ax
80106209:	66 90                	xchg   %ax,%ax
8010620b:	66 90                	xchg   %ax,%ax
8010620d:	66 90                	xchg   %ax,%ax
8010620f:	90                   	nop

80106210 <deallocuvm.part.0>:
// Deallocate user pages to bring the process size from oldsz to
// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
// need to be less than oldsz.  oldsz can be larger than the actual
// process size.  Returns the new process size.
int
deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
80106210:	55                   	push   %ebp
80106211:	89 e5                	mov    %esp,%ebp
80106213:	57                   	push   %edi
80106214:	56                   	push   %esi
80106215:	53                   	push   %ebx
	uint a, pa;

	if (newsz >= oldsz)
		return oldsz;

	a = PGROUNDUP(newsz);
80106216:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
8010621c:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
80106222:	83 ec 1c             	sub    $0x1c,%esp
	for (; a < oldsz; a += PGSIZE) {
80106225:	39 d3                	cmp    %edx,%ebx
80106227:	73 56                	jae    8010627f <deallocuvm.part.0+0x6f>
80106229:	89 4d e0             	mov    %ecx,-0x20(%ebp)
8010622c:	89 c6                	mov    %eax,%esi
8010622e:	89 d7                	mov    %edx,%edi
80106230:	eb 12                	jmp    80106244 <deallocuvm.part.0+0x34>
80106232:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		pte = walkpgdir(pgdir, (char *)a, 0);
		if (!pte)
			a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
80106238:	83 c2 01             	add    $0x1,%edx
8010623b:	89 d3                	mov    %edx,%ebx
8010623d:	c1 e3 16             	shl    $0x16,%ebx
	for (; a < oldsz; a += PGSIZE) {
80106240:	39 fb                	cmp    %edi,%ebx
80106242:	73 38                	jae    8010627c <deallocuvm.part.0+0x6c>
	pde = &pgdir[PDX(va)];
80106244:	89 da                	mov    %ebx,%edx
80106246:	c1 ea 16             	shr    $0x16,%edx
	if (*pde & PTE_P) {
80106249:	8b 04 96             	mov    (%esi,%edx,4),%eax
8010624c:	a8 01                	test   $0x1,%al
8010624e:	74 e8                	je     80106238 <deallocuvm.part.0+0x28>
	return &pgtab[PTX(va)];
80106250:	89 d9                	mov    %ebx,%ecx
		pgtab = (pte_t *)P2V(PTE_ADDR(*pde));
80106252:	25 00 f0 ff ff       	and    $0xfffff000,%eax
	return &pgtab[PTX(va)];
80106257:	c1 e9 0a             	shr    $0xa,%ecx
8010625a:	81 e1 fc 0f 00 00    	and    $0xffc,%ecx
80106260:	8d 84 08 00 00 00 80 	lea    -0x80000000(%eax,%ecx,1),%eax
		if (!pte)
80106267:	85 c0                	test   %eax,%eax
80106269:	74 cd                	je     80106238 <deallocuvm.part.0+0x28>
		else if ((*pte & PTE_P) != 0) {
8010626b:	8b 10                	mov    (%eax),%edx
8010626d:	f6 c2 01             	test   $0x1,%dl
80106270:	75 1e                	jne    80106290 <deallocuvm.part.0+0x80>
	for (; a < oldsz; a += PGSIZE) {
80106272:	81 c3 00 10 00 00    	add    $0x1000,%ebx
80106278:	39 fb                	cmp    %edi,%ebx
8010627a:	72 c8                	jb     80106244 <deallocuvm.part.0+0x34>
8010627c:	8b 4d e0             	mov    -0x20(%ebp),%ecx
			kfree(v);
			*pte = 0;
		}
	}
	return newsz;
}
8010627f:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106282:	89 c8                	mov    %ecx,%eax
80106284:	5b                   	pop    %ebx
80106285:	5e                   	pop    %esi
80106286:	5f                   	pop    %edi
80106287:	5d                   	pop    %ebp
80106288:	c3                   	ret
80106289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
			if (pa == 0)
80106290:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
80106296:	74 26                	je     801062be <deallocuvm.part.0+0xae>
			kfree(v);
80106298:	83 ec 0c             	sub    $0xc,%esp
			char *v = P2V(pa);
8010629b:	81 c2 00 00 00 80    	add    $0x80000000,%edx
801062a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	for (; a < oldsz; a += PGSIZE) {
801062a4:	81 c3 00 10 00 00    	add    $0x1000,%ebx
			kfree(v);
801062aa:	52                   	push   %edx
801062ab:	e8 30 c5 ff ff       	call   801027e0 <kfree>
			*pte = 0;
801062b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	for (; a < oldsz; a += PGSIZE) {
801062b3:	83 c4 10             	add    $0x10,%esp
			*pte = 0;
801062b6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
801062bc:	eb 82                	jmp    80106240 <deallocuvm.part.0+0x30>
				panic("kfree");
801062be:	83 ec 0c             	sub    $0xc,%esp
801062c1:	68 1e 82 10 80       	push   $0x8010821e
801062c6:	e8 b5 a0 ff ff       	call   80100380 <panic>
801062cb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

801062d0 <mappages>:
{
801062d0:	55                   	push   %ebp
801062d1:	89 e5                	mov    %esp,%ebp
801062d3:	57                   	push   %edi
801062d4:	56                   	push   %esi
801062d5:	53                   	push   %ebx
	a = (char *)PGROUNDDOWN((uint)va);
801062d6:	89 d3                	mov    %edx,%ebx
801062d8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
{
801062de:	83 ec 1c             	sub    $0x1c,%esp
801062e1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	last = (char *)PGROUNDDOWN(((uint)va) + size - 1);
801062e4:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
801062e8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
801062ed:	89 45 dc             	mov    %eax,-0x24(%ebp)
801062f0:	8b 45 08             	mov    0x8(%ebp),%eax
801062f3:	29 d8                	sub    %ebx,%eax
801062f5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
801062f8:	eb 3f                	jmp    80106339 <mappages+0x69>
801062fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
	return &pgtab[PTX(va)];
80106300:	89 da                	mov    %ebx,%edx
		pgtab = (pte_t *)P2V(PTE_ADDR(*pde));
80106302:	25 00 f0 ff ff       	and    $0xfffff000,%eax
	return &pgtab[PTX(va)];
80106307:	c1 ea 0a             	shr    $0xa,%edx
8010630a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
80106310:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
		if ((pte = walkpgdir(pgdir, a, 1)) == 0)
80106317:	85 c0                	test   %eax,%eax
80106319:	74 75                	je     80106390 <mappages+0xc0>
		if (*pte & PTE_P)
8010631b:	f6 00 01             	testb  $0x1,(%eax)
8010631e:	0f 85 86 00 00 00    	jne    801063aa <mappages+0xda>
		*pte = pa | perm | PTE_P;
80106324:	0b 75 0c             	or     0xc(%ebp),%esi
80106327:	83 ce 01             	or     $0x1,%esi
8010632a:	89 30                	mov    %esi,(%eax)
		if (a == last)
8010632c:	8b 45 dc             	mov    -0x24(%ebp),%eax
8010632f:	39 c3                	cmp    %eax,%ebx
80106331:	74 6d                	je     801063a0 <mappages+0xd0>
		a += PGSIZE;
80106333:	81 c3 00 10 00 00    	add    $0x1000,%ebx
	for (;;) {
80106339:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	pde = &pgdir[PDX(va)];
8010633c:	8b 4d e0             	mov    -0x20(%ebp),%ecx
8010633f:	8d 34 03             	lea    (%ebx,%eax,1),%esi
80106342:	89 d8                	mov    %ebx,%eax
80106344:	c1 e8 16             	shr    $0x16,%eax
80106347:	8d 3c 81             	lea    (%ecx,%eax,4),%edi
	if (*pde & PTE_P) {
8010634a:	8b 07                	mov    (%edi),%eax
8010634c:	a8 01                	test   $0x1,%al
8010634e:	75 b0                	jne    80106300 <mappages+0x30>
		if (!alloc || (pgtab = (pte_t *)kalloc()) == 0)
80106350:	e8 4b c6 ff ff       	call   801029a0 <kalloc>
80106355:	85 c0                	test   %eax,%eax
80106357:	74 37                	je     80106390 <mappages+0xc0>
		memset(pgtab, 0, PGSIZE);
80106359:	83 ec 04             	sub    $0x4,%esp
8010635c:	68 00 10 00 00       	push   $0x1000
80106361:	6a 00                	push   $0x0
80106363:	50                   	push   %eax
80106364:	89 45 d8             	mov    %eax,-0x28(%ebp)
80106367:	e8 24 e4 ff ff       	call   80104790 <memset>
		*pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
8010636c:	8b 55 d8             	mov    -0x28(%ebp),%edx
	return &pgtab[PTX(va)];
8010636f:	83 c4 10             	add    $0x10,%esp
		*pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
80106372:	8d 82 00 00 00 80    	lea    -0x80000000(%edx),%eax
80106378:	83 c8 07             	or     $0x7,%eax
8010637b:	89 07                	mov    %eax,(%edi)
	return &pgtab[PTX(va)];
8010637d:	89 d8                	mov    %ebx,%eax
8010637f:	c1 e8 0a             	shr    $0xa,%eax
80106382:	25 fc 0f 00 00       	and    $0xffc,%eax
80106387:	01 d0                	add    %edx,%eax
80106389:	eb 90                	jmp    8010631b <mappages+0x4b>
8010638b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
}
80106390:	8d 65 f4             	lea    -0xc(%ebp),%esp
			return -1;
80106393:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80106398:	5b                   	pop    %ebx
80106399:	5e                   	pop    %esi
8010639a:	5f                   	pop    %edi
8010639b:	5d                   	pop    %ebp
8010639c:	c3                   	ret
8010639d:	8d 76 00             	lea    0x0(%esi),%esi
801063a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
	return 0;
801063a3:	31 c0                	xor    %eax,%eax
}
801063a5:	5b                   	pop    %ebx
801063a6:	5e                   	pop    %esi
801063a7:	5f                   	pop    %edi
801063a8:	5d                   	pop    %ebp
801063a9:	c3                   	ret
			panic("remap");
801063aa:	83 ec 0c             	sub    $0xc,%esp
801063ad:	68 93 85 10 80       	push   $0x80108593
801063b2:	e8 c9 9f ff ff       	call   80100380 <panic>
801063b7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801063be:	00 
801063bf:	90                   	nop

801063c0 <seginit>:
{
801063c0:	55                   	push   %ebp
801063c1:	89 e5                	mov    %esp,%ebp
801063c3:	83 ec 18             	sub    $0x18,%esp
	c = &cpus[my_cpu_id()];
801063c6:	e8 e5 d5 ff ff       	call   801039b0 <my_cpu_id>
	pd[0] = size - 1;
801063cb:	ba 2f 00 00 00       	mov    $0x2f,%edx
	c->gdt[SEG_KCODE] = SEG(STA_X | STA_R, 0, 0xffffffff, 0);
801063d0:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
801063d6:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
801063da:	c7 80 18 ea 12 80 ff 	movl   $0xffff,-0x7fed15e8(%eax)
801063e1:	ff 00 00 
801063e4:	c7 80 1c ea 12 80 00 	movl   $0xcf9a00,-0x7fed15e4(%eax)
801063eb:	9a cf 00 
	c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
801063ee:	c7 80 20 ea 12 80 ff 	movl   $0xffff,-0x7fed15e0(%eax)
801063f5:	ff 00 00 
801063f8:	c7 80 24 ea 12 80 00 	movl   $0xcf9200,-0x7fed15dc(%eax)
801063ff:	92 cf 00 
	c->gdt[SEG_UCODE] = SEG(STA_X | STA_R, 0, 0xffffffff, DPL_USER);
80106402:	c7 80 28 ea 12 80 ff 	movl   $0xffff,-0x7fed15d8(%eax)
80106409:	ff 00 00 
8010640c:	c7 80 2c ea 12 80 00 	movl   $0xcffa00,-0x7fed15d4(%eax)
80106413:	fa cf 00 
	c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
80106416:	c7 80 30 ea 12 80 ff 	movl   $0xffff,-0x7fed15d0(%eax)
8010641d:	ff 00 00 
80106420:	c7 80 34 ea 12 80 00 	movl   $0xcff200,-0x7fed15cc(%eax)
80106427:	f2 cf 00 
	lgdt(c->gdt, sizeof(c->gdt));
8010642a:	05 10 ea 12 80       	add    $0x8012ea10,%eax
	pd[1] = (uint)p;
8010642f:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	pd[2] = (uint)p >> 16;
80106433:	c1 e8 10             	shr    $0x10,%eax
80106436:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	__asm__ __volatile__("lgdt (%0)" : : "r"(pd));
8010643a:	8d 45 f2             	lea    -0xe(%ebp),%eax
8010643d:	0f 01 10             	lgdtl  (%eax)
}
80106440:	c9                   	leave
80106441:	c3                   	ret
80106442:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80106449:	00 
8010644a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80106450 <switchkvm>:
	lcr3(V2P(kpgdir)); // switch to the kernel page table
80106450:	a1 84 92 13 80       	mov    0x80139284,%eax
80106455:	05 00 00 00 80       	add    $0x80000000,%eax
	__asm__ __volatile__("movl %0,%%cr3" : : "r"(val));
8010645a:	0f 22 d8             	mov    %eax,%cr3
}
8010645d:	c3                   	ret
8010645e:	66 90                	xchg   %ax,%ax

80106460 <switchuvm>:
{
80106460:	55                   	push   %ebp
80106461:	89 e5                	mov    %esp,%ebp
80106463:	57                   	push   %edi
80106464:	56                   	push   %esi
80106465:	53                   	push   %ebx
80106466:	83 ec 1c             	sub    $0x1c,%esp
80106469:	8b 75 08             	mov    0x8(%ebp),%esi
	if (p == 0)
8010646c:	85 f6                	test   %esi,%esi
8010646e:	0f 84 cb 00 00 00    	je     8010653f <switchuvm+0xdf>
	if (p->kstack == 0)
80106474:	8b 46 08             	mov    0x8(%esi),%eax
80106477:	85 c0                	test   %eax,%eax
80106479:	0f 84 da 00 00 00    	je     80106559 <switchuvm+0xf9>
	if (p->pgdir == 0)
8010647f:	8b 46 04             	mov    0x4(%esi),%eax
80106482:	85 c0                	test   %eax,%eax
80106484:	0f 84 c2 00 00 00    	je     8010654c <switchuvm+0xec>
	pushcli();
8010648a:	e8 b1 e0 ff ff       	call   80104540 <pushcli>
	mycpu()->gdt[SEG_TSS] =
8010648f:	e8 bc d4 ff ff       	call   80103950 <mycpu>
80106494:	89 c3                	mov    %eax,%ebx
		SEG16(STS_T32A, &mycpu()->ts, sizeof(mycpu()->ts) - 1, 0);
80106496:	e8 b5 d4 ff ff       	call   80103950 <mycpu>
8010649b:	89 c7                	mov    %eax,%edi
8010649d:	e8 ae d4 ff ff       	call   80103950 <mycpu>
801064a2:	83 c7 08             	add    $0x8,%edi
801064a5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
801064a8:	e8 a3 d4 ff ff       	call   80103950 <mycpu>
801064ad:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
	mycpu()->gdt[SEG_TSS] =
801064b0:	ba 67 00 00 00       	mov    $0x67,%edx
801064b5:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
		SEG16(STS_T32A, &mycpu()->ts, sizeof(mycpu()->ts) - 1, 0);
801064bc:	83 c0 08             	add    $0x8,%eax
	mycpu()->gdt[SEG_TSS] =
801064bf:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
	mycpu()->ts.iomb = (ushort)0xFFFF;
801064c6:	bf ff ff ff ff       	mov    $0xffffffff,%edi
		SEG16(STS_T32A, &mycpu()->ts, sizeof(mycpu()->ts) - 1, 0);
801064cb:	83 c1 08             	add    $0x8,%ecx
801064ce:	c1 e8 18             	shr    $0x18,%eax
801064d1:	c1 e9 10             	shr    $0x10,%ecx
	mycpu()->gdt[SEG_TSS] =
801064d4:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
801064da:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
801064e0:	b9 99 40 00 00       	mov    $0x4099,%ecx
801064e5:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
	mycpu()->ts.ss0 = SEG_KDATA << 3;
801064ec:	bb 10 00 00 00       	mov    $0x10,%ebx
	mycpu()->gdt[SEG_TSS].s = 0;
801064f1:	e8 5a d4 ff ff       	call   80103950 <mycpu>
801064f6:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
	mycpu()->ts.ss0 = SEG_KDATA << 3;
801064fd:	e8 4e d4 ff ff       	call   80103950 <mycpu>
80106502:	66 89 58 10          	mov    %bx,0x10(%eax)
	mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
80106506:	8b 5e 08             	mov    0x8(%esi),%ebx
80106509:	81 c3 00 10 00 00    	add    $0x1000,%ebx
8010650f:	e8 3c d4 ff ff       	call   80103950 <mycpu>
80106514:	89 58 0c             	mov    %ebx,0xc(%eax)
	mycpu()->ts.iomb = (ushort)0xFFFF;
80106517:	e8 34 d4 ff ff       	call   80103950 <mycpu>
8010651c:	66 89 78 6e          	mov    %di,0x6e(%eax)
	__asm__ __volatile__("ltr %0" : : "r"(sel));
80106520:	b8 28 00 00 00       	mov    $0x28,%eax
80106525:	0f 00 d8             	ltr    %eax
	lcr3(V2P(p->pgdir)); // switch to process's address space
80106528:	8b 46 04             	mov    0x4(%esi),%eax
8010652b:	05 00 00 00 80       	add    $0x80000000,%eax
	__asm__ __volatile__("movl %0,%%cr3" : : "r"(val));
80106530:	0f 22 d8             	mov    %eax,%cr3
}
80106533:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106536:	5b                   	pop    %ebx
80106537:	5e                   	pop    %esi
80106538:	5f                   	pop    %edi
80106539:	5d                   	pop    %ebp
	popcli();
8010653a:	e9 51 e0 ff ff       	jmp    80104590 <popcli>
		panic("switchuvm: no process");
8010653f:	83 ec 0c             	sub    $0xc,%esp
80106542:	68 99 85 10 80       	push   $0x80108599
80106547:	e8 34 9e ff ff       	call   80100380 <panic>
		panic("switchuvm: no pgdir");
8010654c:	83 ec 0c             	sub    $0xc,%esp
8010654f:	68 c4 85 10 80       	push   $0x801085c4
80106554:	e8 27 9e ff ff       	call   80100380 <panic>
		panic("switchuvm: no kstack");
80106559:	83 ec 0c             	sub    $0xc,%esp
8010655c:	68 af 85 10 80       	push   $0x801085af
80106561:	e8 1a 9e ff ff       	call   80100380 <panic>
80106566:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010656d:	00 
8010656e:	66 90                	xchg   %ax,%ax

80106570 <inituvm>:
{
80106570:	55                   	push   %ebp
80106571:	89 e5                	mov    %esp,%ebp
80106573:	57                   	push   %edi
80106574:	56                   	push   %esi
80106575:	53                   	push   %ebx
80106576:	83 ec 1c             	sub    $0x1c,%esp
80106579:	8b 45 08             	mov    0x8(%ebp),%eax
8010657c:	8b 75 10             	mov    0x10(%ebp),%esi
8010657f:	8b 7d 0c             	mov    0xc(%ebp),%edi
80106582:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (sz >= PGSIZE)
80106585:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
8010658b:	77 49                	ja     801065d6 <inituvm+0x66>
	mem = kalloc();
8010658d:	e8 0e c4 ff ff       	call   801029a0 <kalloc>
	memset(mem, 0, PGSIZE);
80106592:	83 ec 04             	sub    $0x4,%esp
80106595:	68 00 10 00 00       	push   $0x1000
	mem = kalloc();
8010659a:	89 c3                	mov    %eax,%ebx
	memset(mem, 0, PGSIZE);
8010659c:	6a 00                	push   $0x0
8010659e:	50                   	push   %eax
8010659f:	e8 ec e1 ff ff       	call   80104790 <memset>
	mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W | PTE_U);
801065a4:	58                   	pop    %eax
801065a5:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
801065ab:	5a                   	pop    %edx
801065ac:	6a 06                	push   $0x6
801065ae:	b9 00 10 00 00       	mov    $0x1000,%ecx
801065b3:	31 d2                	xor    %edx,%edx
801065b5:	50                   	push   %eax
801065b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801065b9:	e8 12 fd ff ff       	call   801062d0 <mappages>
	memmove(mem, init, sz);
801065be:	89 75 10             	mov    %esi,0x10(%ebp)
801065c1:	83 c4 10             	add    $0x10,%esp
801065c4:	89 7d 0c             	mov    %edi,0xc(%ebp)
801065c7:	89 5d 08             	mov    %ebx,0x8(%ebp)
}
801065ca:	8d 65 f4             	lea    -0xc(%ebp),%esp
801065cd:	5b                   	pop    %ebx
801065ce:	5e                   	pop    %esi
801065cf:	5f                   	pop    %edi
801065d0:	5d                   	pop    %ebp
	memmove(mem, init, sz);
801065d1:	e9 4a e2 ff ff       	jmp    80104820 <memmove>
		panic("inituvm: more than a page");
801065d6:	83 ec 0c             	sub    $0xc,%esp
801065d9:	68 d8 85 10 80       	push   $0x801085d8
801065de:	e8 9d 9d ff ff       	call   80100380 <panic>
801065e3:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801065ea:	00 
801065eb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

801065f0 <loaduvm>:
{
801065f0:	55                   	push   %ebp
801065f1:	89 e5                	mov    %esp,%ebp
801065f3:	57                   	push   %edi
801065f4:	56                   	push   %esi
801065f5:	53                   	push   %ebx
801065f6:	83 ec 0c             	sub    $0xc,%esp
	if ((uint)addr % PGSIZE != 0)
801065f9:	8b 75 0c             	mov    0xc(%ebp),%esi
{
801065fc:	8b 7d 18             	mov    0x18(%ebp),%edi
	if ((uint)addr % PGSIZE != 0)
801065ff:	81 e6 ff 0f 00 00    	and    $0xfff,%esi
80106605:	0f 85 a2 00 00 00    	jne    801066ad <loaduvm+0xbd>
	for (i = 0; i < sz; i += PGSIZE) {
8010660b:	85 ff                	test   %edi,%edi
8010660d:	74 7d                	je     8010668c <loaduvm+0x9c>
8010660f:	90                   	nop
	pde = &pgdir[PDX(va)];
80106610:	8b 45 0c             	mov    0xc(%ebp),%eax
	if (*pde & PTE_P) {
80106613:	8b 55 08             	mov    0x8(%ebp),%edx
80106616:	01 f0                	add    %esi,%eax
	pde = &pgdir[PDX(va)];
80106618:	89 c1                	mov    %eax,%ecx
8010661a:	c1 e9 16             	shr    $0x16,%ecx
	if (*pde & PTE_P) {
8010661d:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
80106620:	f6 c1 01             	test   $0x1,%cl
80106623:	75 13                	jne    80106638 <loaduvm+0x48>
			panic("loaduvm: address should exist");
80106625:	83 ec 0c             	sub    $0xc,%esp
80106628:	68 f2 85 10 80       	push   $0x801085f2
8010662d:	e8 4e 9d ff ff       	call   80100380 <panic>
80106632:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
	return &pgtab[PTX(va)];
80106638:	c1 e8 0a             	shr    $0xa,%eax
		pgtab = (pte_t *)P2V(PTE_ADDR(*pde));
8010663b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
	return &pgtab[PTX(va)];
80106641:	25 fc 0f 00 00       	and    $0xffc,%eax
80106646:	8d 8c 01 00 00 00 80 	lea    -0x80000000(%ecx,%eax,1),%ecx
		if ((pte = walkpgdir(pgdir, addr + i, 0)) == 0)
8010664d:	85 c9                	test   %ecx,%ecx
8010664f:	74 d4                	je     80106625 <loaduvm+0x35>
		if (sz - i < PGSIZE)
80106651:	89 fb                	mov    %edi,%ebx
80106653:	b8 00 10 00 00       	mov    $0x1000,%eax
80106658:	29 f3                	sub    %esi,%ebx
8010665a:	39 c3                	cmp    %eax,%ebx
8010665c:	0f 47 d8             	cmova  %eax,%ebx
		if (readi(ip, P2V(pa), offset + i, n) != n)
8010665f:	53                   	push   %ebx
80106660:	8b 45 14             	mov    0x14(%ebp),%eax
80106663:	01 f0                	add    %esi,%eax
80106665:	50                   	push   %eax
		pa = PTE_ADDR(*pte);
80106666:	8b 01                	mov    (%ecx),%eax
80106668:	25 00 f0 ff ff       	and    $0xfffff000,%eax
		if (readi(ip, P2V(pa), offset + i, n) != n)
8010666d:	05 00 00 00 80       	add    $0x80000000,%eax
80106672:	50                   	push   %eax
80106673:	ff 75 10             	push   0x10(%ebp)
80106676:	e8 35 b7 ff ff       	call   80101db0 <readi>
8010667b:	83 c4 10             	add    $0x10,%esp
8010667e:	39 d8                	cmp    %ebx,%eax
80106680:	75 1e                	jne    801066a0 <loaduvm+0xb0>
	for (i = 0; i < sz; i += PGSIZE) {
80106682:	81 c6 00 10 00 00    	add    $0x1000,%esi
80106688:	39 fe                	cmp    %edi,%esi
8010668a:	72 84                	jb     80106610 <loaduvm+0x20>
}
8010668c:	8d 65 f4             	lea    -0xc(%ebp),%esp
	return 0;
8010668f:	31 c0                	xor    %eax,%eax
}
80106691:	5b                   	pop    %ebx
80106692:	5e                   	pop    %esi
80106693:	5f                   	pop    %edi
80106694:	5d                   	pop    %ebp
80106695:	c3                   	ret
80106696:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010669d:	00 
8010669e:	66 90                	xchg   %ax,%ax
801066a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
			return -1;
801066a3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
801066a8:	5b                   	pop    %ebx
801066a9:	5e                   	pop    %esi
801066aa:	5f                   	pop    %edi
801066ab:	5d                   	pop    %ebp
801066ac:	c3                   	ret
		panic("loaduvm: addr must be page aligned");
801066ad:	83 ec 0c             	sub    $0xc,%esp
801066b0:	68 68 89 10 80       	push   $0x80108968
801066b5:	e8 c6 9c ff ff       	call   80100380 <panic>
801066ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

801066c0 <allocuvm>:
{
801066c0:	55                   	push   %ebp
801066c1:	89 e5                	mov    %esp,%ebp
801066c3:	57                   	push   %edi
801066c4:	56                   	push   %esi
801066c5:	53                   	push   %ebx
801066c6:	83 ec 1c             	sub    $0x1c,%esp
801066c9:	8b 75 10             	mov    0x10(%ebp),%esi
	if (newsz >= KERNBASE)
801066cc:	85 f6                	test   %esi,%esi
801066ce:	0f 88 98 00 00 00    	js     8010676c <allocuvm+0xac>
801066d4:	89 f2                	mov    %esi,%edx
	if (newsz < oldsz)
801066d6:	3b 75 0c             	cmp    0xc(%ebp),%esi
801066d9:	0f 82 a1 00 00 00    	jb     80106780 <allocuvm+0xc0>
	a = PGROUNDUP(oldsz);
801066df:	8b 45 0c             	mov    0xc(%ebp),%eax
801066e2:	05 ff 0f 00 00       	add    $0xfff,%eax
801066e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
801066ec:	89 c7                	mov    %eax,%edi
	for (; a < newsz; a += PGSIZE) {
801066ee:	39 f0                	cmp    %esi,%eax
801066f0:	0f 83 8d 00 00 00    	jae    80106783 <allocuvm+0xc3>
801066f6:	89 75 e4             	mov    %esi,-0x1c(%ebp)
801066f9:	eb 44                	jmp    8010673f <allocuvm+0x7f>
801066fb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
		memset(mem, 0, PGSIZE);
80106700:	83 ec 04             	sub    $0x4,%esp
80106703:	68 00 10 00 00       	push   $0x1000
80106708:	6a 00                	push   $0x0
8010670a:	50                   	push   %eax
8010670b:	e8 80 e0 ff ff       	call   80104790 <memset>
		if (mappages(pgdir, (char *)a, PGSIZE, V2P(mem), PTE_W | PTE_U) < 0) {
80106710:	58                   	pop    %eax
80106711:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
80106717:	5a                   	pop    %edx
80106718:	6a 06                	push   $0x6
8010671a:	b9 00 10 00 00       	mov    $0x1000,%ecx
8010671f:	89 fa                	mov    %edi,%edx
80106721:	50                   	push   %eax
80106722:	8b 45 08             	mov    0x8(%ebp),%eax
80106725:	e8 a6 fb ff ff       	call   801062d0 <mappages>
8010672a:	83 c4 10             	add    $0x10,%esp
8010672d:	85 c0                	test   %eax,%eax
8010672f:	78 5f                	js     80106790 <allocuvm+0xd0>
	for (; a < newsz; a += PGSIZE) {
80106731:	81 c7 00 10 00 00    	add    $0x1000,%edi
80106737:	39 f7                	cmp    %esi,%edi
80106739:	0f 83 89 00 00 00    	jae    801067c8 <allocuvm+0x108>
		mem = kalloc();
8010673f:	e8 5c c2 ff ff       	call   801029a0 <kalloc>
80106744:	89 c3                	mov    %eax,%ebx
		if (mem == 0) {
80106746:	85 c0                	test   %eax,%eax
80106748:	75 b6                	jne    80106700 <allocuvm+0x40>
			cprintf("allocuvm out of memory\n");
8010674a:	83 ec 0c             	sub    $0xc,%esp
8010674d:	68 10 86 10 80       	push   $0x80108610
80106752:	e8 f9 9f ff ff       	call   80100750 <cprintf>
	if (newsz >= oldsz)
80106757:	83 c4 10             	add    $0x10,%esp
8010675a:	3b 75 0c             	cmp    0xc(%ebp),%esi
8010675d:	74 0d                	je     8010676c <allocuvm+0xac>
8010675f:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80106762:	8b 45 08             	mov    0x8(%ebp),%eax
80106765:	89 f2                	mov    %esi,%edx
80106767:	e8 a4 fa ff ff       	call   80106210 <deallocuvm.part.0>
		return 0;
8010676c:	31 d2                	xor    %edx,%edx
}
8010676e:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106771:	89 d0                	mov    %edx,%eax
80106773:	5b                   	pop    %ebx
80106774:	5e                   	pop    %esi
80106775:	5f                   	pop    %edi
80106776:	5d                   	pop    %ebp
80106777:	c3                   	ret
80106778:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010677f:	00 
		return oldsz;
80106780:	8b 55 0c             	mov    0xc(%ebp),%edx
}
80106783:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106786:	89 d0                	mov    %edx,%eax
80106788:	5b                   	pop    %ebx
80106789:	5e                   	pop    %esi
8010678a:	5f                   	pop    %edi
8010678b:	5d                   	pop    %ebp
8010678c:	c3                   	ret
8010678d:	8d 76 00             	lea    0x0(%esi),%esi
			cprintf("allocuvm out of memory (2)\n");
80106790:	83 ec 0c             	sub    $0xc,%esp
80106793:	68 28 86 10 80       	push   $0x80108628
80106798:	e8 b3 9f ff ff       	call   80100750 <cprintf>
	if (newsz >= oldsz)
8010679d:	83 c4 10             	add    $0x10,%esp
801067a0:	3b 75 0c             	cmp    0xc(%ebp),%esi
801067a3:	74 0d                	je     801067b2 <allocuvm+0xf2>
801067a5:	8b 4d 0c             	mov    0xc(%ebp),%ecx
801067a8:	8b 45 08             	mov    0x8(%ebp),%eax
801067ab:	89 f2                	mov    %esi,%edx
801067ad:	e8 5e fa ff ff       	call   80106210 <deallocuvm.part.0>
			kfree(mem);
801067b2:	83 ec 0c             	sub    $0xc,%esp
801067b5:	53                   	push   %ebx
801067b6:	e8 25 c0 ff ff       	call   801027e0 <kfree>
			return 0;
801067bb:	83 c4 10             	add    $0x10,%esp
		return 0;
801067be:	31 d2                	xor    %edx,%edx
801067c0:	eb ac                	jmp    8010676e <allocuvm+0xae>
801067c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
801067c8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
}
801067cb:	8d 65 f4             	lea    -0xc(%ebp),%esp
801067ce:	5b                   	pop    %ebx
801067cf:	5e                   	pop    %esi
801067d0:	89 d0                	mov    %edx,%eax
801067d2:	5f                   	pop    %edi
801067d3:	5d                   	pop    %ebp
801067d4:	c3                   	ret
801067d5:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801067dc:	00 
801067dd:	8d 76 00             	lea    0x0(%esi),%esi

801067e0 <deallocuvm>:
{
801067e0:	55                   	push   %ebp
801067e1:	89 e5                	mov    %esp,%ebp
801067e3:	8b 55 0c             	mov    0xc(%ebp),%edx
801067e6:	8b 4d 10             	mov    0x10(%ebp),%ecx
801067e9:	8b 45 08             	mov    0x8(%ebp),%eax
	if (newsz >= oldsz)
801067ec:	39 d1                	cmp    %edx,%ecx
801067ee:	73 10                	jae    80106800 <deallocuvm+0x20>
}
801067f0:	5d                   	pop    %ebp
801067f1:	e9 1a fa ff ff       	jmp    80106210 <deallocuvm.part.0>
801067f6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801067fd:	00 
801067fe:	66 90                	xchg   %ax,%ax
80106800:	89 d0                	mov    %edx,%eax
80106802:	5d                   	pop    %ebp
80106803:	c3                   	ret
80106804:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010680b:	00 
8010680c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80106810 <freevm>:

// Free a page table and all the physical memory pages
// in the user part.
void
freevm(pde_t *pgdir)
{
80106810:	55                   	push   %ebp
80106811:	89 e5                	mov    %esp,%ebp
80106813:	57                   	push   %edi
80106814:	56                   	push   %esi
80106815:	53                   	push   %ebx
80106816:	83 ec 0c             	sub    $0xc,%esp
80106819:	8b 75 08             	mov    0x8(%ebp),%esi
	uint i;

	if (pgdir == 0)
8010681c:	85 f6                	test   %esi,%esi
8010681e:	74 59                	je     80106879 <freevm+0x69>
	if (newsz >= oldsz)
80106820:	31 c9                	xor    %ecx,%ecx
80106822:	ba 00 00 00 80       	mov    $0x80000000,%edx
80106827:	89 f0                	mov    %esi,%eax
80106829:	89 f3                	mov    %esi,%ebx
8010682b:	e8 e0 f9 ff ff       	call   80106210 <deallocuvm.part.0>
		panic("freevm: no pgdir");
	deallocuvm(pgdir, KERNBASE, 0);
	for (i = 0; i < NPDENTRIES; i++) {
80106830:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
80106836:	eb 0f                	jmp    80106847 <freevm+0x37>
80106838:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010683f:	00 
80106840:	83 c3 04             	add    $0x4,%ebx
80106843:	39 fb                	cmp    %edi,%ebx
80106845:	74 23                	je     8010686a <freevm+0x5a>
		if (pgdir[i] & PTE_P) {
80106847:	8b 03                	mov    (%ebx),%eax
80106849:	a8 01                	test   $0x1,%al
8010684b:	74 f3                	je     80106840 <freevm+0x30>
			char *v = P2V(PTE_ADDR(pgdir[i]));
8010684d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
			kfree(v);
80106852:	83 ec 0c             	sub    $0xc,%esp
	for (i = 0; i < NPDENTRIES; i++) {
80106855:	83 c3 04             	add    $0x4,%ebx
			char *v = P2V(PTE_ADDR(pgdir[i]));
80106858:	05 00 00 00 80       	add    $0x80000000,%eax
			kfree(v);
8010685d:	50                   	push   %eax
8010685e:	e8 7d bf ff ff       	call   801027e0 <kfree>
80106863:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NPDENTRIES; i++) {
80106866:	39 fb                	cmp    %edi,%ebx
80106868:	75 dd                	jne    80106847 <freevm+0x37>
		}
	}
	kfree((char *)pgdir);
8010686a:	89 75 08             	mov    %esi,0x8(%ebp)
}
8010686d:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106870:	5b                   	pop    %ebx
80106871:	5e                   	pop    %esi
80106872:	5f                   	pop    %edi
80106873:	5d                   	pop    %ebp
	kfree((char *)pgdir);
80106874:	e9 67 bf ff ff       	jmp    801027e0 <kfree>
		panic("freevm: no pgdir");
80106879:	83 ec 0c             	sub    $0xc,%esp
8010687c:	68 44 86 10 80       	push   $0x80108644
80106881:	e8 fa 9a ff ff       	call   80100380 <panic>
80106886:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010688d:	00 
8010688e:	66 90                	xchg   %ax,%ax

80106890 <setupkvm>:
{
80106890:	55                   	push   %ebp
80106891:	89 e5                	mov    %esp,%ebp
80106893:	56                   	push   %esi
80106894:	53                   	push   %ebx
	if ((pgdir = (pde_t *)kalloc()) == 0)
80106895:	e8 06 c1 ff ff       	call   801029a0 <kalloc>
8010689a:	85 c0                	test   %eax,%eax
8010689c:	74 5e                	je     801068fc <setupkvm+0x6c>
	memset(pgdir, 0, PGSIZE);
8010689e:	83 ec 04             	sub    $0x4,%esp
801068a1:	89 c6                	mov    %eax,%esi
	for (k = kmap; k < &kmap[NELEM(kmap)]; k++)
801068a3:	bb 20 c0 10 80       	mov    $0x8010c020,%ebx
	memset(pgdir, 0, PGSIZE);
801068a8:	68 00 10 00 00       	push   $0x1000
801068ad:	6a 00                	push   $0x0
801068af:	50                   	push   %eax
801068b0:	e8 db de ff ff       	call   80104790 <memset>
801068b5:	83 c4 10             	add    $0x10,%esp
								 (uint)k->phys_start, k->perm) < 0) {
801068b8:	8b 43 04             	mov    0x4(%ebx),%eax
		if (mappages(pgdir, k->virt, k->phys_end - k->phys_start,
801068bb:	83 ec 08             	sub    $0x8,%esp
801068be:	8b 4b 08             	mov    0x8(%ebx),%ecx
801068c1:	8b 13                	mov    (%ebx),%edx
801068c3:	ff 73 0c             	push   0xc(%ebx)
801068c6:	50                   	push   %eax
801068c7:	29 c1                	sub    %eax,%ecx
801068c9:	89 f0                	mov    %esi,%eax
801068cb:	e8 00 fa ff ff       	call   801062d0 <mappages>
801068d0:	83 c4 10             	add    $0x10,%esp
801068d3:	85 c0                	test   %eax,%eax
801068d5:	78 19                	js     801068f0 <setupkvm+0x60>
	for (k = kmap; k < &kmap[NELEM(kmap)]; k++)
801068d7:	83 c3 10             	add    $0x10,%ebx
801068da:	81 fb 60 c0 10 80    	cmp    $0x8010c060,%ebx
801068e0:	75 d6                	jne    801068b8 <setupkvm+0x28>
}
801068e2:	8d 65 f8             	lea    -0x8(%ebp),%esp
801068e5:	89 f0                	mov    %esi,%eax
801068e7:	5b                   	pop    %ebx
801068e8:	5e                   	pop    %esi
801068e9:	5d                   	pop    %ebp
801068ea:	c3                   	ret
801068eb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
			freevm(pgdir);
801068f0:	83 ec 0c             	sub    $0xc,%esp
801068f3:	56                   	push   %esi
801068f4:	e8 17 ff ff ff       	call   80106810 <freevm>
			return 0;
801068f9:	83 c4 10             	add    $0x10,%esp
}
801068fc:	8d 65 f8             	lea    -0x8(%ebp),%esp
		return 0;
801068ff:	31 f6                	xor    %esi,%esi
}
80106901:	89 f0                	mov    %esi,%eax
80106903:	5b                   	pop    %ebx
80106904:	5e                   	pop    %esi
80106905:	5d                   	pop    %ebp
80106906:	c3                   	ret
80106907:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010690e:	00 
8010690f:	90                   	nop

80106910 <kvmalloc>:
{
80106910:	55                   	push   %ebp
80106911:	89 e5                	mov    %esp,%ebp
80106913:	83 ec 08             	sub    $0x8,%esp
	kpgdir = setupkvm();
80106916:	e8 75 ff ff ff       	call   80106890 <setupkvm>
8010691b:	a3 84 92 13 80       	mov    %eax,0x80139284
	lcr3(V2P(kpgdir)); // switch to the kernel page table
80106920:	05 00 00 00 80       	add    $0x80000000,%eax
80106925:	0f 22 d8             	mov    %eax,%cr3
}
80106928:	c9                   	leave
80106929:	c3                   	ret
8010692a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80106930 <clearpteu>:

// Clear PTE_U on a page. Used to create an inaccessible
// page beneath the user stack.
void
clearpteu(pde_t *pgdir, char *uva)
{
80106930:	55                   	push   %ebp
80106931:	89 e5                	mov    %esp,%ebp
80106933:	83 ec 08             	sub    $0x8,%esp
80106936:	8b 45 0c             	mov    0xc(%ebp),%eax
	if (*pde & PTE_P) {
80106939:	8b 55 08             	mov    0x8(%ebp),%edx
	pde = &pgdir[PDX(va)];
8010693c:	89 c1                	mov    %eax,%ecx
8010693e:	c1 e9 16             	shr    $0x16,%ecx
	if (*pde & PTE_P) {
80106941:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
80106944:	f6 c2 01             	test   $0x1,%dl
80106947:	75 17                	jne    80106960 <clearpteu+0x30>
	pte_t *pte;

	pte = walkpgdir(pgdir, uva, 0);
	if (pte == 0)
		panic("clearpteu");
80106949:	83 ec 0c             	sub    $0xc,%esp
8010694c:	68 55 86 10 80       	push   $0x80108655
80106951:	e8 2a 9a ff ff       	call   80100380 <panic>
80106956:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010695d:	00 
8010695e:	66 90                	xchg   %ax,%ax
	return &pgtab[PTX(va)];
80106960:	c1 e8 0a             	shr    $0xa,%eax
		pgtab = (pte_t *)P2V(PTE_ADDR(*pde));
80106963:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
	return &pgtab[PTX(va)];
80106969:	25 fc 0f 00 00       	and    $0xffc,%eax
8010696e:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
	if (pte == 0)
80106975:	85 c0                	test   %eax,%eax
80106977:	74 d0                	je     80106949 <clearpteu+0x19>
	*pte &= ~PTE_U;
80106979:	83 20 fb             	andl   $0xfffffffb,(%eax)
}
8010697c:	c9                   	leave
8010697d:	c3                   	ret
8010697e:	66 90                	xchg   %ax,%ax

80106980 <copyuvm>:

// Given a parent process's page table, create a copy
// of it for a child.
pde_t *
copyuvm(pde_t *pgdir, uint sz)
{
80106980:	55                   	push   %ebp
80106981:	89 e5                	mov    %esp,%ebp
80106983:	57                   	push   %edi
80106984:	56                   	push   %esi
80106985:	53                   	push   %ebx
80106986:	83 ec 1c             	sub    $0x1c,%esp
	pde_t *d;
	pte_t *pte;
	uint pa, i, flags;
	char *mem;

	if ((d = setupkvm()) == 0)
80106989:	e8 02 ff ff ff       	call   80106890 <setupkvm>
8010698e:	89 45 e0             	mov    %eax,-0x20(%ebp)
80106991:	85 c0                	test   %eax,%eax
80106993:	0f 84 e9 00 00 00    	je     80106a82 <copyuvm+0x102>
		return 0;
	for (i = 0; i < sz; i += PGSIZE) {
80106999:	8b 4d 0c             	mov    0xc(%ebp),%ecx
8010699c:	85 c9                	test   %ecx,%ecx
8010699e:	0f 84 b2 00 00 00    	je     80106a56 <copyuvm+0xd6>
801069a4:	31 f6                	xor    %esi,%esi
801069a6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801069ad:	00 
801069ae:	66 90                	xchg   %ax,%ax
	if (*pde & PTE_P) {
801069b0:	8b 4d 08             	mov    0x8(%ebp),%ecx
	pde = &pgdir[PDX(va)];
801069b3:	89 f0                	mov    %esi,%eax
801069b5:	c1 e8 16             	shr    $0x16,%eax
	if (*pde & PTE_P) {
801069b8:	8b 04 81             	mov    (%ecx,%eax,4),%eax
801069bb:	a8 01                	test   $0x1,%al
801069bd:	75 11                	jne    801069d0 <copyuvm+0x50>
		if ((pte = walkpgdir(pgdir, (void *)i, 0)) == 0)
			panic("copyuvm: pte should exist");
801069bf:	83 ec 0c             	sub    $0xc,%esp
801069c2:	68 5f 86 10 80       	push   $0x8010865f
801069c7:	e8 b4 99 ff ff       	call   80100380 <panic>
801069cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
	return &pgtab[PTX(va)];
801069d0:	89 f2                	mov    %esi,%edx
		pgtab = (pte_t *)P2V(PTE_ADDR(*pde));
801069d2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
	return &pgtab[PTX(va)];
801069d7:	c1 ea 0a             	shr    $0xa,%edx
801069da:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
801069e0:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
		if ((pte = walkpgdir(pgdir, (void *)i, 0)) == 0)
801069e7:	85 c0                	test   %eax,%eax
801069e9:	74 d4                	je     801069bf <copyuvm+0x3f>
		if (!(*pte & PTE_P))
801069eb:	8b 00                	mov    (%eax),%eax
801069ed:	a8 01                	test   $0x1,%al
801069ef:	0f 84 9f 00 00 00    	je     80106a94 <copyuvm+0x114>
			panic("copyuvm: page not present");
		pa = PTE_ADDR(*pte);
801069f5:	89 c7                	mov    %eax,%edi
		flags = PTE_FLAGS(*pte);
801069f7:	25 ff 0f 00 00       	and    $0xfff,%eax
801069fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		pa = PTE_ADDR(*pte);
801069ff:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
		if ((mem = kalloc()) == 0)
80106a05:	e8 96 bf ff ff       	call   801029a0 <kalloc>
80106a0a:	89 c3                	mov    %eax,%ebx
80106a0c:	85 c0                	test   %eax,%eax
80106a0e:	74 64                	je     80106a74 <copyuvm+0xf4>
			goto bad;
		memmove(mem, (char *)P2V(pa), PGSIZE);
80106a10:	83 ec 04             	sub    $0x4,%esp
80106a13:	81 c7 00 00 00 80    	add    $0x80000000,%edi
80106a19:	68 00 10 00 00       	push   $0x1000
80106a1e:	57                   	push   %edi
80106a1f:	50                   	push   %eax
80106a20:	e8 fb dd ff ff       	call   80104820 <memmove>
		if (mappages(d, (void *)i, PGSIZE, V2P(mem), flags) < 0) {
80106a25:	58                   	pop    %eax
80106a26:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
80106a2c:	5a                   	pop    %edx
80106a2d:	ff 75 e4             	push   -0x1c(%ebp)
80106a30:	b9 00 10 00 00       	mov    $0x1000,%ecx
80106a35:	89 f2                	mov    %esi,%edx
80106a37:	50                   	push   %eax
80106a38:	8b 45 e0             	mov    -0x20(%ebp),%eax
80106a3b:	e8 90 f8 ff ff       	call   801062d0 <mappages>
80106a40:	83 c4 10             	add    $0x10,%esp
80106a43:	85 c0                	test   %eax,%eax
80106a45:	78 21                	js     80106a68 <copyuvm+0xe8>
	for (i = 0; i < sz; i += PGSIZE) {
80106a47:	81 c6 00 10 00 00    	add    $0x1000,%esi
80106a4d:	3b 75 0c             	cmp    0xc(%ebp),%esi
80106a50:	0f 82 5a ff ff ff    	jb     801069b0 <copyuvm+0x30>
	return d;

bad:
	freevm(d);
	return 0;
}
80106a56:	8b 45 e0             	mov    -0x20(%ebp),%eax
80106a59:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106a5c:	5b                   	pop    %ebx
80106a5d:	5e                   	pop    %esi
80106a5e:	5f                   	pop    %edi
80106a5f:	5d                   	pop    %ebp
80106a60:	c3                   	ret
80106a61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
			kfree(mem);
80106a68:	83 ec 0c             	sub    $0xc,%esp
80106a6b:	53                   	push   %ebx
80106a6c:	e8 6f bd ff ff       	call   801027e0 <kfree>
			goto bad;
80106a71:	83 c4 10             	add    $0x10,%esp
	freevm(d);
80106a74:	83 ec 0c             	sub    $0xc,%esp
80106a77:	ff 75 e0             	push   -0x20(%ebp)
80106a7a:	e8 91 fd ff ff       	call   80106810 <freevm>
	return 0;
80106a7f:	83 c4 10             	add    $0x10,%esp
		return 0;
80106a82:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
}
80106a89:	8b 45 e0             	mov    -0x20(%ebp),%eax
80106a8c:	8d 65 f4             	lea    -0xc(%ebp),%esp
80106a8f:	5b                   	pop    %ebx
80106a90:	5e                   	pop    %esi
80106a91:	5f                   	pop    %edi
80106a92:	5d                   	pop    %ebp
80106a93:	c3                   	ret
			panic("copyuvm: page not present");
80106a94:	83 ec 0c             	sub    $0xc,%esp
80106a97:	68 79 86 10 80       	push   $0x80108679
80106a9c:	e8 df 98 ff ff       	call   80100380 <panic>
80106aa1:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80106aa8:	00 
80106aa9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi

80106ab0 <uva2ka>:

// Map user virtual address to kernel address.
char *
uva2ka(pde_t *pgdir, char *uva)
{
80106ab0:	55                   	push   %ebp
80106ab1:	89 e5                	mov    %esp,%ebp
80106ab3:	8b 45 0c             	mov    0xc(%ebp),%eax
	if (*pde & PTE_P) {
80106ab6:	8b 55 08             	mov    0x8(%ebp),%edx
	pde = &pgdir[PDX(va)];
80106ab9:	89 c1                	mov    %eax,%ecx
80106abb:	c1 e9 16             	shr    $0x16,%ecx
	if (*pde & PTE_P) {
80106abe:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
80106ac1:	f6 c2 01             	test   $0x1,%dl
80106ac4:	0f 84 f8 00 00 00    	je     80106bc2 <uva2ka.cold>
	return &pgtab[PTX(va)];
80106aca:	c1 e8 0c             	shr    $0xc,%eax
		pgtab = (pte_t *)P2V(PTE_ADDR(*pde));
80106acd:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
	if ((*pte & PTE_P) == 0)
		return 0;
	if ((*pte & PTE_U) == 0)
		return 0;
	return (char *)P2V(PTE_ADDR(*pte));
}
80106ad3:	5d                   	pop    %ebp
	return &pgtab[PTX(va)];
80106ad4:	25 ff 03 00 00       	and    $0x3ff,%eax
	if ((*pte & PTE_P) == 0)
80106ad9:	8b 94 82 00 00 00 80 	mov    -0x80000000(%edx,%eax,4),%edx
	return (char *)P2V(PTE_ADDR(*pte));
80106ae0:	89 d0                	mov    %edx,%eax
80106ae2:	f7 d2                	not    %edx
80106ae4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
80106ae9:	05 00 00 00 80       	add    $0x80000000,%eax
80106aee:	83 e2 05             	and    $0x5,%edx
80106af1:	ba 00 00 00 00       	mov    $0x0,%edx
80106af6:	0f 45 c2             	cmovne %edx,%eax
}
80106af9:	c3                   	ret
80106afa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80106b00 <copyout>:
// Copy len bytes from p to user address va in page table pgdir.
// Most useful when pgdir is not the current page table.
// uva2ka ensures this only works for PTE_U pages.
int
copyout(pde_t *pgdir, uint va, void *p, uint len)
{
80106b00:	55                   	push   %ebp
80106b01:	89 e5                	mov    %esp,%ebp
80106b03:	57                   	push   %edi
80106b04:	56                   	push   %esi
80106b05:	53                   	push   %ebx
80106b06:	83 ec 0c             	sub    $0xc,%esp
80106b09:	8b 75 14             	mov    0x14(%ebp),%esi
80106b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
80106b0f:	8b 55 10             	mov    0x10(%ebp),%edx
	char *buf, *pa0;
	uint n, va0;

	buf = (char *)p;
	while (len > 0) {
80106b12:	85 f6                	test   %esi,%esi
80106b14:	75 51                	jne    80106b67 <copyout+0x67>
80106b16:	e9 9d 00 00 00       	jmp    80106bb8 <copyout+0xb8>
80106b1b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
	return (char *)P2V(PTE_ADDR(*pte));
80106b20:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
80106b26:	8d 8b 00 00 00 80    	lea    -0x80000000(%ebx),%ecx
		va0 = (uint)PGROUNDDOWN(va);
		pa0 = uva2ka(pgdir, (char *)va0);
		if (pa0 == 0)
80106b2c:	81 fb 00 00 00 80    	cmp    $0x80000000,%ebx
80106b32:	74 74                	je     80106ba8 <copyout+0xa8>
			return -1;
		n = PGSIZE - (va - va0);
80106b34:	89 fb                	mov    %edi,%ebx
80106b36:	29 c3                	sub    %eax,%ebx
80106b38:	81 c3 00 10 00 00    	add    $0x1000,%ebx
		if (n > len)
80106b3e:	39 f3                	cmp    %esi,%ebx
80106b40:	0f 47 de             	cmova  %esi,%ebx
			n = len;
		memmove(pa0 + (va - va0), buf, n);
80106b43:	29 f8                	sub    %edi,%eax
80106b45:	83 ec 04             	sub    $0x4,%esp
80106b48:	01 c1                	add    %eax,%ecx
80106b4a:	53                   	push   %ebx
80106b4b:	52                   	push   %edx
80106b4c:	89 55 10             	mov    %edx,0x10(%ebp)
80106b4f:	51                   	push   %ecx
80106b50:	e8 cb dc ff ff       	call   80104820 <memmove>
		len -= n;
		buf += n;
80106b55:	8b 55 10             	mov    0x10(%ebp),%edx
		va = va0 + PGSIZE;
80106b58:	8d 87 00 10 00 00    	lea    0x1000(%edi),%eax
	while (len > 0) {
80106b5e:	83 c4 10             	add    $0x10,%esp
		buf += n;
80106b61:	01 da                	add    %ebx,%edx
	while (len > 0) {
80106b63:	29 de                	sub    %ebx,%esi
80106b65:	74 51                	je     80106bb8 <copyout+0xb8>
	if (*pde & PTE_P) {
80106b67:	8b 5d 08             	mov    0x8(%ebp),%ebx
	pde = &pgdir[PDX(va)];
80106b6a:	89 c1                	mov    %eax,%ecx
		va0 = (uint)PGROUNDDOWN(va);
80106b6c:	89 c7                	mov    %eax,%edi
	pde = &pgdir[PDX(va)];
80106b6e:	c1 e9 16             	shr    $0x16,%ecx
		va0 = (uint)PGROUNDDOWN(va);
80106b71:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
	if (*pde & PTE_P) {
80106b77:	8b 0c 8b             	mov    (%ebx,%ecx,4),%ecx
80106b7a:	f6 c1 01             	test   $0x1,%cl
80106b7d:	0f 84 46 00 00 00    	je     80106bc9 <copyout.cold>
	return &pgtab[PTX(va)];
80106b83:	89 fb                	mov    %edi,%ebx
		pgtab = (pte_t *)P2V(PTE_ADDR(*pde));
80106b85:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
	return &pgtab[PTX(va)];
80106b8b:	c1 eb 0c             	shr    $0xc,%ebx
80106b8e:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
	if ((*pte & PTE_P) == 0)
80106b94:	8b 9c 99 00 00 00 80 	mov    -0x80000000(%ecx,%ebx,4),%ebx
	if ((*pte & PTE_U) == 0)
80106b9b:	89 d9                	mov    %ebx,%ecx
80106b9d:	f7 d1                	not    %ecx
80106b9f:	83 e1 05             	and    $0x5,%ecx
80106ba2:	0f 84 78 ff ff ff    	je     80106b20 <copyout+0x20>
	}
	return 0;
}
80106ba8:	8d 65 f4             	lea    -0xc(%ebp),%esp
			return -1;
80106bab:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80106bb0:	5b                   	pop    %ebx
80106bb1:	5e                   	pop    %esi
80106bb2:	5f                   	pop    %edi
80106bb3:	5d                   	pop    %ebp
80106bb4:	c3                   	ret
80106bb5:	8d 76 00             	lea    0x0(%esi),%esi
80106bb8:	8d 65 f4             	lea    -0xc(%ebp),%esp
	return 0;
80106bbb:	31 c0                	xor    %eax,%eax
}
80106bbd:	5b                   	pop    %ebx
80106bbe:	5e                   	pop    %esi
80106bbf:	5f                   	pop    %edi
80106bc0:	5d                   	pop    %ebp
80106bc1:	c3                   	ret

80106bc2 <uva2ka.cold>:
	if ((*pte & PTE_P) == 0)
80106bc2:	a1 00 00 00 00       	mov    0x0,%eax
80106bc7:	0f 0b                	ud2

80106bc9 <copyout.cold>:
80106bc9:	a1 00 00 00 00       	mov    0x0,%eax
80106bce:	0f 0b                	ud2

80106bd0 <swtch>:
# a struct context, and save its address in *old.
# Switch stacks to new and pop previously-saved registers.

.globl swtch
swtch:
  movl 4(%esp), %eax
80106bd0:	8b 44 24 04          	mov    0x4(%esp),%eax
  movl 8(%esp), %edx
80106bd4:	8b 54 24 08          	mov    0x8(%esp),%edx

  # Save old callee-saved registers
  pushl %ebp
80106bd8:	55                   	push   %ebp
  pushl %ebx
80106bd9:	53                   	push   %ebx
  pushl %esi
80106bda:	56                   	push   %esi
  pushl %edi
80106bdb:	57                   	push   %edi

  # Switch stacks
  movl %esp, (%eax)
80106bdc:	89 20                	mov    %esp,(%eax)
  movl %edx, %esp
80106bde:	89 d4                	mov    %edx,%esp

  # Load new callee-saved registers
  popl %edi
80106be0:	5f                   	pop    %edi
  popl %esi
80106be1:	5e                   	pop    %esi
  popl %ebx
80106be2:	5b                   	pop    %ebx
  popl %ebp
80106be3:	5d                   	pop    %ebp
  ret
80106be4:	c3                   	ret

80106be5 <alltraps>:

  # vectors.S sends all traps here.
.globl alltraps
alltraps:
  # Build trap frame.
  pushl %ds
80106be5:	1e                   	push   %ds
  pushl %es
80106be6:	06                   	push   %es
  pushl %fs
80106be7:	0f a0                	push   %fs
  pushl %gs
80106be9:	0f a8                	push   %gs
  pushal
80106beb:	60                   	pusha

  # Set up data segments.
  movw $(SEG_KDATA<<3), %ax
80106bec:	66 b8 10 00          	mov    $0x10,%ax
  movw %ax, %ds
80106bf0:	8e d8                	mov    %eax,%ds
  movw %ax, %es
80106bf2:	8e c0                	mov    %eax,%es

  # Call trap(tf), where tf=%esp
  pushl %esp
80106bf4:	54                   	push   %esp
  call trap
80106bf5:	e8 76 f1 ff ff       	call   80105d70 <trap>
  addl $4, %esp
80106bfa:	83 c4 04             	add    $0x4,%esp

80106bfd <trapret>:

  # Return falls through to trapret...
.globl trapret
trapret:
  popal
80106bfd:	61                   	popa
  popl %gs
80106bfe:	0f a9                	pop    %gs
  popl %fs
80106c00:	0f a1                	pop    %fs
  popl %es
80106c02:	07                   	pop    %es
  popl %ds
80106c03:	1f                   	pop    %ds
  addl $0x8, %esp  # trapno and errcode
80106c04:	83 c4 08             	add    $0x8,%esp
  iret
80106c07:	cf                   	iret

80106c08 <vector0>:
# generated by vectors.pl - do not edit
# handlers
.globl alltraps
.globl vector0
vector0:
  pushl $0
80106c08:	6a 00                	push   $0x0
  pushl $0
80106c0a:	6a 00                	push   $0x0
  jmp alltraps
80106c0c:	e9 d4 ff ff ff       	jmp    80106be5 <alltraps>

80106c11 <vector1>:
.globl vector1
vector1:
  pushl $0
80106c11:	6a 00                	push   $0x0
  pushl $1
80106c13:	6a 01                	push   $0x1
  jmp alltraps
80106c15:	e9 cb ff ff ff       	jmp    80106be5 <alltraps>

80106c1a <vector2>:
.globl vector2
vector2:
  pushl $0
80106c1a:	6a 00                	push   $0x0
  pushl $2
80106c1c:	6a 02                	push   $0x2
  jmp alltraps
80106c1e:	e9 c2 ff ff ff       	jmp    80106be5 <alltraps>

80106c23 <vector3>:
.globl vector3
vector3:
  pushl $0
80106c23:	6a 00                	push   $0x0
  pushl $3
80106c25:	6a 03                	push   $0x3
  jmp alltraps
80106c27:	e9 b9 ff ff ff       	jmp    80106be5 <alltraps>

80106c2c <vector4>:
.globl vector4
vector4:
  pushl $0
80106c2c:	6a 00                	push   $0x0
  pushl $4
80106c2e:	6a 04                	push   $0x4
  jmp alltraps
80106c30:	e9 b0 ff ff ff       	jmp    80106be5 <alltraps>

80106c35 <vector5>:
.globl vector5
vector5:
  pushl $0
80106c35:	6a 00                	push   $0x0
  pushl $5
80106c37:	6a 05                	push   $0x5
  jmp alltraps
80106c39:	e9 a7 ff ff ff       	jmp    80106be5 <alltraps>

80106c3e <vector6>:
.globl vector6
vector6:
  pushl $0
80106c3e:	6a 00                	push   $0x0
  pushl $6
80106c40:	6a 06                	push   $0x6
  jmp alltraps
80106c42:	e9 9e ff ff ff       	jmp    80106be5 <alltraps>

80106c47 <vector7>:
.globl vector7
vector7:
  pushl $0
80106c47:	6a 00                	push   $0x0
  pushl $7
80106c49:	6a 07                	push   $0x7
  jmp alltraps
80106c4b:	e9 95 ff ff ff       	jmp    80106be5 <alltraps>

80106c50 <vector8>:
.globl vector8
vector8:
  pushl $8
80106c50:	6a 08                	push   $0x8
  jmp alltraps
80106c52:	e9 8e ff ff ff       	jmp    80106be5 <alltraps>

80106c57 <vector9>:
.globl vector9
vector9:
  pushl $0
80106c57:	6a 00                	push   $0x0
  pushl $9
80106c59:	6a 09                	push   $0x9
  jmp alltraps
80106c5b:	e9 85 ff ff ff       	jmp    80106be5 <alltraps>

80106c60 <vector10>:
.globl vector10
vector10:
  pushl $10
80106c60:	6a 0a                	push   $0xa
  jmp alltraps
80106c62:	e9 7e ff ff ff       	jmp    80106be5 <alltraps>

80106c67 <vector11>:
.globl vector11
vector11:
  pushl $11
80106c67:	6a 0b                	push   $0xb
  jmp alltraps
80106c69:	e9 77 ff ff ff       	jmp    80106be5 <alltraps>

80106c6e <vector12>:
.globl vector12
vector12:
  pushl $12
80106c6e:	6a 0c                	push   $0xc
  jmp alltraps
80106c70:	e9 70 ff ff ff       	jmp    80106be5 <alltraps>

80106c75 <vector13>:
.globl vector13
vector13:
  pushl $13
80106c75:	6a 0d                	push   $0xd
  jmp alltraps
80106c77:	e9 69 ff ff ff       	jmp    80106be5 <alltraps>

80106c7c <vector14>:
.globl vector14
vector14:
  pushl $14
80106c7c:	6a 0e                	push   $0xe
  jmp alltraps
80106c7e:	e9 62 ff ff ff       	jmp    80106be5 <alltraps>

80106c83 <vector15>:
.globl vector15
vector15:
  pushl $0
80106c83:	6a 00                	push   $0x0
  pushl $15
80106c85:	6a 0f                	push   $0xf
  jmp alltraps
80106c87:	e9 59 ff ff ff       	jmp    80106be5 <alltraps>

80106c8c <vector16>:
.globl vector16
vector16:
  pushl $0
80106c8c:	6a 00                	push   $0x0
  pushl $16
80106c8e:	6a 10                	push   $0x10
  jmp alltraps
80106c90:	e9 50 ff ff ff       	jmp    80106be5 <alltraps>

80106c95 <vector17>:
.globl vector17
vector17:
  pushl $17
80106c95:	6a 11                	push   $0x11
  jmp alltraps
80106c97:	e9 49 ff ff ff       	jmp    80106be5 <alltraps>

80106c9c <vector18>:
.globl vector18
vector18:
  pushl $0
80106c9c:	6a 00                	push   $0x0
  pushl $18
80106c9e:	6a 12                	push   $0x12
  jmp alltraps
80106ca0:	e9 40 ff ff ff       	jmp    80106be5 <alltraps>

80106ca5 <vector19>:
.globl vector19
vector19:
  pushl $0
80106ca5:	6a 00                	push   $0x0
  pushl $19
80106ca7:	6a 13                	push   $0x13
  jmp alltraps
80106ca9:	e9 37 ff ff ff       	jmp    80106be5 <alltraps>

80106cae <vector20>:
.globl vector20
vector20:
  pushl $0
80106cae:	6a 00                	push   $0x0
  pushl $20
80106cb0:	6a 14                	push   $0x14
  jmp alltraps
80106cb2:	e9 2e ff ff ff       	jmp    80106be5 <alltraps>

80106cb7 <vector21>:
.globl vector21
vector21:
  pushl $0
80106cb7:	6a 00                	push   $0x0
  pushl $21
80106cb9:	6a 15                	push   $0x15
  jmp alltraps
80106cbb:	e9 25 ff ff ff       	jmp    80106be5 <alltraps>

80106cc0 <vector22>:
.globl vector22
vector22:
  pushl $0
80106cc0:	6a 00                	push   $0x0
  pushl $22
80106cc2:	6a 16                	push   $0x16
  jmp alltraps
80106cc4:	e9 1c ff ff ff       	jmp    80106be5 <alltraps>

80106cc9 <vector23>:
.globl vector23
vector23:
  pushl $0
80106cc9:	6a 00                	push   $0x0
  pushl $23
80106ccb:	6a 17                	push   $0x17
  jmp alltraps
80106ccd:	e9 13 ff ff ff       	jmp    80106be5 <alltraps>

80106cd2 <vector24>:
.globl vector24
vector24:
  pushl $0
80106cd2:	6a 00                	push   $0x0
  pushl $24
80106cd4:	6a 18                	push   $0x18
  jmp alltraps
80106cd6:	e9 0a ff ff ff       	jmp    80106be5 <alltraps>

80106cdb <vector25>:
.globl vector25
vector25:
  pushl $0
80106cdb:	6a 00                	push   $0x0
  pushl $25
80106cdd:	6a 19                	push   $0x19
  jmp alltraps
80106cdf:	e9 01 ff ff ff       	jmp    80106be5 <alltraps>

80106ce4 <vector26>:
.globl vector26
vector26:
  pushl $0
80106ce4:	6a 00                	push   $0x0
  pushl $26
80106ce6:	6a 1a                	push   $0x1a
  jmp alltraps
80106ce8:	e9 f8 fe ff ff       	jmp    80106be5 <alltraps>

80106ced <vector27>:
.globl vector27
vector27:
  pushl $0
80106ced:	6a 00                	push   $0x0
  pushl $27
80106cef:	6a 1b                	push   $0x1b
  jmp alltraps
80106cf1:	e9 ef fe ff ff       	jmp    80106be5 <alltraps>

80106cf6 <vector28>:
.globl vector28
vector28:
  pushl $0
80106cf6:	6a 00                	push   $0x0
  pushl $28
80106cf8:	6a 1c                	push   $0x1c
  jmp alltraps
80106cfa:	e9 e6 fe ff ff       	jmp    80106be5 <alltraps>

80106cff <vector29>:
.globl vector29
vector29:
  pushl $0
80106cff:	6a 00                	push   $0x0
  pushl $29
80106d01:	6a 1d                	push   $0x1d
  jmp alltraps
80106d03:	e9 dd fe ff ff       	jmp    80106be5 <alltraps>

80106d08 <vector30>:
.globl vector30
vector30:
  pushl $0
80106d08:	6a 00                	push   $0x0
  pushl $30
80106d0a:	6a 1e                	push   $0x1e
  jmp alltraps
80106d0c:	e9 d4 fe ff ff       	jmp    80106be5 <alltraps>

80106d11 <vector31>:
.globl vector31
vector31:
  pushl $0
80106d11:	6a 00                	push   $0x0
  pushl $31
80106d13:	6a 1f                	push   $0x1f
  jmp alltraps
80106d15:	e9 cb fe ff ff       	jmp    80106be5 <alltraps>

80106d1a <vector32>:
.globl vector32
vector32:
  pushl $0
80106d1a:	6a 00                	push   $0x0
  pushl $32
80106d1c:	6a 20                	push   $0x20
  jmp alltraps
80106d1e:	e9 c2 fe ff ff       	jmp    80106be5 <alltraps>

80106d23 <vector33>:
.globl vector33
vector33:
  pushl $0
80106d23:	6a 00                	push   $0x0
  pushl $33
80106d25:	6a 21                	push   $0x21
  jmp alltraps
80106d27:	e9 b9 fe ff ff       	jmp    80106be5 <alltraps>

80106d2c <vector34>:
.globl vector34
vector34:
  pushl $0
80106d2c:	6a 00                	push   $0x0
  pushl $34
80106d2e:	6a 22                	push   $0x22
  jmp alltraps
80106d30:	e9 b0 fe ff ff       	jmp    80106be5 <alltraps>

80106d35 <vector35>:
.globl vector35
vector35:
  pushl $0
80106d35:	6a 00                	push   $0x0
  pushl $35
80106d37:	6a 23                	push   $0x23
  jmp alltraps
80106d39:	e9 a7 fe ff ff       	jmp    80106be5 <alltraps>

80106d3e <vector36>:
.globl vector36
vector36:
  pushl $0
80106d3e:	6a 00                	push   $0x0
  pushl $36
80106d40:	6a 24                	push   $0x24
  jmp alltraps
80106d42:	e9 9e fe ff ff       	jmp    80106be5 <alltraps>

80106d47 <vector37>:
.globl vector37
vector37:
  pushl $0
80106d47:	6a 00                	push   $0x0
  pushl $37
80106d49:	6a 25                	push   $0x25
  jmp alltraps
80106d4b:	e9 95 fe ff ff       	jmp    80106be5 <alltraps>

80106d50 <vector38>:
.globl vector38
vector38:
  pushl $0
80106d50:	6a 00                	push   $0x0
  pushl $38
80106d52:	6a 26                	push   $0x26
  jmp alltraps
80106d54:	e9 8c fe ff ff       	jmp    80106be5 <alltraps>

80106d59 <vector39>:
.globl vector39
vector39:
  pushl $0
80106d59:	6a 00                	push   $0x0
  pushl $39
80106d5b:	6a 27                	push   $0x27
  jmp alltraps
80106d5d:	e9 83 fe ff ff       	jmp    80106be5 <alltraps>

80106d62 <vector40>:
.globl vector40
vector40:
  pushl $0
80106d62:	6a 00                	push   $0x0
  pushl $40
80106d64:	6a 28                	push   $0x28
  jmp alltraps
80106d66:	e9 7a fe ff ff       	jmp    80106be5 <alltraps>

80106d6b <vector41>:
.globl vector41
vector41:
  pushl $0
80106d6b:	6a 00                	push   $0x0
  pushl $41
80106d6d:	6a 29                	push   $0x29
  jmp alltraps
80106d6f:	e9 71 fe ff ff       	jmp    80106be5 <alltraps>

80106d74 <vector42>:
.globl vector42
vector42:
  pushl $0
80106d74:	6a 00                	push   $0x0
  pushl $42
80106d76:	6a 2a                	push   $0x2a
  jmp alltraps
80106d78:	e9 68 fe ff ff       	jmp    80106be5 <alltraps>

80106d7d <vector43>:
.globl vector43
vector43:
  pushl $0
80106d7d:	6a 00                	push   $0x0
  pushl $43
80106d7f:	6a 2b                	push   $0x2b
  jmp alltraps
80106d81:	e9 5f fe ff ff       	jmp    80106be5 <alltraps>

80106d86 <vector44>:
.globl vector44
vector44:
  pushl $0
80106d86:	6a 00                	push   $0x0
  pushl $44
80106d88:	6a 2c                	push   $0x2c
  jmp alltraps
80106d8a:	e9 56 fe ff ff       	jmp    80106be5 <alltraps>

80106d8f <vector45>:
.globl vector45
vector45:
  pushl $0
80106d8f:	6a 00                	push   $0x0
  pushl $45
80106d91:	6a 2d                	push   $0x2d
  jmp alltraps
80106d93:	e9 4d fe ff ff       	jmp    80106be5 <alltraps>

80106d98 <vector46>:
.globl vector46
vector46:
  pushl $0
80106d98:	6a 00                	push   $0x0
  pushl $46
80106d9a:	6a 2e                	push   $0x2e
  jmp alltraps
80106d9c:	e9 44 fe ff ff       	jmp    80106be5 <alltraps>

80106da1 <vector47>:
.globl vector47
vector47:
  pushl $0
80106da1:	6a 00                	push   $0x0
  pushl $47
80106da3:	6a 2f                	push   $0x2f
  jmp alltraps
80106da5:	e9 3b fe ff ff       	jmp    80106be5 <alltraps>

80106daa <vector48>:
.globl vector48
vector48:
  pushl $0
80106daa:	6a 00                	push   $0x0
  pushl $48
80106dac:	6a 30                	push   $0x30
  jmp alltraps
80106dae:	e9 32 fe ff ff       	jmp    80106be5 <alltraps>

80106db3 <vector49>:
.globl vector49
vector49:
  pushl $0
80106db3:	6a 00                	push   $0x0
  pushl $49
80106db5:	6a 31                	push   $0x31
  jmp alltraps
80106db7:	e9 29 fe ff ff       	jmp    80106be5 <alltraps>

80106dbc <vector50>:
.globl vector50
vector50:
  pushl $0
80106dbc:	6a 00                	push   $0x0
  pushl $50
80106dbe:	6a 32                	push   $0x32
  jmp alltraps
80106dc0:	e9 20 fe ff ff       	jmp    80106be5 <alltraps>

80106dc5 <vector51>:
.globl vector51
vector51:
  pushl $0
80106dc5:	6a 00                	push   $0x0
  pushl $51
80106dc7:	6a 33                	push   $0x33
  jmp alltraps
80106dc9:	e9 17 fe ff ff       	jmp    80106be5 <alltraps>

80106dce <vector52>:
.globl vector52
vector52:
  pushl $0
80106dce:	6a 00                	push   $0x0
  pushl $52
80106dd0:	6a 34                	push   $0x34
  jmp alltraps
80106dd2:	e9 0e fe ff ff       	jmp    80106be5 <alltraps>

80106dd7 <vector53>:
.globl vector53
vector53:
  pushl $0
80106dd7:	6a 00                	push   $0x0
  pushl $53
80106dd9:	6a 35                	push   $0x35
  jmp alltraps
80106ddb:	e9 05 fe ff ff       	jmp    80106be5 <alltraps>

80106de0 <vector54>:
.globl vector54
vector54:
  pushl $0
80106de0:	6a 00                	push   $0x0
  pushl $54
80106de2:	6a 36                	push   $0x36
  jmp alltraps
80106de4:	e9 fc fd ff ff       	jmp    80106be5 <alltraps>

80106de9 <vector55>:
.globl vector55
vector55:
  pushl $0
80106de9:	6a 00                	push   $0x0
  pushl $55
80106deb:	6a 37                	push   $0x37
  jmp alltraps
80106ded:	e9 f3 fd ff ff       	jmp    80106be5 <alltraps>

80106df2 <vector56>:
.globl vector56
vector56:
  pushl $0
80106df2:	6a 00                	push   $0x0
  pushl $56
80106df4:	6a 38                	push   $0x38
  jmp alltraps
80106df6:	e9 ea fd ff ff       	jmp    80106be5 <alltraps>

80106dfb <vector57>:
.globl vector57
vector57:
  pushl $0
80106dfb:	6a 00                	push   $0x0
  pushl $57
80106dfd:	6a 39                	push   $0x39
  jmp alltraps
80106dff:	e9 e1 fd ff ff       	jmp    80106be5 <alltraps>

80106e04 <vector58>:
.globl vector58
vector58:
  pushl $0
80106e04:	6a 00                	push   $0x0
  pushl $58
80106e06:	6a 3a                	push   $0x3a
  jmp alltraps
80106e08:	e9 d8 fd ff ff       	jmp    80106be5 <alltraps>

80106e0d <vector59>:
.globl vector59
vector59:
  pushl $0
80106e0d:	6a 00                	push   $0x0
  pushl $59
80106e0f:	6a 3b                	push   $0x3b
  jmp alltraps
80106e11:	e9 cf fd ff ff       	jmp    80106be5 <alltraps>

80106e16 <vector60>:
.globl vector60
vector60:
  pushl $0
80106e16:	6a 00                	push   $0x0
  pushl $60
80106e18:	6a 3c                	push   $0x3c
  jmp alltraps
80106e1a:	e9 c6 fd ff ff       	jmp    80106be5 <alltraps>

80106e1f <vector61>:
.globl vector61
vector61:
  pushl $0
80106e1f:	6a 00                	push   $0x0
  pushl $61
80106e21:	6a 3d                	push   $0x3d
  jmp alltraps
80106e23:	e9 bd fd ff ff       	jmp    80106be5 <alltraps>

80106e28 <vector62>:
.globl vector62
vector62:
  pushl $0
80106e28:	6a 00                	push   $0x0
  pushl $62
80106e2a:	6a 3e                	push   $0x3e
  jmp alltraps
80106e2c:	e9 b4 fd ff ff       	jmp    80106be5 <alltraps>

80106e31 <vector63>:
.globl vector63
vector63:
  pushl $0
80106e31:	6a 00                	push   $0x0
  pushl $63
80106e33:	6a 3f                	push   $0x3f
  jmp alltraps
80106e35:	e9 ab fd ff ff       	jmp    80106be5 <alltraps>

80106e3a <vector64>:
.globl vector64
vector64:
  pushl $0
80106e3a:	6a 00                	push   $0x0
  pushl $64
80106e3c:	6a 40                	push   $0x40
  jmp alltraps
80106e3e:	e9 a2 fd ff ff       	jmp    80106be5 <alltraps>

80106e43 <vector65>:
.globl vector65
vector65:
  pushl $0
80106e43:	6a 00                	push   $0x0
  pushl $65
80106e45:	6a 41                	push   $0x41
  jmp alltraps
80106e47:	e9 99 fd ff ff       	jmp    80106be5 <alltraps>

80106e4c <vector66>:
.globl vector66
vector66:
  pushl $0
80106e4c:	6a 00                	push   $0x0
  pushl $66
80106e4e:	6a 42                	push   $0x42
  jmp alltraps
80106e50:	e9 90 fd ff ff       	jmp    80106be5 <alltraps>

80106e55 <vector67>:
.globl vector67
vector67:
  pushl $0
80106e55:	6a 00                	push   $0x0
  pushl $67
80106e57:	6a 43                	push   $0x43
  jmp alltraps
80106e59:	e9 87 fd ff ff       	jmp    80106be5 <alltraps>

80106e5e <vector68>:
.globl vector68
vector68:
  pushl $0
80106e5e:	6a 00                	push   $0x0
  pushl $68
80106e60:	6a 44                	push   $0x44
  jmp alltraps
80106e62:	e9 7e fd ff ff       	jmp    80106be5 <alltraps>

80106e67 <vector69>:
.globl vector69
vector69:
  pushl $0
80106e67:	6a 00                	push   $0x0
  pushl $69
80106e69:	6a 45                	push   $0x45
  jmp alltraps
80106e6b:	e9 75 fd ff ff       	jmp    80106be5 <alltraps>

80106e70 <vector70>:
.globl vector70
vector70:
  pushl $0
80106e70:	6a 00                	push   $0x0
  pushl $70
80106e72:	6a 46                	push   $0x46
  jmp alltraps
80106e74:	e9 6c fd ff ff       	jmp    80106be5 <alltraps>

80106e79 <vector71>:
.globl vector71
vector71:
  pushl $0
80106e79:	6a 00                	push   $0x0
  pushl $71
80106e7b:	6a 47                	push   $0x47
  jmp alltraps
80106e7d:	e9 63 fd ff ff       	jmp    80106be5 <alltraps>

80106e82 <vector72>:
.globl vector72
vector72:
  pushl $0
80106e82:	6a 00                	push   $0x0
  pushl $72
80106e84:	6a 48                	push   $0x48
  jmp alltraps
80106e86:	e9 5a fd ff ff       	jmp    80106be5 <alltraps>

80106e8b <vector73>:
.globl vector73
vector73:
  pushl $0
80106e8b:	6a 00                	push   $0x0
  pushl $73
80106e8d:	6a 49                	push   $0x49
  jmp alltraps
80106e8f:	e9 51 fd ff ff       	jmp    80106be5 <alltraps>

80106e94 <vector74>:
.globl vector74
vector74:
  pushl $0
80106e94:	6a 00                	push   $0x0
  pushl $74
80106e96:	6a 4a                	push   $0x4a
  jmp alltraps
80106e98:	e9 48 fd ff ff       	jmp    80106be5 <alltraps>

80106e9d <vector75>:
.globl vector75
vector75:
  pushl $0
80106e9d:	6a 00                	push   $0x0
  pushl $75
80106e9f:	6a 4b                	push   $0x4b
  jmp alltraps
80106ea1:	e9 3f fd ff ff       	jmp    80106be5 <alltraps>

80106ea6 <vector76>:
.globl vector76
vector76:
  pushl $0
80106ea6:	6a 00                	push   $0x0
  pushl $76
80106ea8:	6a 4c                	push   $0x4c
  jmp alltraps
80106eaa:	e9 36 fd ff ff       	jmp    80106be5 <alltraps>

80106eaf <vector77>:
.globl vector77
vector77:
  pushl $0
80106eaf:	6a 00                	push   $0x0
  pushl $77
80106eb1:	6a 4d                	push   $0x4d
  jmp alltraps
80106eb3:	e9 2d fd ff ff       	jmp    80106be5 <alltraps>

80106eb8 <vector78>:
.globl vector78
vector78:
  pushl $0
80106eb8:	6a 00                	push   $0x0
  pushl $78
80106eba:	6a 4e                	push   $0x4e
  jmp alltraps
80106ebc:	e9 24 fd ff ff       	jmp    80106be5 <alltraps>

80106ec1 <vector79>:
.globl vector79
vector79:
  pushl $0
80106ec1:	6a 00                	push   $0x0
  pushl $79
80106ec3:	6a 4f                	push   $0x4f
  jmp alltraps
80106ec5:	e9 1b fd ff ff       	jmp    80106be5 <alltraps>

80106eca <vector80>:
.globl vector80
vector80:
  pushl $0
80106eca:	6a 00                	push   $0x0
  pushl $80
80106ecc:	6a 50                	push   $0x50
  jmp alltraps
80106ece:	e9 12 fd ff ff       	jmp    80106be5 <alltraps>

80106ed3 <vector81>:
.globl vector81
vector81:
  pushl $0
80106ed3:	6a 00                	push   $0x0
  pushl $81
80106ed5:	6a 51                	push   $0x51
  jmp alltraps
80106ed7:	e9 09 fd ff ff       	jmp    80106be5 <alltraps>

80106edc <vector82>:
.globl vector82
vector82:
  pushl $0
80106edc:	6a 00                	push   $0x0
  pushl $82
80106ede:	6a 52                	push   $0x52
  jmp alltraps
80106ee0:	e9 00 fd ff ff       	jmp    80106be5 <alltraps>

80106ee5 <vector83>:
.globl vector83
vector83:
  pushl $0
80106ee5:	6a 00                	push   $0x0
  pushl $83
80106ee7:	6a 53                	push   $0x53
  jmp alltraps
80106ee9:	e9 f7 fc ff ff       	jmp    80106be5 <alltraps>

80106eee <vector84>:
.globl vector84
vector84:
  pushl $0
80106eee:	6a 00                	push   $0x0
  pushl $84
80106ef0:	6a 54                	push   $0x54
  jmp alltraps
80106ef2:	e9 ee fc ff ff       	jmp    80106be5 <alltraps>

80106ef7 <vector85>:
.globl vector85
vector85:
  pushl $0
80106ef7:	6a 00                	push   $0x0
  pushl $85
80106ef9:	6a 55                	push   $0x55
  jmp alltraps
80106efb:	e9 e5 fc ff ff       	jmp    80106be5 <alltraps>

80106f00 <vector86>:
.globl vector86
vector86:
  pushl $0
80106f00:	6a 00                	push   $0x0
  pushl $86
80106f02:	6a 56                	push   $0x56
  jmp alltraps
80106f04:	e9 dc fc ff ff       	jmp    80106be5 <alltraps>

80106f09 <vector87>:
.globl vector87
vector87:
  pushl $0
80106f09:	6a 00                	push   $0x0
  pushl $87
80106f0b:	6a 57                	push   $0x57
  jmp alltraps
80106f0d:	e9 d3 fc ff ff       	jmp    80106be5 <alltraps>

80106f12 <vector88>:
.globl vector88
vector88:
  pushl $0
80106f12:	6a 00                	push   $0x0
  pushl $88
80106f14:	6a 58                	push   $0x58
  jmp alltraps
80106f16:	e9 ca fc ff ff       	jmp    80106be5 <alltraps>

80106f1b <vector89>:
.globl vector89
vector89:
  pushl $0
80106f1b:	6a 00                	push   $0x0
  pushl $89
80106f1d:	6a 59                	push   $0x59
  jmp alltraps
80106f1f:	e9 c1 fc ff ff       	jmp    80106be5 <alltraps>

80106f24 <vector90>:
.globl vector90
vector90:
  pushl $0
80106f24:	6a 00                	push   $0x0
  pushl $90
80106f26:	6a 5a                	push   $0x5a
  jmp alltraps
80106f28:	e9 b8 fc ff ff       	jmp    80106be5 <alltraps>

80106f2d <vector91>:
.globl vector91
vector91:
  pushl $0
80106f2d:	6a 00                	push   $0x0
  pushl $91
80106f2f:	6a 5b                	push   $0x5b
  jmp alltraps
80106f31:	e9 af fc ff ff       	jmp    80106be5 <alltraps>

80106f36 <vector92>:
.globl vector92
vector92:
  pushl $0
80106f36:	6a 00                	push   $0x0
  pushl $92
80106f38:	6a 5c                	push   $0x5c
  jmp alltraps
80106f3a:	e9 a6 fc ff ff       	jmp    80106be5 <alltraps>

80106f3f <vector93>:
.globl vector93
vector93:
  pushl $0
80106f3f:	6a 00                	push   $0x0
  pushl $93
80106f41:	6a 5d                	push   $0x5d
  jmp alltraps
80106f43:	e9 9d fc ff ff       	jmp    80106be5 <alltraps>

80106f48 <vector94>:
.globl vector94
vector94:
  pushl $0
80106f48:	6a 00                	push   $0x0
  pushl $94
80106f4a:	6a 5e                	push   $0x5e
  jmp alltraps
80106f4c:	e9 94 fc ff ff       	jmp    80106be5 <alltraps>

80106f51 <vector95>:
.globl vector95
vector95:
  pushl $0
80106f51:	6a 00                	push   $0x0
  pushl $95
80106f53:	6a 5f                	push   $0x5f
  jmp alltraps
80106f55:	e9 8b fc ff ff       	jmp    80106be5 <alltraps>

80106f5a <vector96>:
.globl vector96
vector96:
  pushl $0
80106f5a:	6a 00                	push   $0x0
  pushl $96
80106f5c:	6a 60                	push   $0x60
  jmp alltraps
80106f5e:	e9 82 fc ff ff       	jmp    80106be5 <alltraps>

80106f63 <vector97>:
.globl vector97
vector97:
  pushl $0
80106f63:	6a 00                	push   $0x0
  pushl $97
80106f65:	6a 61                	push   $0x61
  jmp alltraps
80106f67:	e9 79 fc ff ff       	jmp    80106be5 <alltraps>

80106f6c <vector98>:
.globl vector98
vector98:
  pushl $0
80106f6c:	6a 00                	push   $0x0
  pushl $98
80106f6e:	6a 62                	push   $0x62
  jmp alltraps
80106f70:	e9 70 fc ff ff       	jmp    80106be5 <alltraps>

80106f75 <vector99>:
.globl vector99
vector99:
  pushl $0
80106f75:	6a 00                	push   $0x0
  pushl $99
80106f77:	6a 63                	push   $0x63
  jmp alltraps
80106f79:	e9 67 fc ff ff       	jmp    80106be5 <alltraps>

80106f7e <vector100>:
.globl vector100
vector100:
  pushl $0
80106f7e:	6a 00                	push   $0x0
  pushl $100
80106f80:	6a 64                	push   $0x64
  jmp alltraps
80106f82:	e9 5e fc ff ff       	jmp    80106be5 <alltraps>

80106f87 <vector101>:
.globl vector101
vector101:
  pushl $0
80106f87:	6a 00                	push   $0x0
  pushl $101
80106f89:	6a 65                	push   $0x65
  jmp alltraps
80106f8b:	e9 55 fc ff ff       	jmp    80106be5 <alltraps>

80106f90 <vector102>:
.globl vector102
vector102:
  pushl $0
80106f90:	6a 00                	push   $0x0
  pushl $102
80106f92:	6a 66                	push   $0x66
  jmp alltraps
80106f94:	e9 4c fc ff ff       	jmp    80106be5 <alltraps>

80106f99 <vector103>:
.globl vector103
vector103:
  pushl $0
80106f99:	6a 00                	push   $0x0
  pushl $103
80106f9b:	6a 67                	push   $0x67
  jmp alltraps
80106f9d:	e9 43 fc ff ff       	jmp    80106be5 <alltraps>

80106fa2 <vector104>:
.globl vector104
vector104:
  pushl $0
80106fa2:	6a 00                	push   $0x0
  pushl $104
80106fa4:	6a 68                	push   $0x68
  jmp alltraps
80106fa6:	e9 3a fc ff ff       	jmp    80106be5 <alltraps>

80106fab <vector105>:
.globl vector105
vector105:
  pushl $0
80106fab:	6a 00                	push   $0x0
  pushl $105
80106fad:	6a 69                	push   $0x69
  jmp alltraps
80106faf:	e9 31 fc ff ff       	jmp    80106be5 <alltraps>

80106fb4 <vector106>:
.globl vector106
vector106:
  pushl $0
80106fb4:	6a 00                	push   $0x0
  pushl $106
80106fb6:	6a 6a                	push   $0x6a
  jmp alltraps
80106fb8:	e9 28 fc ff ff       	jmp    80106be5 <alltraps>

80106fbd <vector107>:
.globl vector107
vector107:
  pushl $0
80106fbd:	6a 00                	push   $0x0
  pushl $107
80106fbf:	6a 6b                	push   $0x6b
  jmp alltraps
80106fc1:	e9 1f fc ff ff       	jmp    80106be5 <alltraps>

80106fc6 <vector108>:
.globl vector108
vector108:
  pushl $0
80106fc6:	6a 00                	push   $0x0
  pushl $108
80106fc8:	6a 6c                	push   $0x6c
  jmp alltraps
80106fca:	e9 16 fc ff ff       	jmp    80106be5 <alltraps>

80106fcf <vector109>:
.globl vector109
vector109:
  pushl $0
80106fcf:	6a 00                	push   $0x0
  pushl $109
80106fd1:	6a 6d                	push   $0x6d
  jmp alltraps
80106fd3:	e9 0d fc ff ff       	jmp    80106be5 <alltraps>

80106fd8 <vector110>:
.globl vector110
vector110:
  pushl $0
80106fd8:	6a 00                	push   $0x0
  pushl $110
80106fda:	6a 6e                	push   $0x6e
  jmp alltraps
80106fdc:	e9 04 fc ff ff       	jmp    80106be5 <alltraps>

80106fe1 <vector111>:
.globl vector111
vector111:
  pushl $0
80106fe1:	6a 00                	push   $0x0
  pushl $111
80106fe3:	6a 6f                	push   $0x6f
  jmp alltraps
80106fe5:	e9 fb fb ff ff       	jmp    80106be5 <alltraps>

80106fea <vector112>:
.globl vector112
vector112:
  pushl $0
80106fea:	6a 00                	push   $0x0
  pushl $112
80106fec:	6a 70                	push   $0x70
  jmp alltraps
80106fee:	e9 f2 fb ff ff       	jmp    80106be5 <alltraps>

80106ff3 <vector113>:
.globl vector113
vector113:
  pushl $0
80106ff3:	6a 00                	push   $0x0
  pushl $113
80106ff5:	6a 71                	push   $0x71
  jmp alltraps
80106ff7:	e9 e9 fb ff ff       	jmp    80106be5 <alltraps>

80106ffc <vector114>:
.globl vector114
vector114:
  pushl $0
80106ffc:	6a 00                	push   $0x0
  pushl $114
80106ffe:	6a 72                	push   $0x72
  jmp alltraps
80107000:	e9 e0 fb ff ff       	jmp    80106be5 <alltraps>

80107005 <vector115>:
.globl vector115
vector115:
  pushl $0
80107005:	6a 00                	push   $0x0
  pushl $115
80107007:	6a 73                	push   $0x73
  jmp alltraps
80107009:	e9 d7 fb ff ff       	jmp    80106be5 <alltraps>

8010700e <vector116>:
.globl vector116
vector116:
  pushl $0
8010700e:	6a 00                	push   $0x0
  pushl $116
80107010:	6a 74                	push   $0x74
  jmp alltraps
80107012:	e9 ce fb ff ff       	jmp    80106be5 <alltraps>

80107017 <vector117>:
.globl vector117
vector117:
  pushl $0
80107017:	6a 00                	push   $0x0
  pushl $117
80107019:	6a 75                	push   $0x75
  jmp alltraps
8010701b:	e9 c5 fb ff ff       	jmp    80106be5 <alltraps>

80107020 <vector118>:
.globl vector118
vector118:
  pushl $0
80107020:	6a 00                	push   $0x0
  pushl $118
80107022:	6a 76                	push   $0x76
  jmp alltraps
80107024:	e9 bc fb ff ff       	jmp    80106be5 <alltraps>

80107029 <vector119>:
.globl vector119
vector119:
  pushl $0
80107029:	6a 00                	push   $0x0
  pushl $119
8010702b:	6a 77                	push   $0x77
  jmp alltraps
8010702d:	e9 b3 fb ff ff       	jmp    80106be5 <alltraps>

80107032 <vector120>:
.globl vector120
vector120:
  pushl $0
80107032:	6a 00                	push   $0x0
  pushl $120
80107034:	6a 78                	push   $0x78
  jmp alltraps
80107036:	e9 aa fb ff ff       	jmp    80106be5 <alltraps>

8010703b <vector121>:
.globl vector121
vector121:
  pushl $0
8010703b:	6a 00                	push   $0x0
  pushl $121
8010703d:	6a 79                	push   $0x79
  jmp alltraps
8010703f:	e9 a1 fb ff ff       	jmp    80106be5 <alltraps>

80107044 <vector122>:
.globl vector122
vector122:
  pushl $0
80107044:	6a 00                	push   $0x0
  pushl $122
80107046:	6a 7a                	push   $0x7a
  jmp alltraps
80107048:	e9 98 fb ff ff       	jmp    80106be5 <alltraps>

8010704d <vector123>:
.globl vector123
vector123:
  pushl $0
8010704d:	6a 00                	push   $0x0
  pushl $123
8010704f:	6a 7b                	push   $0x7b
  jmp alltraps
80107051:	e9 8f fb ff ff       	jmp    80106be5 <alltraps>

80107056 <vector124>:
.globl vector124
vector124:
  pushl $0
80107056:	6a 00                	push   $0x0
  pushl $124
80107058:	6a 7c                	push   $0x7c
  jmp alltraps
8010705a:	e9 86 fb ff ff       	jmp    80106be5 <alltraps>

8010705f <vector125>:
.globl vector125
vector125:
  pushl $0
8010705f:	6a 00                	push   $0x0
  pushl $125
80107061:	6a 7d                	push   $0x7d
  jmp alltraps
80107063:	e9 7d fb ff ff       	jmp    80106be5 <alltraps>

80107068 <vector126>:
.globl vector126
vector126:
  pushl $0
80107068:	6a 00                	push   $0x0
  pushl $126
8010706a:	6a 7e                	push   $0x7e
  jmp alltraps
8010706c:	e9 74 fb ff ff       	jmp    80106be5 <alltraps>

80107071 <vector127>:
.globl vector127
vector127:
  pushl $0
80107071:	6a 00                	push   $0x0
  pushl $127
80107073:	6a 7f                	push   $0x7f
  jmp alltraps
80107075:	e9 6b fb ff ff       	jmp    80106be5 <alltraps>

8010707a <vector128>:
.globl vector128
vector128:
  pushl $0
8010707a:	6a 00                	push   $0x0
  pushl $128
8010707c:	68 80 00 00 00       	push   $0x80
  jmp alltraps
80107081:	e9 5f fb ff ff       	jmp    80106be5 <alltraps>

80107086 <vector129>:
.globl vector129
vector129:
  pushl $0
80107086:	6a 00                	push   $0x0
  pushl $129
80107088:	68 81 00 00 00       	push   $0x81
  jmp alltraps
8010708d:	e9 53 fb ff ff       	jmp    80106be5 <alltraps>

80107092 <vector130>:
.globl vector130
vector130:
  pushl $0
80107092:	6a 00                	push   $0x0
  pushl $130
80107094:	68 82 00 00 00       	push   $0x82
  jmp alltraps
80107099:	e9 47 fb ff ff       	jmp    80106be5 <alltraps>

8010709e <vector131>:
.globl vector131
vector131:
  pushl $0
8010709e:	6a 00                	push   $0x0
  pushl $131
801070a0:	68 83 00 00 00       	push   $0x83
  jmp alltraps
801070a5:	e9 3b fb ff ff       	jmp    80106be5 <alltraps>

801070aa <vector132>:
.globl vector132
vector132:
  pushl $0
801070aa:	6a 00                	push   $0x0
  pushl $132
801070ac:	68 84 00 00 00       	push   $0x84
  jmp alltraps
801070b1:	e9 2f fb ff ff       	jmp    80106be5 <alltraps>

801070b6 <vector133>:
.globl vector133
vector133:
  pushl $0
801070b6:	6a 00                	push   $0x0
  pushl $133
801070b8:	68 85 00 00 00       	push   $0x85
  jmp alltraps
801070bd:	e9 23 fb ff ff       	jmp    80106be5 <alltraps>

801070c2 <vector134>:
.globl vector134
vector134:
  pushl $0
801070c2:	6a 00                	push   $0x0
  pushl $134
801070c4:	68 86 00 00 00       	push   $0x86
  jmp alltraps
801070c9:	e9 17 fb ff ff       	jmp    80106be5 <alltraps>

801070ce <vector135>:
.globl vector135
vector135:
  pushl $0
801070ce:	6a 00                	push   $0x0
  pushl $135
801070d0:	68 87 00 00 00       	push   $0x87
  jmp alltraps
801070d5:	e9 0b fb ff ff       	jmp    80106be5 <alltraps>

801070da <vector136>:
.globl vector136
vector136:
  pushl $0
801070da:	6a 00                	push   $0x0
  pushl $136
801070dc:	68 88 00 00 00       	push   $0x88
  jmp alltraps
801070e1:	e9 ff fa ff ff       	jmp    80106be5 <alltraps>

801070e6 <vector137>:
.globl vector137
vector137:
  pushl $0
801070e6:	6a 00                	push   $0x0
  pushl $137
801070e8:	68 89 00 00 00       	push   $0x89
  jmp alltraps
801070ed:	e9 f3 fa ff ff       	jmp    80106be5 <alltraps>

801070f2 <vector138>:
.globl vector138
vector138:
  pushl $0
801070f2:	6a 00                	push   $0x0
  pushl $138
801070f4:	68 8a 00 00 00       	push   $0x8a
  jmp alltraps
801070f9:	e9 e7 fa ff ff       	jmp    80106be5 <alltraps>

801070fe <vector139>:
.globl vector139
vector139:
  pushl $0
801070fe:	6a 00                	push   $0x0
  pushl $139
80107100:	68 8b 00 00 00       	push   $0x8b
  jmp alltraps
80107105:	e9 db fa ff ff       	jmp    80106be5 <alltraps>

8010710a <vector140>:
.globl vector140
vector140:
  pushl $0
8010710a:	6a 00                	push   $0x0
  pushl $140
8010710c:	68 8c 00 00 00       	push   $0x8c
  jmp alltraps
80107111:	e9 cf fa ff ff       	jmp    80106be5 <alltraps>

80107116 <vector141>:
.globl vector141
vector141:
  pushl $0
80107116:	6a 00                	push   $0x0
  pushl $141
80107118:	68 8d 00 00 00       	push   $0x8d
  jmp alltraps
8010711d:	e9 c3 fa ff ff       	jmp    80106be5 <alltraps>

80107122 <vector142>:
.globl vector142
vector142:
  pushl $0
80107122:	6a 00                	push   $0x0
  pushl $142
80107124:	68 8e 00 00 00       	push   $0x8e
  jmp alltraps
80107129:	e9 b7 fa ff ff       	jmp    80106be5 <alltraps>

8010712e <vector143>:
.globl vector143
vector143:
  pushl $0
8010712e:	6a 00                	push   $0x0
  pushl $143
80107130:	68 8f 00 00 00       	push   $0x8f
  jmp alltraps
80107135:	e9 ab fa ff ff       	jmp    80106be5 <alltraps>

8010713a <vector144>:
.globl vector144
vector144:
  pushl $0
8010713a:	6a 00                	push   $0x0
  pushl $144
8010713c:	68 90 00 00 00       	push   $0x90
  jmp alltraps
80107141:	e9 9f fa ff ff       	jmp    80106be5 <alltraps>

80107146 <vector145>:
.globl vector145
vector145:
  pushl $0
80107146:	6a 00                	push   $0x0
  pushl $145
80107148:	68 91 00 00 00       	push   $0x91
  jmp alltraps
8010714d:	e9 93 fa ff ff       	jmp    80106be5 <alltraps>

80107152 <vector146>:
.globl vector146
vector146:
  pushl $0
80107152:	6a 00                	push   $0x0
  pushl $146
80107154:	68 92 00 00 00       	push   $0x92
  jmp alltraps
80107159:	e9 87 fa ff ff       	jmp    80106be5 <alltraps>

8010715e <vector147>:
.globl vector147
vector147:
  pushl $0
8010715e:	6a 00                	push   $0x0
  pushl $147
80107160:	68 93 00 00 00       	push   $0x93
  jmp alltraps
80107165:	e9 7b fa ff ff       	jmp    80106be5 <alltraps>

8010716a <vector148>:
.globl vector148
vector148:
  pushl $0
8010716a:	6a 00                	push   $0x0
  pushl $148
8010716c:	68 94 00 00 00       	push   $0x94
  jmp alltraps
80107171:	e9 6f fa ff ff       	jmp    80106be5 <alltraps>

80107176 <vector149>:
.globl vector149
vector149:
  pushl $0
80107176:	6a 00                	push   $0x0
  pushl $149
80107178:	68 95 00 00 00       	push   $0x95
  jmp alltraps
8010717d:	e9 63 fa ff ff       	jmp    80106be5 <alltraps>

80107182 <vector150>:
.globl vector150
vector150:
  pushl $0
80107182:	6a 00                	push   $0x0
  pushl $150
80107184:	68 96 00 00 00       	push   $0x96
  jmp alltraps
80107189:	e9 57 fa ff ff       	jmp    80106be5 <alltraps>

8010718e <vector151>:
.globl vector151
vector151:
  pushl $0
8010718e:	6a 00                	push   $0x0
  pushl $151
80107190:	68 97 00 00 00       	push   $0x97
  jmp alltraps
80107195:	e9 4b fa ff ff       	jmp    80106be5 <alltraps>

8010719a <vector152>:
.globl vector152
vector152:
  pushl $0
8010719a:	6a 00                	push   $0x0
  pushl $152
8010719c:	68 98 00 00 00       	push   $0x98
  jmp alltraps
801071a1:	e9 3f fa ff ff       	jmp    80106be5 <alltraps>

801071a6 <vector153>:
.globl vector153
vector153:
  pushl $0
801071a6:	6a 00                	push   $0x0
  pushl $153
801071a8:	68 99 00 00 00       	push   $0x99
  jmp alltraps
801071ad:	e9 33 fa ff ff       	jmp    80106be5 <alltraps>

801071b2 <vector154>:
.globl vector154
vector154:
  pushl $0
801071b2:	6a 00                	push   $0x0
  pushl $154
801071b4:	68 9a 00 00 00       	push   $0x9a
  jmp alltraps
801071b9:	e9 27 fa ff ff       	jmp    80106be5 <alltraps>

801071be <vector155>:
.globl vector155
vector155:
  pushl $0
801071be:	6a 00                	push   $0x0
  pushl $155
801071c0:	68 9b 00 00 00       	push   $0x9b
  jmp alltraps
801071c5:	e9 1b fa ff ff       	jmp    80106be5 <alltraps>

801071ca <vector156>:
.globl vector156
vector156:
  pushl $0
801071ca:	6a 00                	push   $0x0
  pushl $156
801071cc:	68 9c 00 00 00       	push   $0x9c
  jmp alltraps
801071d1:	e9 0f fa ff ff       	jmp    80106be5 <alltraps>

801071d6 <vector157>:
.globl vector157
vector157:
  pushl $0
801071d6:	6a 00                	push   $0x0
  pushl $157
801071d8:	68 9d 00 00 00       	push   $0x9d
  jmp alltraps
801071dd:	e9 03 fa ff ff       	jmp    80106be5 <alltraps>

801071e2 <vector158>:
.globl vector158
vector158:
  pushl $0
801071e2:	6a 00                	push   $0x0
  pushl $158
801071e4:	68 9e 00 00 00       	push   $0x9e
  jmp alltraps
801071e9:	e9 f7 f9 ff ff       	jmp    80106be5 <alltraps>

801071ee <vector159>:
.globl vector159
vector159:
  pushl $0
801071ee:	6a 00                	push   $0x0
  pushl $159
801071f0:	68 9f 00 00 00       	push   $0x9f
  jmp alltraps
801071f5:	e9 eb f9 ff ff       	jmp    80106be5 <alltraps>

801071fa <vector160>:
.globl vector160
vector160:
  pushl $0
801071fa:	6a 00                	push   $0x0
  pushl $160
801071fc:	68 a0 00 00 00       	push   $0xa0
  jmp alltraps
80107201:	e9 df f9 ff ff       	jmp    80106be5 <alltraps>

80107206 <vector161>:
.globl vector161
vector161:
  pushl $0
80107206:	6a 00                	push   $0x0
  pushl $161
80107208:	68 a1 00 00 00       	push   $0xa1
  jmp alltraps
8010720d:	e9 d3 f9 ff ff       	jmp    80106be5 <alltraps>

80107212 <vector162>:
.globl vector162
vector162:
  pushl $0
80107212:	6a 00                	push   $0x0
  pushl $162
80107214:	68 a2 00 00 00       	push   $0xa2
  jmp alltraps
80107219:	e9 c7 f9 ff ff       	jmp    80106be5 <alltraps>

8010721e <vector163>:
.globl vector163
vector163:
  pushl $0
8010721e:	6a 00                	push   $0x0
  pushl $163
80107220:	68 a3 00 00 00       	push   $0xa3
  jmp alltraps
80107225:	e9 bb f9 ff ff       	jmp    80106be5 <alltraps>

8010722a <vector164>:
.globl vector164
vector164:
  pushl $0
8010722a:	6a 00                	push   $0x0
  pushl $164
8010722c:	68 a4 00 00 00       	push   $0xa4
  jmp alltraps
80107231:	e9 af f9 ff ff       	jmp    80106be5 <alltraps>

80107236 <vector165>:
.globl vector165
vector165:
  pushl $0
80107236:	6a 00                	push   $0x0
  pushl $165
80107238:	68 a5 00 00 00       	push   $0xa5
  jmp alltraps
8010723d:	e9 a3 f9 ff ff       	jmp    80106be5 <alltraps>

80107242 <vector166>:
.globl vector166
vector166:
  pushl $0
80107242:	6a 00                	push   $0x0
  pushl $166
80107244:	68 a6 00 00 00       	push   $0xa6
  jmp alltraps
80107249:	e9 97 f9 ff ff       	jmp    80106be5 <alltraps>

8010724e <vector167>:
.globl vector167
vector167:
  pushl $0
8010724e:	6a 00                	push   $0x0
  pushl $167
80107250:	68 a7 00 00 00       	push   $0xa7
  jmp alltraps
80107255:	e9 8b f9 ff ff       	jmp    80106be5 <alltraps>

8010725a <vector168>:
.globl vector168
vector168:
  pushl $0
8010725a:	6a 00                	push   $0x0
  pushl $168
8010725c:	68 a8 00 00 00       	push   $0xa8
  jmp alltraps
80107261:	e9 7f f9 ff ff       	jmp    80106be5 <alltraps>

80107266 <vector169>:
.globl vector169
vector169:
  pushl $0
80107266:	6a 00                	push   $0x0
  pushl $169
80107268:	68 a9 00 00 00       	push   $0xa9
  jmp alltraps
8010726d:	e9 73 f9 ff ff       	jmp    80106be5 <alltraps>

80107272 <vector170>:
.globl vector170
vector170:
  pushl $0
80107272:	6a 00                	push   $0x0
  pushl $170
80107274:	68 aa 00 00 00       	push   $0xaa
  jmp alltraps
80107279:	e9 67 f9 ff ff       	jmp    80106be5 <alltraps>

8010727e <vector171>:
.globl vector171
vector171:
  pushl $0
8010727e:	6a 00                	push   $0x0
  pushl $171
80107280:	68 ab 00 00 00       	push   $0xab
  jmp alltraps
80107285:	e9 5b f9 ff ff       	jmp    80106be5 <alltraps>

8010728a <vector172>:
.globl vector172
vector172:
  pushl $0
8010728a:	6a 00                	push   $0x0
  pushl $172
8010728c:	68 ac 00 00 00       	push   $0xac
  jmp alltraps
80107291:	e9 4f f9 ff ff       	jmp    80106be5 <alltraps>

80107296 <vector173>:
.globl vector173
vector173:
  pushl $0
80107296:	6a 00                	push   $0x0
  pushl $173
80107298:	68 ad 00 00 00       	push   $0xad
  jmp alltraps
8010729d:	e9 43 f9 ff ff       	jmp    80106be5 <alltraps>

801072a2 <vector174>:
.globl vector174
vector174:
  pushl $0
801072a2:	6a 00                	push   $0x0
  pushl $174
801072a4:	68 ae 00 00 00       	push   $0xae
  jmp alltraps
801072a9:	e9 37 f9 ff ff       	jmp    80106be5 <alltraps>

801072ae <vector175>:
.globl vector175
vector175:
  pushl $0
801072ae:	6a 00                	push   $0x0
  pushl $175
801072b0:	68 af 00 00 00       	push   $0xaf
  jmp alltraps
801072b5:	e9 2b f9 ff ff       	jmp    80106be5 <alltraps>

801072ba <vector176>:
.globl vector176
vector176:
  pushl $0
801072ba:	6a 00                	push   $0x0
  pushl $176
801072bc:	68 b0 00 00 00       	push   $0xb0
  jmp alltraps
801072c1:	e9 1f f9 ff ff       	jmp    80106be5 <alltraps>

801072c6 <vector177>:
.globl vector177
vector177:
  pushl $0
801072c6:	6a 00                	push   $0x0
  pushl $177
801072c8:	68 b1 00 00 00       	push   $0xb1
  jmp alltraps
801072cd:	e9 13 f9 ff ff       	jmp    80106be5 <alltraps>

801072d2 <vector178>:
.globl vector178
vector178:
  pushl $0
801072d2:	6a 00                	push   $0x0
  pushl $178
801072d4:	68 b2 00 00 00       	push   $0xb2
  jmp alltraps
801072d9:	e9 07 f9 ff ff       	jmp    80106be5 <alltraps>

801072de <vector179>:
.globl vector179
vector179:
  pushl $0
801072de:	6a 00                	push   $0x0
  pushl $179
801072e0:	68 b3 00 00 00       	push   $0xb3
  jmp alltraps
801072e5:	e9 fb f8 ff ff       	jmp    80106be5 <alltraps>

801072ea <vector180>:
.globl vector180
vector180:
  pushl $0
801072ea:	6a 00                	push   $0x0
  pushl $180
801072ec:	68 b4 00 00 00       	push   $0xb4
  jmp alltraps
801072f1:	e9 ef f8 ff ff       	jmp    80106be5 <alltraps>

801072f6 <vector181>:
.globl vector181
vector181:
  pushl $0
801072f6:	6a 00                	push   $0x0
  pushl $181
801072f8:	68 b5 00 00 00       	push   $0xb5
  jmp alltraps
801072fd:	e9 e3 f8 ff ff       	jmp    80106be5 <alltraps>

80107302 <vector182>:
.globl vector182
vector182:
  pushl $0
80107302:	6a 00                	push   $0x0
  pushl $182
80107304:	68 b6 00 00 00       	push   $0xb6
  jmp alltraps
80107309:	e9 d7 f8 ff ff       	jmp    80106be5 <alltraps>

8010730e <vector183>:
.globl vector183
vector183:
  pushl $0
8010730e:	6a 00                	push   $0x0
  pushl $183
80107310:	68 b7 00 00 00       	push   $0xb7
  jmp alltraps
80107315:	e9 cb f8 ff ff       	jmp    80106be5 <alltraps>

8010731a <vector184>:
.globl vector184
vector184:
  pushl $0
8010731a:	6a 00                	push   $0x0
  pushl $184
8010731c:	68 b8 00 00 00       	push   $0xb8
  jmp alltraps
80107321:	e9 bf f8 ff ff       	jmp    80106be5 <alltraps>

80107326 <vector185>:
.globl vector185
vector185:
  pushl $0
80107326:	6a 00                	push   $0x0
  pushl $185
80107328:	68 b9 00 00 00       	push   $0xb9
  jmp alltraps
8010732d:	e9 b3 f8 ff ff       	jmp    80106be5 <alltraps>

80107332 <vector186>:
.globl vector186
vector186:
  pushl $0
80107332:	6a 00                	push   $0x0
  pushl $186
80107334:	68 ba 00 00 00       	push   $0xba
  jmp alltraps
80107339:	e9 a7 f8 ff ff       	jmp    80106be5 <alltraps>

8010733e <vector187>:
.globl vector187
vector187:
  pushl $0
8010733e:	6a 00                	push   $0x0
  pushl $187
80107340:	68 bb 00 00 00       	push   $0xbb
  jmp alltraps
80107345:	e9 9b f8 ff ff       	jmp    80106be5 <alltraps>

8010734a <vector188>:
.globl vector188
vector188:
  pushl $0
8010734a:	6a 00                	push   $0x0
  pushl $188
8010734c:	68 bc 00 00 00       	push   $0xbc
  jmp alltraps
80107351:	e9 8f f8 ff ff       	jmp    80106be5 <alltraps>

80107356 <vector189>:
.globl vector189
vector189:
  pushl $0
80107356:	6a 00                	push   $0x0
  pushl $189
80107358:	68 bd 00 00 00       	push   $0xbd
  jmp alltraps
8010735d:	e9 83 f8 ff ff       	jmp    80106be5 <alltraps>

80107362 <vector190>:
.globl vector190
vector190:
  pushl $0
80107362:	6a 00                	push   $0x0
  pushl $190
80107364:	68 be 00 00 00       	push   $0xbe
  jmp alltraps
80107369:	e9 77 f8 ff ff       	jmp    80106be5 <alltraps>

8010736e <vector191>:
.globl vector191
vector191:
  pushl $0
8010736e:	6a 00                	push   $0x0
  pushl $191
80107370:	68 bf 00 00 00       	push   $0xbf
  jmp alltraps
80107375:	e9 6b f8 ff ff       	jmp    80106be5 <alltraps>

8010737a <vector192>:
.globl vector192
vector192:
  pushl $0
8010737a:	6a 00                	push   $0x0
  pushl $192
8010737c:	68 c0 00 00 00       	push   $0xc0
  jmp alltraps
80107381:	e9 5f f8 ff ff       	jmp    80106be5 <alltraps>

80107386 <vector193>:
.globl vector193
vector193:
  pushl $0
80107386:	6a 00                	push   $0x0
  pushl $193
80107388:	68 c1 00 00 00       	push   $0xc1
  jmp alltraps
8010738d:	e9 53 f8 ff ff       	jmp    80106be5 <alltraps>

80107392 <vector194>:
.globl vector194
vector194:
  pushl $0
80107392:	6a 00                	push   $0x0
  pushl $194
80107394:	68 c2 00 00 00       	push   $0xc2
  jmp alltraps
80107399:	e9 47 f8 ff ff       	jmp    80106be5 <alltraps>

8010739e <vector195>:
.globl vector195
vector195:
  pushl $0
8010739e:	6a 00                	push   $0x0
  pushl $195
801073a0:	68 c3 00 00 00       	push   $0xc3
  jmp alltraps
801073a5:	e9 3b f8 ff ff       	jmp    80106be5 <alltraps>

801073aa <vector196>:
.globl vector196
vector196:
  pushl $0
801073aa:	6a 00                	push   $0x0
  pushl $196
801073ac:	68 c4 00 00 00       	push   $0xc4
  jmp alltraps
801073b1:	e9 2f f8 ff ff       	jmp    80106be5 <alltraps>

801073b6 <vector197>:
.globl vector197
vector197:
  pushl $0
801073b6:	6a 00                	push   $0x0
  pushl $197
801073b8:	68 c5 00 00 00       	push   $0xc5
  jmp alltraps
801073bd:	e9 23 f8 ff ff       	jmp    80106be5 <alltraps>

801073c2 <vector198>:
.globl vector198
vector198:
  pushl $0
801073c2:	6a 00                	push   $0x0
  pushl $198
801073c4:	68 c6 00 00 00       	push   $0xc6
  jmp alltraps
801073c9:	e9 17 f8 ff ff       	jmp    80106be5 <alltraps>

801073ce <vector199>:
.globl vector199
vector199:
  pushl $0
801073ce:	6a 00                	push   $0x0
  pushl $199
801073d0:	68 c7 00 00 00       	push   $0xc7
  jmp alltraps
801073d5:	e9 0b f8 ff ff       	jmp    80106be5 <alltraps>

801073da <vector200>:
.globl vector200
vector200:
  pushl $0
801073da:	6a 00                	push   $0x0
  pushl $200
801073dc:	68 c8 00 00 00       	push   $0xc8
  jmp alltraps
801073e1:	e9 ff f7 ff ff       	jmp    80106be5 <alltraps>

801073e6 <vector201>:
.globl vector201
vector201:
  pushl $0
801073e6:	6a 00                	push   $0x0
  pushl $201
801073e8:	68 c9 00 00 00       	push   $0xc9
  jmp alltraps
801073ed:	e9 f3 f7 ff ff       	jmp    80106be5 <alltraps>

801073f2 <vector202>:
.globl vector202
vector202:
  pushl $0
801073f2:	6a 00                	push   $0x0
  pushl $202
801073f4:	68 ca 00 00 00       	push   $0xca
  jmp alltraps
801073f9:	e9 e7 f7 ff ff       	jmp    80106be5 <alltraps>

801073fe <vector203>:
.globl vector203
vector203:
  pushl $0
801073fe:	6a 00                	push   $0x0
  pushl $203
80107400:	68 cb 00 00 00       	push   $0xcb
  jmp alltraps
80107405:	e9 db f7 ff ff       	jmp    80106be5 <alltraps>

8010740a <vector204>:
.globl vector204
vector204:
  pushl $0
8010740a:	6a 00                	push   $0x0
  pushl $204
8010740c:	68 cc 00 00 00       	push   $0xcc
  jmp alltraps
80107411:	e9 cf f7 ff ff       	jmp    80106be5 <alltraps>

80107416 <vector205>:
.globl vector205
vector205:
  pushl $0
80107416:	6a 00                	push   $0x0
  pushl $205
80107418:	68 cd 00 00 00       	push   $0xcd
  jmp alltraps
8010741d:	e9 c3 f7 ff ff       	jmp    80106be5 <alltraps>

80107422 <vector206>:
.globl vector206
vector206:
  pushl $0
80107422:	6a 00                	push   $0x0
  pushl $206
80107424:	68 ce 00 00 00       	push   $0xce
  jmp alltraps
80107429:	e9 b7 f7 ff ff       	jmp    80106be5 <alltraps>

8010742e <vector207>:
.globl vector207
vector207:
  pushl $0
8010742e:	6a 00                	push   $0x0
  pushl $207
80107430:	68 cf 00 00 00       	push   $0xcf
  jmp alltraps
80107435:	e9 ab f7 ff ff       	jmp    80106be5 <alltraps>

8010743a <vector208>:
.globl vector208
vector208:
  pushl $0
8010743a:	6a 00                	push   $0x0
  pushl $208
8010743c:	68 d0 00 00 00       	push   $0xd0
  jmp alltraps
80107441:	e9 9f f7 ff ff       	jmp    80106be5 <alltraps>

80107446 <vector209>:
.globl vector209
vector209:
  pushl $0
80107446:	6a 00                	push   $0x0
  pushl $209
80107448:	68 d1 00 00 00       	push   $0xd1
  jmp alltraps
8010744d:	e9 93 f7 ff ff       	jmp    80106be5 <alltraps>

80107452 <vector210>:
.globl vector210
vector210:
  pushl $0
80107452:	6a 00                	push   $0x0
  pushl $210
80107454:	68 d2 00 00 00       	push   $0xd2
  jmp alltraps
80107459:	e9 87 f7 ff ff       	jmp    80106be5 <alltraps>

8010745e <vector211>:
.globl vector211
vector211:
  pushl $0
8010745e:	6a 00                	push   $0x0
  pushl $211
80107460:	68 d3 00 00 00       	push   $0xd3
  jmp alltraps
80107465:	e9 7b f7 ff ff       	jmp    80106be5 <alltraps>

8010746a <vector212>:
.globl vector212
vector212:
  pushl $0
8010746a:	6a 00                	push   $0x0
  pushl $212
8010746c:	68 d4 00 00 00       	push   $0xd4
  jmp alltraps
80107471:	e9 6f f7 ff ff       	jmp    80106be5 <alltraps>

80107476 <vector213>:
.globl vector213
vector213:
  pushl $0
80107476:	6a 00                	push   $0x0
  pushl $213
80107478:	68 d5 00 00 00       	push   $0xd5
  jmp alltraps
8010747d:	e9 63 f7 ff ff       	jmp    80106be5 <alltraps>

80107482 <vector214>:
.globl vector214
vector214:
  pushl $0
80107482:	6a 00                	push   $0x0
  pushl $214
80107484:	68 d6 00 00 00       	push   $0xd6
  jmp alltraps
80107489:	e9 57 f7 ff ff       	jmp    80106be5 <alltraps>

8010748e <vector215>:
.globl vector215
vector215:
  pushl $0
8010748e:	6a 00                	push   $0x0
  pushl $215
80107490:	68 d7 00 00 00       	push   $0xd7
  jmp alltraps
80107495:	e9 4b f7 ff ff       	jmp    80106be5 <alltraps>

8010749a <vector216>:
.globl vector216
vector216:
  pushl $0
8010749a:	6a 00                	push   $0x0
  pushl $216
8010749c:	68 d8 00 00 00       	push   $0xd8
  jmp alltraps
801074a1:	e9 3f f7 ff ff       	jmp    80106be5 <alltraps>

801074a6 <vector217>:
.globl vector217
vector217:
  pushl $0
801074a6:	6a 00                	push   $0x0
  pushl $217
801074a8:	68 d9 00 00 00       	push   $0xd9
  jmp alltraps
801074ad:	e9 33 f7 ff ff       	jmp    80106be5 <alltraps>

801074b2 <vector218>:
.globl vector218
vector218:
  pushl $0
801074b2:	6a 00                	push   $0x0
  pushl $218
801074b4:	68 da 00 00 00       	push   $0xda
  jmp alltraps
801074b9:	e9 27 f7 ff ff       	jmp    80106be5 <alltraps>

801074be <vector219>:
.globl vector219
vector219:
  pushl $0
801074be:	6a 00                	push   $0x0
  pushl $219
801074c0:	68 db 00 00 00       	push   $0xdb
  jmp alltraps
801074c5:	e9 1b f7 ff ff       	jmp    80106be5 <alltraps>

801074ca <vector220>:
.globl vector220
vector220:
  pushl $0
801074ca:	6a 00                	push   $0x0
  pushl $220
801074cc:	68 dc 00 00 00       	push   $0xdc
  jmp alltraps
801074d1:	e9 0f f7 ff ff       	jmp    80106be5 <alltraps>

801074d6 <vector221>:
.globl vector221
vector221:
  pushl $0
801074d6:	6a 00                	push   $0x0
  pushl $221
801074d8:	68 dd 00 00 00       	push   $0xdd
  jmp alltraps
801074dd:	e9 03 f7 ff ff       	jmp    80106be5 <alltraps>

801074e2 <vector222>:
.globl vector222
vector222:
  pushl $0
801074e2:	6a 00                	push   $0x0
  pushl $222
801074e4:	68 de 00 00 00       	push   $0xde
  jmp alltraps
801074e9:	e9 f7 f6 ff ff       	jmp    80106be5 <alltraps>

801074ee <vector223>:
.globl vector223
vector223:
  pushl $0
801074ee:	6a 00                	push   $0x0
  pushl $223
801074f0:	68 df 00 00 00       	push   $0xdf
  jmp alltraps
801074f5:	e9 eb f6 ff ff       	jmp    80106be5 <alltraps>

801074fa <vector224>:
.globl vector224
vector224:
  pushl $0
801074fa:	6a 00                	push   $0x0
  pushl $224
801074fc:	68 e0 00 00 00       	push   $0xe0
  jmp alltraps
80107501:	e9 df f6 ff ff       	jmp    80106be5 <alltraps>

80107506 <vector225>:
.globl vector225
vector225:
  pushl $0
80107506:	6a 00                	push   $0x0
  pushl $225
80107508:	68 e1 00 00 00       	push   $0xe1
  jmp alltraps
8010750d:	e9 d3 f6 ff ff       	jmp    80106be5 <alltraps>

80107512 <vector226>:
.globl vector226
vector226:
  pushl $0
80107512:	6a 00                	push   $0x0
  pushl $226
80107514:	68 e2 00 00 00       	push   $0xe2
  jmp alltraps
80107519:	e9 c7 f6 ff ff       	jmp    80106be5 <alltraps>

8010751e <vector227>:
.globl vector227
vector227:
  pushl $0
8010751e:	6a 00                	push   $0x0
  pushl $227
80107520:	68 e3 00 00 00       	push   $0xe3
  jmp alltraps
80107525:	e9 bb f6 ff ff       	jmp    80106be5 <alltraps>

8010752a <vector228>:
.globl vector228
vector228:
  pushl $0
8010752a:	6a 00                	push   $0x0
  pushl $228
8010752c:	68 e4 00 00 00       	push   $0xe4
  jmp alltraps
80107531:	e9 af f6 ff ff       	jmp    80106be5 <alltraps>

80107536 <vector229>:
.globl vector229
vector229:
  pushl $0
80107536:	6a 00                	push   $0x0
  pushl $229
80107538:	68 e5 00 00 00       	push   $0xe5
  jmp alltraps
8010753d:	e9 a3 f6 ff ff       	jmp    80106be5 <alltraps>

80107542 <vector230>:
.globl vector230
vector230:
  pushl $0
80107542:	6a 00                	push   $0x0
  pushl $230
80107544:	68 e6 00 00 00       	push   $0xe6
  jmp alltraps
80107549:	e9 97 f6 ff ff       	jmp    80106be5 <alltraps>

8010754e <vector231>:
.globl vector231
vector231:
  pushl $0
8010754e:	6a 00                	push   $0x0
  pushl $231
80107550:	68 e7 00 00 00       	push   $0xe7
  jmp alltraps
80107555:	e9 8b f6 ff ff       	jmp    80106be5 <alltraps>

8010755a <vector232>:
.globl vector232
vector232:
  pushl $0
8010755a:	6a 00                	push   $0x0
  pushl $232
8010755c:	68 e8 00 00 00       	push   $0xe8
  jmp alltraps
80107561:	e9 7f f6 ff ff       	jmp    80106be5 <alltraps>

80107566 <vector233>:
.globl vector233
vector233:
  pushl $0
80107566:	6a 00                	push   $0x0
  pushl $233
80107568:	68 e9 00 00 00       	push   $0xe9
  jmp alltraps
8010756d:	e9 73 f6 ff ff       	jmp    80106be5 <alltraps>

80107572 <vector234>:
.globl vector234
vector234:
  pushl $0
80107572:	6a 00                	push   $0x0
  pushl $234
80107574:	68 ea 00 00 00       	push   $0xea
  jmp alltraps
80107579:	e9 67 f6 ff ff       	jmp    80106be5 <alltraps>

8010757e <vector235>:
.globl vector235
vector235:
  pushl $0
8010757e:	6a 00                	push   $0x0
  pushl $235
80107580:	68 eb 00 00 00       	push   $0xeb
  jmp alltraps
80107585:	e9 5b f6 ff ff       	jmp    80106be5 <alltraps>

8010758a <vector236>:
.globl vector236
vector236:
  pushl $0
8010758a:	6a 00                	push   $0x0
  pushl $236
8010758c:	68 ec 00 00 00       	push   $0xec
  jmp alltraps
80107591:	e9 4f f6 ff ff       	jmp    80106be5 <alltraps>

80107596 <vector237>:
.globl vector237
vector237:
  pushl $0
80107596:	6a 00                	push   $0x0
  pushl $237
80107598:	68 ed 00 00 00       	push   $0xed
  jmp alltraps
8010759d:	e9 43 f6 ff ff       	jmp    80106be5 <alltraps>

801075a2 <vector238>:
.globl vector238
vector238:
  pushl $0
801075a2:	6a 00                	push   $0x0
  pushl $238
801075a4:	68 ee 00 00 00       	push   $0xee
  jmp alltraps
801075a9:	e9 37 f6 ff ff       	jmp    80106be5 <alltraps>

801075ae <vector239>:
.globl vector239
vector239:
  pushl $0
801075ae:	6a 00                	push   $0x0
  pushl $239
801075b0:	68 ef 00 00 00       	push   $0xef
  jmp alltraps
801075b5:	e9 2b f6 ff ff       	jmp    80106be5 <alltraps>

801075ba <vector240>:
.globl vector240
vector240:
  pushl $0
801075ba:	6a 00                	push   $0x0
  pushl $240
801075bc:	68 f0 00 00 00       	push   $0xf0
  jmp alltraps
801075c1:	e9 1f f6 ff ff       	jmp    80106be5 <alltraps>

801075c6 <vector241>:
.globl vector241
vector241:
  pushl $0
801075c6:	6a 00                	push   $0x0
  pushl $241
801075c8:	68 f1 00 00 00       	push   $0xf1
  jmp alltraps
801075cd:	e9 13 f6 ff ff       	jmp    80106be5 <alltraps>

801075d2 <vector242>:
.globl vector242
vector242:
  pushl $0
801075d2:	6a 00                	push   $0x0
  pushl $242
801075d4:	68 f2 00 00 00       	push   $0xf2
  jmp alltraps
801075d9:	e9 07 f6 ff ff       	jmp    80106be5 <alltraps>

801075de <vector243>:
.globl vector243
vector243:
  pushl $0
801075de:	6a 00                	push   $0x0
  pushl $243
801075e0:	68 f3 00 00 00       	push   $0xf3
  jmp alltraps
801075e5:	e9 fb f5 ff ff       	jmp    80106be5 <alltraps>

801075ea <vector244>:
.globl vector244
vector244:
  pushl $0
801075ea:	6a 00                	push   $0x0
  pushl $244
801075ec:	68 f4 00 00 00       	push   $0xf4
  jmp alltraps
801075f1:	e9 ef f5 ff ff       	jmp    80106be5 <alltraps>

801075f6 <vector245>:
.globl vector245
vector245:
  pushl $0
801075f6:	6a 00                	push   $0x0
  pushl $245
801075f8:	68 f5 00 00 00       	push   $0xf5
  jmp alltraps
801075fd:	e9 e3 f5 ff ff       	jmp    80106be5 <alltraps>

80107602 <vector246>:
.globl vector246
vector246:
  pushl $0
80107602:	6a 00                	push   $0x0
  pushl $246
80107604:	68 f6 00 00 00       	push   $0xf6
  jmp alltraps
80107609:	e9 d7 f5 ff ff       	jmp    80106be5 <alltraps>

8010760e <vector247>:
.globl vector247
vector247:
  pushl $0
8010760e:	6a 00                	push   $0x0
  pushl $247
80107610:	68 f7 00 00 00       	push   $0xf7
  jmp alltraps
80107615:	e9 cb f5 ff ff       	jmp    80106be5 <alltraps>

8010761a <vector248>:
.globl vector248
vector248:
  pushl $0
8010761a:	6a 00                	push   $0x0
  pushl $248
8010761c:	68 f8 00 00 00       	push   $0xf8
  jmp alltraps
80107621:	e9 bf f5 ff ff       	jmp    80106be5 <alltraps>

80107626 <vector249>:
.globl vector249
vector249:
  pushl $0
80107626:	6a 00                	push   $0x0
  pushl $249
80107628:	68 f9 00 00 00       	push   $0xf9
  jmp alltraps
8010762d:	e9 b3 f5 ff ff       	jmp    80106be5 <alltraps>

80107632 <vector250>:
.globl vector250
vector250:
  pushl $0
80107632:	6a 00                	push   $0x0
  pushl $250
80107634:	68 fa 00 00 00       	push   $0xfa
  jmp alltraps
80107639:	e9 a7 f5 ff ff       	jmp    80106be5 <alltraps>

8010763e <vector251>:
.globl vector251
vector251:
  pushl $0
8010763e:	6a 00                	push   $0x0
  pushl $251
80107640:	68 fb 00 00 00       	push   $0xfb
  jmp alltraps
80107645:	e9 9b f5 ff ff       	jmp    80106be5 <alltraps>

8010764a <vector252>:
.globl vector252
vector252:
  pushl $0
8010764a:	6a 00                	push   $0x0
  pushl $252
8010764c:	68 fc 00 00 00       	push   $0xfc
  jmp alltraps
80107651:	e9 8f f5 ff ff       	jmp    80106be5 <alltraps>

80107656 <vector253>:
.globl vector253
vector253:
  pushl $0
80107656:	6a 00                	push   $0x0
  pushl $253
80107658:	68 fd 00 00 00       	push   $0xfd
  jmp alltraps
8010765d:	e9 83 f5 ff ff       	jmp    80106be5 <alltraps>

80107662 <vector254>:
.globl vector254
vector254:
  pushl $0
80107662:	6a 00                	push   $0x0
  pushl $254
80107664:	68 fe 00 00 00       	push   $0xfe
  jmp alltraps
80107669:	e9 77 f5 ff ff       	jmp    80106be5 <alltraps>

8010766e <vector255>:
.globl vector255
vector255:
  pushl $0
8010766e:	6a 00                	push   $0x0
  pushl $255
80107670:	68 ff 00 00 00       	push   $0xff
  jmp alltraps
80107675:	e9 6b f5 ff ff       	jmp    80106be5 <alltraps>
8010767a:	66 90                	xchg   %ax,%ax
8010767c:	66 90                	xchg   %ax,%ax
8010767e:	66 90                	xchg   %ax,%ax

80107680 <kbdgetc>:
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
80107680:	ba 64 00 00 00       	mov    $0x64,%edx
80107685:	ec                   	in     (%dx),%al
	static uint shift;
	const static uchar *charcode[4] = { normalmap, shiftmap, ctlmap, ctlmap };
	uint st, data, c;

	st = inb(KBSTATP);
	if ((st & KBS_DIB) == 0)
80107686:	a8 01                	test   $0x1,%al
80107688:	0f 84 c2 00 00 00    	je     80107750 <kbdgetc+0xd0>
{
8010768e:	55                   	push   %ebp
8010768f:	ba 60 00 00 00       	mov    $0x60,%edx
80107694:	89 e5                	mov    %esp,%ebp
80107696:	53                   	push   %ebx
80107697:	ec                   	in     (%dx),%al
		return -1;
	data = inb(KBDATAP);

	if (data == 0xE0) {
		shift |= E0ESC;
80107698:	8b 1d 88 92 13 80    	mov    0x80139288,%ebx
	data = inb(KBDATAP);
8010769e:	0f b6 c8             	movzbl %al,%ecx
	if (data == 0xE0) {
801076a1:	3c e0                	cmp    $0xe0,%al
801076a3:	74 5b                	je     80107700 <kbdgetc+0x80>
		return 0;
	} else if (data & 0x80) {
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
801076a5:	89 da                	mov    %ebx,%edx
801076a7:	83 e2 40             	and    $0x40,%edx
	} else if (data & 0x80) {
801076aa:	84 c0                	test   %al,%al
801076ac:	78 62                	js     80107710 <kbdgetc+0x90>
		shift &= ~(shiftcode[data] | E0ESC);
		return 0;
	} else if (shift & E0ESC) {
801076ae:	85 d2                	test   %edx,%edx
801076b0:	74 09                	je     801076bb <kbdgetc+0x3b>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
801076b2:	83 c8 80             	or     $0xffffff80,%eax
		shift &= ~E0ESC;
801076b5:	83 e3 bf             	and    $0xffffffbf,%ebx
		data |= 0x80;
801076b8:	0f b6 c8             	movzbl %al,%ecx
	}

	shift |= shiftcode[data];
801076bb:	0f b6 91 a0 90 10 80 	movzbl -0x7fef6f60(%ecx),%edx
	shift ^= togglecode[data];
801076c2:	0f b6 81 a0 8f 10 80 	movzbl -0x7fef7060(%ecx),%eax
	shift |= shiftcode[data];
801076c9:	09 da                	or     %ebx,%edx
	shift ^= togglecode[data];
801076cb:	31 c2                	xor    %eax,%edx
	c = charcode[shift & (CTL | SHIFT)][data];
801076cd:	89 d0                	mov    %edx,%eax
	shift ^= togglecode[data];
801076cf:	89 15 88 92 13 80    	mov    %edx,0x80139288
	c = charcode[shift & (CTL | SHIFT)][data];
801076d5:	83 e0 03             	and    $0x3,%eax
	if (shift & CAPSLOCK) {
801076d8:	83 e2 08             	and    $0x8,%edx
	c = charcode[shift & (CTL | SHIFT)][data];
801076db:	8b 04 85 80 8c 10 80 	mov    -0x7fef7380(,%eax,4),%eax
801076e2:	0f b6 04 08          	movzbl (%eax,%ecx,1),%eax
	if (shift & CAPSLOCK) {
801076e6:	74 0b                	je     801076f3 <kbdgetc+0x73>
		if ('a' <= c && c <= 'z')
801076e8:	8d 50 9f             	lea    -0x61(%eax),%edx
801076eb:	83 fa 19             	cmp    $0x19,%edx
801076ee:	77 48                	ja     80107738 <kbdgetc+0xb8>
			c += 'A' - 'a';
801076f0:	83 e8 20             	sub    $0x20,%eax
		else if ('A' <= c && c <= 'Z')
			c += 'a' - 'A';
	}
	return c;
}
801076f3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
801076f6:	c9                   	leave
801076f7:	c3                   	ret
801076f8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801076ff:	00 
		shift |= E0ESC;
80107700:	83 cb 40             	or     $0x40,%ebx
		return 0;
80107703:	31 c0                	xor    %eax,%eax
		shift |= E0ESC;
80107705:	89 1d 88 92 13 80    	mov    %ebx,0x80139288
}
8010770b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
8010770e:	c9                   	leave
8010770f:	c3                   	ret
		data = (shift & E0ESC ? data : data & 0x7F);
80107710:	83 e0 7f             	and    $0x7f,%eax
80107713:	85 d2                	test   %edx,%edx
80107715:	0f 44 c8             	cmove  %eax,%ecx
		shift &= ~(shiftcode[data] | E0ESC);
80107718:	0f b6 81 a0 90 10 80 	movzbl -0x7fef6f60(%ecx),%eax
8010771f:	83 c8 40             	or     $0x40,%eax
80107722:	0f b6 c0             	movzbl %al,%eax
80107725:	f7 d0                	not    %eax
80107727:	21 d8                	and    %ebx,%eax
80107729:	a3 88 92 13 80       	mov    %eax,0x80139288
		return 0;
8010772e:	31 c0                	xor    %eax,%eax
80107730:	eb d9                	jmp    8010770b <kbdgetc+0x8b>
80107732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
		else if ('A' <= c && c <= 'Z')
80107738:	8d 48 bf             	lea    -0x41(%eax),%ecx
			c += 'a' - 'A';
8010773b:	8d 50 20             	lea    0x20(%eax),%edx
}
8010773e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80107741:	c9                   	leave
			c += 'a' - 'A';
80107742:	83 f9 1a             	cmp    $0x1a,%ecx
80107745:	0f 42 c2             	cmovb  %edx,%eax
}
80107748:	c3                   	ret
80107749:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		return -1;
80107750:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80107755:	c3                   	ret
80107756:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
8010775d:	00 
8010775e:	66 90                	xchg   %ax,%ax

80107760 <kbdintr>:

void
kbdintr(void)
{
80107760:	55                   	push   %ebp
80107761:	89 e5                	mov    %esp,%ebp
80107763:	83 ec 14             	sub    $0x14,%esp
	consoleintr(kbdgetc);
80107766:	68 80 76 10 80       	push   $0x80107680
8010776b:	e8 c0 92 ff ff       	call   80100a30 <consoleintr>
}
80107770:	83 c4 10             	add    $0x10,%esp
80107773:	c9                   	leave
80107774:	c3                   	ret
80107775:	66 90                	xchg   %ax,%ax
80107777:	66 90                	xchg   %ax,%ax
80107779:	66 90                	xchg   %ax,%ax
8010777b:	66 90                	xchg   %ax,%ax
8010777d:	66 90                	xchg   %ax,%ax
8010777f:	90                   	nop

80107780 <fill_rtcdate>:
	return inb(CMOS_RETURN);
}

static void
fill_rtcdate(struct rtcdate *r)
{
80107780:	55                   	push   %ebp
80107781:	89 c1                	mov    %eax,%ecx
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
80107783:	31 c0                	xor    %eax,%eax
80107785:	89 e5                	mov    %esp,%ebp
80107787:	57                   	push   %edi
80107788:	56                   	push   %esi
80107789:	be 70 00 00 00       	mov    $0x70,%esi
8010778e:	53                   	push   %ebx
8010778f:	89 f2                	mov    %esi,%edx
80107791:	83 ec 34             	sub    $0x34,%esp
80107794:	ee                   	out    %al,(%dx)
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
80107795:	bb 71 00 00 00       	mov    $0x71,%ebx
	volatile int d = 0;
8010779a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	d;
801077a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
801077a4:	89 da                	mov    %ebx,%edx
	d;
801077a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
	d;
801077a9:	8b 45 e8             	mov    -0x18(%ebp),%eax
801077ac:	ec                   	in     (%dx),%al
	return inb(CMOS_RETURN);
801077ad:	0f b6 c0             	movzbl %al,%eax
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
801077b0:	89 f2                	mov    %esi,%edx
801077b2:	89 01                	mov    %eax,(%ecx)
801077b4:	b8 02 00 00 00       	mov    $0x2,%eax
801077b9:	ee                   	out    %al,(%dx)
	volatile int d = 0;
801077ba:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
801077c1:	89 da                	mov    %ebx,%edx
	d;
801077c3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	d;
801077c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	d;
801077c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
801077cc:	ec                   	in     (%dx),%al
	return inb(CMOS_RETURN);
801077cd:	0f b6 c0             	movzbl %al,%eax
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
801077d0:	89 f2                	mov    %esi,%edx
801077d2:	89 41 04             	mov    %eax,0x4(%ecx)
801077d5:	b8 04 00 00 00       	mov    $0x4,%eax
801077da:	ee                   	out    %al,(%dx)
	volatile int d = 0;
801077db:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
801077e2:	89 da                	mov    %ebx,%edx
	d;
801077e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
	d;
801077e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
	d;
801077ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
801077ed:	ec                   	in     (%dx),%al
801077ee:	88 45 c3             	mov    %al,-0x3d(%ebp)
	return inb(CMOS_RETURN);
801077f1:	0f b6 c0             	movzbl %al,%eax
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
801077f4:	89 f2                	mov    %esi,%edx
801077f6:	89 41 08             	mov    %eax,0x8(%ecx)
801077f9:	b8 07 00 00 00       	mov    $0x7,%eax
801077fe:	ee                   	out    %al,(%dx)
	volatile int d = 0;
801077ff:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
80107806:	89 da                	mov    %ebx,%edx
	d;
80107808:	8b 45 dc             	mov    -0x24(%ebp),%eax
	d;
8010780b:	8b 45 dc             	mov    -0x24(%ebp),%eax
	d;
8010780e:	8b 45 dc             	mov    -0x24(%ebp),%eax
80107811:	ec                   	in     (%dx),%al
	return inb(CMOS_RETURN);
80107812:	0f b6 c0             	movzbl %al,%eax
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
80107815:	89 f2                	mov    %esi,%edx
80107817:	89 41 0c             	mov    %eax,0xc(%ecx)
8010781a:	b8 08 00 00 00       	mov    $0x8,%eax
8010781f:	ee                   	out    %al,(%dx)
	volatile int d = 0;
80107820:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
80107827:	89 da                	mov    %ebx,%edx
	d;
80107829:	8b 45 d8             	mov    -0x28(%ebp),%eax
	d;
8010782c:	8b 45 d8             	mov    -0x28(%ebp),%eax
	d;
8010782f:	8b 45 d8             	mov    -0x28(%ebp),%eax
80107832:	ec                   	in     (%dx),%al
	return inb(CMOS_RETURN);
80107833:	0f b6 c0             	movzbl %al,%eax
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
80107836:	89 f2                	mov    %esi,%edx
80107838:	89 41 10             	mov    %eax,0x10(%ecx)
8010783b:	b8 09 00 00 00       	mov    $0x9,%eax
80107840:	ee                   	out    %al,(%dx)
	volatile int d = 0;
80107841:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
80107848:	89 da                	mov    %ebx,%edx
	d;
8010784a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
	d;
8010784d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
	d;
80107850:	8b 45 d4             	mov    -0x2c(%ebp),%eax
80107853:	ec                   	in     (%dx),%al
	return inb(CMOS_RETURN);
80107854:	0f b6 f8             	movzbl %al,%edi
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
80107857:	89 f2                	mov    %esi,%edx
80107859:	b8 32 00 00 00       	mov    $0x32,%eax
	r->second = cmos_read(SECS);
	r->minute = cmos_read(MINS);
	r->hour = cmos_read(HOURS);
	r->day = cmos_read(DAY);
	r->month = cmos_read(MONTH);
	r->year = cmos_read(YEAR);
8010785e:	89 79 14             	mov    %edi,0x14(%ecx)
80107861:	ee                   	out    %al,(%dx)
	volatile int d = 0;
80107862:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
80107869:	89 da                	mov    %ebx,%edx
	d;
8010786b:	8b 45 d0             	mov    -0x30(%ebp),%eax
	d;
8010786e:	8b 45 d0             	mov    -0x30(%ebp),%eax
	d;
80107871:	8b 45 d0             	mov    -0x30(%ebp),%eax
80107874:	ec                   	in     (%dx),%al
	if (cmos_read(CENTURY) != 0) {
80107875:	84 c0                	test   %al,%al
80107877:	74 26                	je     8010789f <fill_rtcdate+0x11f>
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
80107879:	b8 32 00 00 00       	mov    $0x32,%eax
8010787e:	89 f2                	mov    %esi,%edx
80107880:	ee                   	out    %al,(%dx)
	volatile int d = 0;
80107881:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
80107888:	89 da                	mov    %ebx,%edx
	d;
8010788a:	8b 45 ec             	mov    -0x14(%ebp),%eax
	d;
8010788d:	8b 45 ec             	mov    -0x14(%ebp),%eax
	d;
80107890:	8b 45 ec             	mov    -0x14(%ebp),%eax
80107893:	ec                   	in     (%dx),%al
	return inb(CMOS_RETURN);
80107894:	0f b6 c0             	movzbl %al,%eax
		r->year += cmos_read(CENTURY) * 100;
80107897:	6b c0 64             	imul   $0x64,%eax,%eax
8010789a:	01 f8                	add    %edi,%eax
8010789c:	89 41 14             	mov    %eax,0x14(%ecx)
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
8010789f:	b8 0b 00 00 00       	mov    $0xb,%eax
801078a4:	ba 70 00 00 00       	mov    $0x70,%edx
801078a9:	ee                   	out    %al,(%dx)
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
801078aa:	ba 71 00 00 00       	mov    $0x71,%edx
	volatile int d = 0;
801078af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	d;
801078b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
	d;
801078b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
	d;
801078bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
801078bf:	ec                   	in     (%dx),%al
	}
	if (((cmos_read(CMOS_STATB) & (1 << 1)) == 0) && (r->hour & 0x80)) {
801078c0:	a8 02                	test   $0x2,%al
801078c2:	75 28                	jne    801078ec <fill_rtcdate+0x16c>
801078c4:	0f b6 45 c3          	movzbl -0x3d(%ebp),%eax
801078c8:	84 c0                	test   %al,%al
801078ca:	79 20                	jns    801078ec <fill_rtcdate+0x16c>
		r->hour = ((r->hour & 0x7F) + 12) % 24;
801078cc:	83 e0 7f             	and    $0x7f,%eax
801078cf:	89 c7                	mov    %eax,%edi
801078d1:	8d 47 0c             	lea    0xc(%edi),%eax
801078d4:	0f b6 f8             	movzbl %al,%edi
801078d7:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
801078dc:	f7 e7                	mul    %edi
801078de:	c1 ea 04             	shr    $0x4,%edx
801078e1:	8d 04 52             	lea    (%edx,%edx,2),%eax
801078e4:	c1 e0 03             	shl    $0x3,%eax
801078e7:	29 c7                	sub    %eax,%edi
801078e9:	89 79 08             	mov    %edi,0x8(%ecx)
	}
}
801078ec:	83 c4 34             	add    $0x34,%esp
801078ef:	5b                   	pop    %ebx
801078f0:	5e                   	pop    %esi
801078f1:	5f                   	pop    %edi
801078f2:	5d                   	pop    %ebp
801078f3:	c3                   	ret
801078f4:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
801078fb:	00 
801078fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80107900 <lapicinit>:
{
80107900:	55                   	push   %ebp
80107901:	89 e5                	mov    %esp,%ebp
80107903:	56                   	push   %esi
	if (!lapic)
80107904:	8b 35 8c 92 13 80    	mov    0x8013928c,%esi
{
8010790a:	53                   	push   %ebx
	if (!lapic)
8010790b:	85 f6                	test   %esi,%esi
8010790d:	0f 84 cd 00 00 00    	je     801079e0 <lapicinit+0xe0>
	lapic[index] = value;
80107913:	c7 86 f0 00 00 00 3f 	movl   $0x13f,0xf0(%esi)
8010791a:	01 00 00 
	__asm__ __volatile__("movl %0, %%eax\t\n"
8010791d:	31 c9                	xor    %ecx,%ecx
	lapic[ID]; // wait for write to finish, by reading
8010791f:	8b 46 20             	mov    0x20(%esi),%eax
80107922:	b8 06 00 00 00       	mov    $0x6,%eax
80107927:	89 c0                	mov    %eax,%eax
80107929:	0f a2                	cpuid
	lapic[index] = value;
8010792b:	c7 86 e0 03 00 00 0b 	movl   $0xb,0x3e0(%esi)
80107932:	00 00 00 
	lapic[ID]; // wait for write to finish, by reading
80107935:	8b 46 20             	mov    0x20(%esi),%eax
	lapic[index] = value;
80107938:	c7 86 20 03 00 00 20 	movl   $0x20020,0x320(%esi)
8010793f:	00 02 00 
	lapic[ID]; // wait for write to finish, by reading
80107942:	8b 46 20             	mov    0x20(%esi),%eax
	lapic[index] = value;
80107945:	c7 86 80 03 00 00 80 	movl   $0x989680,0x380(%esi)
8010794c:	96 98 00 
	lapic[ID]; // wait for write to finish, by reading
8010794f:	8b 46 20             	mov    0x20(%esi),%eax
	lapic[index] = value;
80107952:	c7 86 50 03 00 00 00 	movl   $0x10000,0x350(%esi)
80107959:	00 01 00 
	lapic[ID]; // wait for write to finish, by reading
8010795c:	8b 46 20             	mov    0x20(%esi),%eax
	lapic[index] = value;
8010795f:	c7 86 60 03 00 00 00 	movl   $0x10000,0x360(%esi)
80107966:	00 01 00 
	lapic[ID]; // wait for write to finish, by reading
80107969:	8b 46 20             	mov    0x20(%esi),%eax
	if (((lapic[VER] >> 16) & 0xFF) >= 4)
8010796c:	8b 46 30             	mov    0x30(%esi),%eax
8010796f:	a9 00 00 fc 00       	test   $0xfc0000,%eax
80107974:	75 72                	jne    801079e8 <lapicinit+0xe8>
	lapic[index] = value;
80107976:	c7 86 70 03 00 00 33 	movl   $0x33,0x370(%esi)
8010797d:	00 00 00 
	lapic[ID]; // wait for write to finish, by reading
80107980:	8b 46 20             	mov    0x20(%esi),%eax
	lapic[index] = value;
80107983:	c7 86 80 02 00 00 00 	movl   $0x0,0x280(%esi)
8010798a:	00 00 00 
	lapic[ID]; // wait for write to finish, by reading
8010798d:	8b 46 20             	mov    0x20(%esi),%eax
	lapic[index] = value;
80107990:	c7 86 80 02 00 00 00 	movl   $0x0,0x280(%esi)
80107997:	00 00 00 
	lapic[ID]; // wait for write to finish, by reading
8010799a:	8b 46 20             	mov    0x20(%esi),%eax
	lapic[index] = value;
8010799d:	c7 86 b0 00 00 00 00 	movl   $0x0,0xb0(%esi)
801079a4:	00 00 00 
	lapic[ID]; // wait for write to finish, by reading
801079a7:	8b 46 20             	mov    0x20(%esi),%eax
	lapic[index] = value;
801079aa:	c7 86 10 03 00 00 00 	movl   $0x0,0x310(%esi)
801079b1:	00 00 00 
	lapic[ID]; // wait for write to finish, by reading
801079b4:	8b 46 20             	mov    0x20(%esi),%eax
	lapic[index] = value;
801079b7:	c7 86 00 03 00 00 00 	movl   $0x88500,0x300(%esi)
801079be:	85 08 00 
	lapic[ID]; // wait for write to finish, by reading
801079c1:	8b 46 20             	mov    0x20(%esi),%eax
	while (lapic[ICRLO] & DELIVS)
801079c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
801079c8:	8b 86 00 03 00 00    	mov    0x300(%esi),%eax
801079ce:	f6 c4 10             	test   $0x10,%ah
801079d1:	75 f5                	jne    801079c8 <lapicinit+0xc8>
	lapic[index] = value;
801079d3:	c7 86 80 00 00 00 00 	movl   $0x0,0x80(%esi)
801079da:	00 00 00 
	lapic[ID]; // wait for write to finish, by reading
801079dd:	8b 46 20             	mov    0x20(%esi),%eax
}
801079e0:	5b                   	pop    %ebx
801079e1:	5e                   	pop    %esi
801079e2:	5d                   	pop    %ebp
801079e3:	c3                   	ret
801079e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
	lapic[index] = value;
801079e8:	c7 86 40 03 00 00 00 	movl   $0x10000,0x340(%esi)
801079ef:	00 01 00 
	lapic[ID]; // wait for write to finish, by reading
801079f2:	8b 46 20             	mov    0x20(%esi),%eax
}
801079f5:	e9 7c ff ff ff       	jmp    80107976 <lapicinit+0x76>
801079fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80107a00 <lapicid>:
	if (!lapic)
80107a00:	a1 8c 92 13 80       	mov    0x8013928c,%eax
80107a05:	85 c0                	test   %eax,%eax
80107a07:	74 07                	je     80107a10 <lapicid+0x10>
	return lapic[ID] >> 24;
80107a09:	8b 40 20             	mov    0x20(%eax),%eax
80107a0c:	c1 e8 18             	shr    $0x18,%eax
80107a0f:	c3                   	ret
		return 0;
80107a10:	31 c0                	xor    %eax,%eax
}
80107a12:	c3                   	ret
80107a13:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80107a1a:	00 
80107a1b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi

80107a20 <lapiceoi>:
	if (lapic)
80107a20:	a1 8c 92 13 80       	mov    0x8013928c,%eax
80107a25:	85 c0                	test   %eax,%eax
80107a27:	74 0d                	je     80107a36 <lapiceoi+0x16>
	lapic[index] = value;
80107a29:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
80107a30:	00 00 00 
	lapic[ID]; // wait for write to finish, by reading
80107a33:	8b 40 20             	mov    0x20(%eax),%eax
}
80107a36:	c3                   	ret
80107a37:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80107a3e:	00 
80107a3f:	90                   	nop

80107a40 <microdelay>:
{
80107a40:	55                   	push   %ebp
80107a41:	89 e5                	mov    %esp,%ebp
80107a43:	83 ec 10             	sub    $0x10,%esp
	volatile int d = 0;
80107a46:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	d;
80107a4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
	d;
80107a50:	8b 45 fc             	mov    -0x4(%ebp),%eax
	d;
80107a53:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
80107a56:	c9                   	leave
80107a57:	c3                   	ret
80107a58:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80107a5f:	00 

80107a60 <lapicstartap>:
{
80107a60:	55                   	push   %ebp
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
80107a61:	b8 0f 00 00 00       	mov    $0xf,%eax
80107a66:	ba 70 00 00 00       	mov    $0x70,%edx
80107a6b:	89 e5                	mov    %esp,%ebp
80107a6d:	53                   	push   %ebx
80107a6e:	83 ec 10             	sub    $0x10,%esp
80107a71:	8b 5d 08             	mov    0x8(%ebp),%ebx
80107a74:	8b 4d 0c             	mov    0xc(%ebp),%ecx
80107a77:	ee                   	out    %al,(%dx)
80107a78:	b8 0a 00 00 00       	mov    $0xa,%eax
80107a7d:	ba 71 00 00 00       	mov    $0x71,%edx
80107a82:	ee                   	out    %al,(%dx)
	wrv[0] = 0;
80107a83:	31 c0                	xor    %eax,%eax
	lapic[index] = value;
80107a85:	89 da                	mov    %ebx,%edx
	wrv[0] = 0;
80107a87:	66 a3 67 04 00 80    	mov    %ax,0x80000467
	wrv[1] = addr >> 4;
80107a8d:	89 c8                	mov    %ecx,%eax
		lapicw(ICRLO, STARTUP | (addr >> 12));
80107a8f:	c1 e9 0c             	shr    $0xc,%ecx
	wrv[1] = addr >> 4;
80107a92:	c1 e8 04             	shr    $0x4,%eax
	lapic[index] = value;
80107a95:	c1 e2 18             	shl    $0x18,%edx
		lapicw(ICRLO, STARTUP | (addr >> 12));
80107a98:	80 cd 06             	or     $0x6,%ch
	wrv[1] = addr >> 4;
80107a9b:	66 a3 69 04 00 80    	mov    %ax,0x80000469
	lapic[index] = value;
80107aa1:	a1 8c 92 13 80       	mov    0x8013928c,%eax
80107aa6:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
	lapic[ID]; // wait for write to finish, by reading
80107aac:	8b 58 20             	mov    0x20(%eax),%ebx
	lapic[index] = value;
80107aaf:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
80107ab6:	c5 00 00 
	lapic[ID]; // wait for write to finish, by reading
80107ab9:	8b 58 20             	mov    0x20(%eax),%ebx
	volatile int d = 0;
80107abc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	d;
80107ac3:	8b 5d f4             	mov    -0xc(%ebp),%ebx
	d;
80107ac6:	8b 5d f4             	mov    -0xc(%ebp),%ebx
	d;
80107ac9:	8b 5d f4             	mov    -0xc(%ebp),%ebx
	lapic[index] = value;
80107acc:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
80107ad3:	85 00 00 
	lapic[ID]; // wait for write to finish, by reading
80107ad6:	8b 58 20             	mov    0x20(%eax),%ebx
	volatile int d = 0;
80107ad9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	d;
80107ae0:	8b 5d f0             	mov    -0x10(%ebp),%ebx
	d;
80107ae3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
	d;
80107ae6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
	lapic[index] = value;
80107ae9:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
	lapic[ID]; // wait for write to finish, by reading
80107aef:	8b 58 20             	mov    0x20(%eax),%ebx
	lapic[index] = value;
80107af2:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
	lapic[ID]; // wait for write to finish, by reading
80107af8:	8b 58 20             	mov    0x20(%eax),%ebx
	volatile int d = 0;
80107afb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	d;
80107b02:	8b 5d f8             	mov    -0x8(%ebp),%ebx
	d;
80107b05:	8b 5d f8             	mov    -0x8(%ebp),%ebx
	d;
80107b08:	8b 5d f8             	mov    -0x8(%ebp),%ebx
	lapic[index] = value;
80107b0b:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
	lapic[ID]; // wait for write to finish, by reading
80107b11:	8b 50 20             	mov    0x20(%eax),%edx
	lapic[index] = value;
80107b14:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
	lapic[ID]; // wait for write to finish, by reading
80107b1a:	8b 40 20             	mov    0x20(%eax),%eax
	volatile int d = 0;
80107b1d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	d;
80107b24:	8b 45 f8             	mov    -0x8(%ebp),%eax
	d;
80107b27:	8b 45 f8             	mov    -0x8(%ebp),%eax
	d;
80107b2a:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
80107b2d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
80107b30:	c9                   	leave
80107b31:	c3                   	ret
80107b32:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80107b39:	00 
80107b3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi

80107b40 <cmostime>:

// qemu seems to use 24-hour GWT and the values are BCD encoded
void
cmostime(struct rtcdate *r)
{
80107b40:	55                   	push   %ebp
80107b41:	b8 0b 00 00 00       	mov    $0xb,%eax
80107b46:	ba 70 00 00 00       	mov    $0x70,%edx
80107b4b:	89 e5                	mov    %esp,%ebp
80107b4d:	57                   	push   %edi
80107b4e:	56                   	push   %esi
80107b4f:	53                   	push   %ebx
80107b50:	83 ec 5c             	sub    $0x5c,%esp
80107b53:	ee                   	out    %al,(%dx)
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
80107b54:	ba 71 00 00 00       	mov    $0x71,%edx
	volatile int d = 0;
80107b59:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
	d;
80107b60:	8b 45 ac             	mov    -0x54(%ebp),%eax
	d;
80107b63:	8b 45 ac             	mov    -0x54(%ebp),%eax
	d;
80107b66:	8b 45 ac             	mov    -0x54(%ebp),%eax
80107b69:	ec                   	in     (%dx),%al
	int sb, bcd;

	sb = cmos_read(CMOS_STATB);

	// find out if the cmos is bcd-encoded
	bcd = (sb & (1 << 2)) == 0;
80107b6a:	83 e0 04             	and    $0x4,%eax
80107b6d:	8d 5d b8             	lea    -0x48(%ebp),%ebx
80107b70:	8d 75 d0             	lea    -0x30(%ebp),%esi
80107b73:	88 45 a7             	mov    %al,-0x59(%ebp)
80107b76:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80107b7d:	00 
80107b7e:	66 90                	xchg   %ax,%ax

	// make sure CMOS doesn't modify time while we read it
	for (;;) {
		fill_rtcdate(&t1);
80107b80:	89 d8                	mov    %ebx,%eax
80107b82:	e8 f9 fb ff ff       	call   80107780 <fill_rtcdate>
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
80107b87:	b8 0a 00 00 00       	mov    $0xa,%eax
80107b8c:	ba 70 00 00 00       	mov    $0x70,%edx
80107b91:	ee                   	out    %al,(%dx)
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
80107b92:	bf 71 00 00 00       	mov    $0x71,%edi
	volatile int d = 0;
80107b97:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
	d;
80107b9e:	8b 45 b0             	mov    -0x50(%ebp),%eax
80107ba1:	89 fa                	mov    %edi,%edx
	d;
80107ba3:	8b 45 b0             	mov    -0x50(%ebp),%eax
	d;
80107ba6:	8b 45 b0             	mov    -0x50(%ebp),%eax
80107ba9:	ec                   	in     (%dx),%al
		if (cmos_read(CMOS_STATA) & CMOS_UIP)
80107baa:	84 c0                	test   %al,%al
80107bac:	78 d2                	js     80107b80 <cmostime+0x40>
			continue;
		fill_rtcdate(&t2);
80107bae:	89 f0                	mov    %esi,%eax
80107bb0:	e8 cb fb ff ff       	call   80107780 <fill_rtcdate>
		if (memcmp(&t1, &t2, sizeof(t1)) == 0)
80107bb5:	83 ec 04             	sub    $0x4,%esp
80107bb8:	6a 18                	push   $0x18
80107bba:	56                   	push   %esi
80107bbb:	53                   	push   %ebx
80107bbc:	e8 0f cc ff ff       	call   801047d0 <memcmp>
80107bc1:	83 c4 10             	add    $0x10,%esp
80107bc4:	85 c0                	test   %eax,%eax
80107bc6:	75 b8                	jne    80107b80 <cmostime+0x40>
			break;
	}

	// convert
	if (bcd) {
80107bc8:	80 7d a7 00          	cmpb   $0x0,-0x59(%ebp)
80107bcc:	0f 85 a7 00 00 00    	jne    80107c79 <cmostime+0x139>
#define CONV(x) (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
		CONV(second);
80107bd2:	8b 45 b8             	mov    -0x48(%ebp),%eax
80107bd5:	89 c2                	mov    %eax,%edx
80107bd7:	83 e0 0f             	and    $0xf,%eax
80107bda:	c1 ea 04             	shr    $0x4,%edx
80107bdd:	8d 14 92             	lea    (%edx,%edx,4),%edx
80107be0:	8d 04 50             	lea    (%eax,%edx,2),%eax
80107be3:	89 45 b8             	mov    %eax,-0x48(%ebp)
		CONV(minute);
80107be6:	8b 45 bc             	mov    -0x44(%ebp),%eax
80107be9:	89 c2                	mov    %eax,%edx
80107beb:	83 e0 0f             	and    $0xf,%eax
80107bee:	c1 ea 04             	shr    $0x4,%edx
80107bf1:	8d 14 92             	lea    (%edx,%edx,4),%edx
80107bf4:	8d 04 50             	lea    (%eax,%edx,2),%eax
80107bf7:	89 45 bc             	mov    %eax,-0x44(%ebp)
		t1.hour = ((t1.hour & 0x0f) + (((t1.hour & 0x70) / 16) * 10)) |
80107bfa:	8b 45 c0             	mov    -0x40(%ebp),%eax
80107bfd:	89 c2                	mov    %eax,%edx
80107bff:	c1 ea 04             	shr    $0x4,%edx
80107c02:	83 e2 07             	and    $0x7,%edx
80107c05:	8d 1c 92             	lea    (%edx,%edx,4),%ebx
80107c08:	89 c2                	mov    %eax,%edx
							(t1.hour & 0x80);
80107c0a:	25 80 00 00 00       	and    $0x80,%eax
		t1.hour = ((t1.hour & 0x0f) + (((t1.hour & 0x70) / 16) * 10)) |
80107c0f:	83 e2 0f             	and    $0xf,%edx
80107c12:	8d 14 5a             	lea    (%edx,%ebx,2),%edx
		CONV(day);
80107c15:	8b 5d c4             	mov    -0x3c(%ebp),%ebx
		t1.hour = ((t1.hour & 0x0f) + (((t1.hour & 0x70) / 16) * 10)) |
80107c18:	09 d0                	or     %edx,%eax
	__asm__ __volatile__("out %0,%1" : : "a"(data), "d"(port));
80107c1a:	ba 70 00 00 00       	mov    $0x70,%edx
80107c1f:	89 45 c0             	mov    %eax,-0x40(%ebp)
80107c22:	b8 06 00 00 00       	mov    $0x6,%eax
80107c27:	ee                   	out    %al,(%dx)
	volatile int d = 0;
80107c28:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	__asm__ __volatile__("in %1,%0" : "=a"(data) : "d"(port));
80107c2f:	89 fa                	mov    %edi,%edx
	d;
80107c31:	8b 45 b4             	mov    -0x4c(%ebp),%eax
	d;
80107c34:	8b 45 b4             	mov    -0x4c(%ebp),%eax
	d;
80107c37:	8b 45 b4             	mov    -0x4c(%ebp),%eax
80107c3a:	ec                   	in     (%dx),%al
		CONV(day);
80107c3b:	89 da                	mov    %ebx,%edx
80107c3d:	83 e3 0f             	and    $0xf,%ebx
	return inb(CMOS_RETURN);
80107c40:	0f b6 c0             	movzbl %al,%eax
		CONV(day);
80107c43:	c1 ea 04             	shr    $0x4,%edx
80107c46:	8d 14 92             	lea    (%edx,%edx,4),%edx
80107c49:	8d 14 53             	lea    (%ebx,%edx,2),%edx
		t1.day -= cmos_read(DAY_OF_WEEK);
80107c4c:	29 c2                	sub    %eax,%edx
		CONV(month);
80107c4e:	8b 45 c8             	mov    -0x38(%ebp),%eax
		t1.day -= cmos_read(DAY_OF_WEEK);
80107c51:	89 55 c4             	mov    %edx,-0x3c(%ebp)
		CONV(month);
80107c54:	89 c2                	mov    %eax,%edx
80107c56:	83 e0 0f             	and    $0xf,%eax
80107c59:	c1 ea 04             	shr    $0x4,%edx
80107c5c:	8d 14 92             	lea    (%edx,%edx,4),%edx
80107c5f:	8d 04 50             	lea    (%eax,%edx,2),%eax
80107c62:	89 45 c8             	mov    %eax,-0x38(%ebp)
		CONV(year);
80107c65:	8b 45 cc             	mov    -0x34(%ebp),%eax
80107c68:	89 c2                	mov    %eax,%edx
80107c6a:	83 e0 0f             	and    $0xf,%eax
80107c6d:	c1 ea 04             	shr    $0x4,%edx
80107c70:	8d 14 92             	lea    (%edx,%edx,4),%edx
80107c73:	8d 04 50             	lea    (%eax,%edx,2),%eax
80107c76:	89 45 cc             	mov    %eax,-0x34(%ebp)
#undef CONV
	}

	*r = t1;
80107c79:	8b 4d 08             	mov    0x8(%ebp),%ecx
80107c7c:	8b 45 b8             	mov    -0x48(%ebp),%eax
80107c7f:	89 01                	mov    %eax,(%ecx)
80107c81:	8b 45 bc             	mov    -0x44(%ebp),%eax
80107c84:	89 41 04             	mov    %eax,0x4(%ecx)
80107c87:	8b 45 c0             	mov    -0x40(%ebp),%eax
80107c8a:	89 41 08             	mov    %eax,0x8(%ecx)
80107c8d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
80107c90:	89 41 0c             	mov    %eax,0xc(%ecx)
80107c93:	8b 45 c8             	mov    -0x38(%ebp),%eax
80107c96:	89 41 10             	mov    %eax,0x10(%ecx)
80107c99:	8b 45 cc             	mov    -0x34(%ebp),%eax
80107c9c:	89 41 14             	mov    %eax,0x14(%ecx)
}
80107c9f:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107ca2:	5b                   	pop    %ebx
80107ca3:	5e                   	pop    %esi
80107ca4:	5f                   	pop    %edi
80107ca5:	5d                   	pop    %ebp
80107ca6:	c3                   	ret
80107ca7:	66 90                	xchg   %ax,%ax
80107ca9:	66 90                	xchg   %ax,%ax
80107cab:	66 90                	xchg   %ax,%ax
80107cad:	66 90                	xchg   %ax,%ax
80107caf:	90                   	nop

80107cb0 <scan_rdsp>:
	return (sum & 0xff) == 0;
}

static struct acpi_rdsp *
scan_rdsp(uint base, uint len)
{
80107cb0:	55                   	push   %ebp
80107cb1:	89 e5                	mov    %esp,%ebp
80107cb3:	57                   	push   %edi
80107cb4:	56                   	push   %esi
80107cb5:	53                   	push   %ebx
80107cb6:	83 ec 0c             	sub    $0xc,%esp
	uint8_t *p;
	_Static_assert(sizeof(struct acpi_rdsp) == 20, "ACPI RDSP struct malformed.");

	for (p = p2v(base); len >= sizeof(struct acpi_rdsp);
80107cb9:	83 fa 13             	cmp    $0x13,%edx
80107cbc:	76 62                	jbe    80107d20 <scan_rdsp+0x70>
80107cbe:	83 ea 14             	sub    $0x14,%edx
80107cc1:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
80107cc7:	83 e2 fc             	and    $0xfffffffc,%edx
80107cca:	8d 9c 10 04 00 00 80 	lea    -0x7ffffffc(%eax,%edx,1),%ebx
80107cd1:	eb 0c                	jmp    80107cdf <scan_rdsp+0x2f>
80107cd3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
			 len -= sizeof(len), p += sizeof(p)) {
80107cd8:	83 c6 04             	add    $0x4,%esi
	for (p = p2v(base); len >= sizeof(struct acpi_rdsp);
80107cdb:	39 de                	cmp    %ebx,%esi
80107cdd:	74 41                	je     80107d20 <scan_rdsp+0x70>
		if (memcmp(p, SIG_RDSP, 8) == 0 &&
80107cdf:	83 ec 04             	sub    $0x4,%esp
80107ce2:	6a 08                	push   $0x8
80107ce4:	68 93 86 10 80       	push   $0x80108693
80107ce9:	56                   	push   %esi
80107cea:	e8 e1 ca ff ff       	call   801047d0 <memcmp>
80107cef:	83 c4 10             	add    $0x10,%esp
80107cf2:	85 c0                	test   %eax,%eax
80107cf4:	75 e2                	jne    80107cd8 <scan_rdsp+0x28>
80107cf6:	89 f0                	mov    %esi,%eax
	uint sum = 0;
80107cf8:	31 d2                	xor    %edx,%edx
80107cfa:	8d 7e 14             	lea    0x14(%esi),%edi
80107cfd:	8d 76 00             	lea    0x0(%esi),%esi
		sum += ((char *)r)[i];
80107d00:	0f be 08             	movsbl (%eax),%ecx
	for (int i = 0; i < len; i++) {
80107d03:	83 c0 01             	add    $0x1,%eax
		sum += ((char *)r)[i];
80107d06:	01 ca                	add    %ecx,%edx
	for (int i = 0; i < len; i++) {
80107d08:	39 f8                	cmp    %edi,%eax
80107d0a:	75 f4                	jne    80107d00 <scan_rdsp+0x50>
		if (memcmp(p, SIG_RDSP, 8) == 0 &&
80107d0c:	84 d2                	test   %dl,%dl
80107d0e:	75 c8                	jne    80107cd8 <scan_rdsp+0x28>
				do_checksum_rdsp((struct acpi_rdsp *)p, 20)) {
			return (struct acpi_rdsp *)p;
		}
	}
	return (struct acpi_rdsp *)0;
}
80107d10:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107d13:	89 f0                	mov    %esi,%eax
80107d15:	5b                   	pop    %ebx
80107d16:	5e                   	pop    %esi
80107d17:	5f                   	pop    %edi
80107d18:	5d                   	pop    %ebp
80107d19:	c3                   	ret
80107d1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
80107d20:	8d 65 f4             	lea    -0xc(%ebp),%esp
	return (struct acpi_rdsp *)0;
80107d23:	31 f6                	xor    %esi,%esi
}
80107d25:	5b                   	pop    %ebx
80107d26:	89 f0                	mov    %esi,%eax
80107d28:	5e                   	pop    %esi
80107d29:	5f                   	pop    %edi
80107d2a:	5d                   	pop    %ebp
80107d2b:	c3                   	ret
80107d2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi

80107d30 <acpiinit>:
	return -1;
}

int
acpiinit(void)
{
80107d30:	55                   	push   %ebp
80107d31:	89 e5                	mov    %esp,%ebp
80107d33:	57                   	push   %edi
80107d34:	56                   	push   %esi
80107d35:	53                   	push   %ebx
80107d36:	83 ec 1c             	sub    $0x1c,%esp
	pa = *((ushort *)p2v(0x40E)) << 4; // EBDA
80107d39:	0f b7 35 0e 04 00 80 	movzwl 0x8000040e,%esi
	uintptr_t bda_size = *(short *)p2v(0x413);
80107d40:	0f bf 15 13 04 00 80 	movswl 0x80000413,%edx
	pa = *((ushort *)p2v(0x40E)) << 4; // EBDA
80107d47:	c1 e6 04             	shl    $0x4,%esi
	rdsp = scan_rdsp(pa, bda_size);
80107d4a:	89 f0                	mov    %esi,%eax
80107d4c:	e8 5f ff ff ff       	call   80107cb0 <scan_rdsp>
	if (pa && (rdsp != NULL))
80107d51:	85 f6                	test   %esi,%esi
80107d53:	0f 84 17 01 00 00    	je     80107e70 <acpiinit+0x140>
80107d59:	89 c3                	mov    %eax,%ebx
80107d5b:	85 c0                	test   %eax,%eax
80107d5d:	0f 84 0d 01 00 00    	je     80107e70 <acpiinit+0x140>
	struct acpi_madt *madt = 0;

	rdsp = find_rdsp();
	if (rdsp == NULL)
		panic("NULL RDSP");
	cprintf("info: rdsp at %#x\n", v2p(rdsp));
80107d63:	83 ec 08             	sub    $0x8,%esp
static inline uintptr_t v2p(void *a) { return ((uintptr_t) (a)) - ((uintptr_t)KERNBASE); }
80107d66:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
80107d6c:	50                   	push   %eax
80107d6d:	68 a6 86 10 80       	push   $0x801086a6
80107d72:	e8 d9 89 ff ff       	call   80100750 <cprintf>
	cprintf("info: rsdt at %#x\n", V2P_WO(rdsp->rsdt_addr_phys));
80107d77:	8b 43 10             	mov    0x10(%ebx),%eax
80107d7a:	59                   	pop    %ecx
80107d7b:	5e                   	pop    %esi
80107d7c:	05 00 00 00 80       	add    $0x80000000,%eax
80107d81:	50                   	push   %eax
80107d82:	68 b9 86 10 80       	push   $0x801086b9
80107d87:	e8 c4 89 ff ff       	call   80100750 <cprintf>
	if (rdsp->rsdt_addr_phys > PHYSLIMIT)
80107d8c:	8b 73 10             	mov    0x10(%ebx),%esi
80107d8f:	83 c4 10             	add    $0x10,%esp
80107d92:	81 fe 00 00 00 0e    	cmp    $0xe000000,%esi
80107d98:	0f 87 a9 00 00 00    	ja     80107e47 <acpiinit+0x117>
	for (int i = 0; i < dsc->length; i++) {
80107d9e:	8b be 04 00 00 80    	mov    -0x7ffffffc(%esi),%edi
static inline void *p2v(uintptr_t a) { return (void *) ((a) + ((uintptr_t)KERNBASE)); }
80107da4:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
80107daa:	89 c3                	mov    %eax,%ebx
		goto notmapped;
	rsdt = p2v(rdsp->rsdt_addr_phys);
	kernel_assert(do_checksum(&rsdt->header) == 1);
80107dac:	89 c1                	mov    %eax,%ecx
	for (int i = 0; i < dsc->length; i++) {
80107dae:	85 ff                	test   %edi,%edi
80107db0:	74 25                	je     80107dd7 <acpiinit+0xa7>
	uint sum = 0;
80107db2:	89 75 e4             	mov    %esi,-0x1c(%ebp)
80107db5:	01 c7                	add    %eax,%edi
80107db7:	31 d2                	xor    %edx,%edx
80107db9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		sum += ((char *)dsc)[i];
80107dc0:	0f be 30             	movsbl (%eax),%esi
	for (int i = 0; i < dsc->length; i++) {
80107dc3:	83 c0 01             	add    $0x1,%eax
		sum += ((char *)dsc)[i];
80107dc6:	01 f2                	add    %esi,%edx
	for (int i = 0; i < dsc->length; i++) {
80107dc8:	39 c7                	cmp    %eax,%edi
80107dca:	75 f4                	jne    80107dc0 <acpiinit+0x90>
	kernel_assert(do_checksum(&rsdt->header) == 1);
80107dcc:	8b 75 e4             	mov    -0x1c(%ebp),%esi
80107dcf:	84 d2                	test   %dl,%dl
80107dd1:	0f 85 38 02 00 00    	jne    8010800f <acpiinit+0x2df>
	kernel_assert(memcmp(rsdt->header.signature, "RSDT", 4) == 0);
80107dd7:	83 ec 04             	sub    $0x4,%esp
80107dda:	6a 04                	push   $0x4
80107ddc:	68 cc 86 10 80       	push   $0x801086cc
80107de1:	51                   	push   %ecx
80107de2:	e8 e9 c9 ff ff       	call   801047d0 <memcmp>
80107de7:	83 c4 10             	add    $0x10,%esp
80107dea:	85 c0                	test   %eax,%eax
80107dec:	0f 85 e3 01 00 00    	jne    80107fd5 <acpiinit+0x2a5>
	count = (rsdt->header.length - sizeof(struct acpi_desc_header)) / 4;
80107df2:	8b 4b 04             	mov    0x4(%ebx),%ecx
80107df5:	8d 51 dc             	lea    -0x24(%ecx),%edx
	for (n = 0; n < count; n++) {
80107df8:	c1 ea 02             	shr    $0x2,%edx
80107dfb:	74 5f                	je     80107e5c <acpiinit+0x12c>
80107dfd:	8d 8c 96 24 00 00 80 	lea    -0x7fffffdc(%esi,%edx,4),%ecx
	struct acpi_madt *madt = 0;
80107e04:	89 45 e0             	mov    %eax,-0x20(%ebp)
80107e07:	83 c3 24             	add    $0x24,%ebx
80107e0a:	31 ff                	xor    %edi,%edi
80107e0c:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
80107e0f:	eb 27                	jmp    80107e38 <acpiinit+0x108>
80107e11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
		memmove(creator, hdr->creator_id, 4);
		creator[4] = 0;
		cprintf("acpi: %s %s %s %x %s %x\n", sig, id, tableid, hdr->oem_revision,
						creator, hdr->creator_revision);
#endif
		if (memcmp(hdr->signature, SIG_MADT, 4) == 0)
80107e18:	83 ec 04             	sub    $0x4,%esp
80107e1b:	6a 04                	push   $0x4
80107e1d:	68 e7 86 10 80       	push   $0x801086e7
80107e22:	56                   	push   %esi
80107e23:	e8 a8 c9 ff ff       	call   801047d0 <memcmp>
80107e28:	83 c4 10             	add    $0x10,%esp
			madt = (void *)hdr;
80107e2b:	85 c0                	test   %eax,%eax
80107e2d:	0f 44 fe             	cmove  %esi,%edi
	for (n = 0; n < count; n++) {
80107e30:	83 c3 04             	add    $0x4,%ebx
80107e33:	39 5d e4             	cmp    %ebx,-0x1c(%ebp)
80107e36:	74 68                	je     80107ea0 <acpiinit+0x170>
		struct acpi_desc_header *hdr = p2v(rsdt->entry[n]);
80107e38:	8b 03                	mov    (%ebx),%eax
80107e3a:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
		if (rsdt->entry[n] > PHYSLIMIT)
80107e40:	3d 00 00 00 0e       	cmp    $0xe000000,%eax
80107e45:	76 d1                	jbe    80107e18 <acpiinit+0xe8>
	}

	return acpi_config_smp(madt);

notmapped:
	cprintf("acpi: tables above %#x not mapped.\n", PHYSLIMIT);
80107e47:	83 ec 08             	sub    $0x8,%esp
80107e4a:	68 00 00 00 0e       	push   $0xe000000
80107e4f:	68 2c 8a 10 80       	push   $0x80108a2c
80107e54:	e8 f7 88 ff ff       	call   80100750 <cprintf>
	return -1;
80107e59:	83 c4 10             	add    $0x10,%esp
}
80107e5c:	8d 65 f4             	lea    -0xc(%ebp),%esp
	return -1;
80107e5f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
80107e64:	5b                   	pop    %ebx
80107e65:	5e                   	pop    %esi
80107e66:	5f                   	pop    %edi
80107e67:	5d                   	pop    %ebp
80107e68:	c3                   	ret
80107e69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
	return scan_rdsp(0xE0000, 0x20000);
80107e70:	ba 00 00 02 00       	mov    $0x20000,%edx
80107e75:	b8 00 00 0e 00       	mov    $0xe0000,%eax
80107e7a:	e8 31 fe ff ff       	call   80107cb0 <scan_rdsp>
80107e7f:	89 c3                	mov    %eax,%ebx
	if (rdsp == NULL)
80107e81:	85 c0                	test   %eax,%eax
80107e83:	0f 85 da fe ff ff    	jne    80107d63 <acpiinit+0x33>
		panic("NULL RDSP");
80107e89:	83 ec 0c             	sub    $0xc,%esp
80107e8c:	68 9c 86 10 80       	push   $0x8010869c
80107e91:	e8 ea 84 ff ff       	call   80100380 <panic>
80107e96:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80107e9d:	00 
80107e9e:	66 90                	xchg   %ax,%ax
	if (!madt)
80107ea0:	8b 45 e0             	mov    -0x20(%ebp),%eax
80107ea3:	85 ff                	test   %edi,%edi
80107ea5:	74 b5                	je     80107e5c <acpiinit+0x12c>
	if (madt->header.length < sizeof(struct acpi_madt))
80107ea7:	8b 57 04             	mov    0x4(%edi),%edx
80107eaa:	83 fa 2b             	cmp    $0x2b,%edx
80107ead:	76 ad                	jbe    80107e5c <acpiinit+0x12c>
	p = madt->table;
80107eaf:	8d 5f 2c             	lea    0x2c(%edi),%ebx
	e = p + madt->header.length - sizeof(struct acpi_madt);
80107eb2:	83 ea 2c             	sub    $0x2c,%edx
	lapic_addr = madt->lapic_addr_phys;
80107eb5:	8b 4f 24             	mov    0x24(%edi),%ecx
	e = p + madt->header.length - sizeof(struct acpi_madt);
80107eb8:	8d 3c 13             	lea    (%ebx,%edx,1),%edi
	while (p < e) {
80107ebb:	39 fb                	cmp    %edi,%ebx
80107ebd:	0f 83 a3 00 00 00    	jae    80107f66 <acpiinit+0x236>
		if ((e - p) < 2)
80107ec3:	83 fa 01             	cmp    $0x1,%edx
80107ec6:	0f 84 9a 00 00 00    	je     80107f66 <acpiinit+0x236>
	uint nioapic = 0;
80107ecc:	31 f6                	xor    %esi,%esi
80107ece:	89 45 dc             	mov    %eax,-0x24(%ebp)
80107ed1:	89 4d e0             	mov    %ecx,-0x20(%ebp)
80107ed4:	89 f0                	mov    %esi,%eax
80107ed6:	eb 25                	jmp    80107efd <acpiinit+0x1cd>
80107ed8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
80107edf:	00 
		switch (p[0]) {
80107ee0:	80 fa 01             	cmp    $0x1,%dl
80107ee3:	75 09                	jne    80107eee <acpiinit+0x1be>
			if (len < sizeof(*ioapic))
80107ee5:	83 fe 0b             	cmp    $0xb,%esi
80107ee8:	0f 87 9a 00 00 00    	ja     80107f88 <acpiinit+0x258>
		p += len;
80107eee:	01 f3                	add    %esi,%ebx
	while (p < e) {
80107ef0:	39 fb                	cmp    %edi,%ebx
80107ef2:	73 6c                	jae    80107f60 <acpiinit+0x230>
		if ((e - p) < 2)
80107ef4:	89 fa                	mov    %edi,%edx
80107ef6:	29 da                	sub    %ebx,%edx
80107ef8:	83 fa 01             	cmp    $0x1,%edx
80107efb:	74 63                	je     80107f60 <acpiinit+0x230>
		len = p[1];
80107efd:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
		if ((e - p) < len)
80107f01:	39 f2                	cmp    %esi,%edx
80107f03:	72 5b                	jb     80107f60 <acpiinit+0x230>
		switch (p[0]) {
80107f05:	0f b6 13             	movzbl (%ebx),%edx
80107f08:	84 d2                	test   %dl,%dl
80107f0a:	75 d4                	jne    80107ee0 <acpiinit+0x1b0>
			if (len < sizeof(*lapic))
80107f0c:	83 fe 07             	cmp    $0x7,%esi
80107f0f:	76 dd                	jbe    80107eee <acpiinit+0x1be>
			if (!(lapic->flags & APIC_LAPIC_ENABLED))
80107f11:	f6 43 04 01          	testb  $0x1,0x4(%ebx)
80107f15:	74 d7                	je     80107eee <acpiinit+0x1be>
			cprintf("acpi: cpu#%d apicid %d\n", ncpu, lapic->apic_id);
80107f17:	0f b6 53 03          	movzbl 0x3(%ebx),%edx
80107f1b:	83 ec 04             	sub    $0x4,%esp
80107f1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80107f21:	52                   	push   %edx
80107f22:	ff 35 84 e9 12 80    	push   0x8012e984
80107f28:	68 ec 86 10 80       	push   $0x801086ec
80107f2d:	e8 1e 88 ff ff       	call   80100750 <cprintf>
			cpus[ncpu].apicid = lapic->apic_id;
80107f32:	8b 15 84 e9 12 80    	mov    0x8012e984,%edx
80107f38:	0f b6 43 03          	movzbl 0x3(%ebx),%eax
		p += len;
80107f3c:	01 f3                	add    %esi,%ebx
			break;
80107f3e:	83 c4 10             	add    $0x10,%esp
			cpus[ncpu].apicid = lapic->apic_id;
80107f41:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
			ncpu++;
80107f47:	83 c2 01             	add    $0x1,%edx
80107f4a:	89 15 84 e9 12 80    	mov    %edx,0x8012e984
			cpus[ncpu].apicid = lapic->apic_id;
80107f50:	88 81 a0 e9 12 80    	mov    %al,-0x7fed1660(%ecx)
			break;
80107f56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	while (p < e) {
80107f59:	39 fb                	cmp    %edi,%ebx
80107f5b:	72 97                	jb     80107ef4 <acpiinit+0x1c4>
80107f5d:	8d 76 00             	lea    0x0(%esi),%esi
80107f60:	8b 4d e0             	mov    -0x20(%ebp),%ecx
80107f63:	8b 45 dc             	mov    -0x24(%ebp),%eax
	if (ncpu) {
80107f66:	8b 15 84 e9 12 80    	mov    0x8012e984,%edx
80107f6c:	85 d2                	test   %edx,%edx
80107f6e:	0f 84 e8 fe ff ff    	je     80107e5c <acpiinit+0x12c>
		lapic = IO2V(((uintptr_t)lapic_addr));
80107f74:	89 0d 8c 92 13 80    	mov    %ecx,0x8013928c
}
80107f7a:	8d 65 f4             	lea    -0xc(%ebp),%esp
80107f7d:	5b                   	pop    %ebx
80107f7e:	5e                   	pop    %esi
80107f7f:	5f                   	pop    %edi
80107f80:	5d                   	pop    %ebp
80107f81:	c3                   	ret
80107f82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
			cprintf("acpi: ioapic#%d @%x id=%d base=%d\n", nioapic, ioapic->addr,
80107f88:	83 ec 0c             	sub    $0xc,%esp
80107f8b:	ff 73 08             	push   0x8(%ebx)
80107f8e:	0f b6 53 02          	movzbl 0x2(%ebx),%edx
80107f92:	52                   	push   %edx
80107f93:	ff 73 04             	push   0x4(%ebx)
80107f96:	50                   	push   %eax
80107f97:	89 45 e4             	mov    %eax,-0x1c(%ebp)
80107f9a:	68 dc 89 10 80       	push   $0x801089dc
80107f9f:	e8 ac 87 ff ff       	call   80100750 <cprintf>
			if (nioapic) {
80107fa4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80107fa7:	83 c4 20             	add    $0x20,%esp
80107faa:	85 c0                	test   %eax,%eax
80107fac:	75 12                	jne    80107fc0 <acpiinit+0x290>
				ioapicid = ioapic->id;
80107fae:	0f b6 53 02          	movzbl 0x2(%ebx),%edx
80107fb2:	88 15 80 e9 12 80    	mov    %dl,0x8012e980
			nioapic++;
80107fb8:	83 c0 01             	add    $0x1,%eax
			break;
80107fbb:	e9 2e ff ff ff       	jmp    80107eee <acpiinit+0x1be>
				cprintf("warning: multiple ioapics are not supported");
80107fc0:	83 ec 0c             	sub    $0xc,%esp
80107fc3:	68 00 8a 10 80       	push   $0x80108a00
80107fc8:	e8 83 87 ff ff       	call   80100750 <cprintf>
80107fcd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
80107fd0:	83 c4 10             	add    $0x10,%esp
80107fd3:	eb e3                	jmp    80107fb8 <acpiinit+0x288>
	cprintf("%s:%d: %s: Assertion `%s' failed.\n", file, lineno, func,
80107fd5:	83 ec 0c             	sub    $0xc,%esp
80107fd8:	68 ac 89 10 80       	push   $0x801089ac
80107fdd:	68 a0 91 10 80       	push   $0x801091a0
80107fe2:	68 b3 00 00 00       	push   $0xb3
80107fe7:	68 d1 86 10 80       	push   $0x801086d1
80107fec:	68 3c 88 10 80       	push   $0x8010883c
80107ff1:	e8 5a 87 ff ff       	call   80100750 <cprintf>
	cprintf("Aborting.\n");
80107ff6:	83 c4 14             	add    $0x14,%esp
80107ff9:	68 b9 82 10 80       	push   $0x801082b9
80107ffe:	e8 4d 87 ff ff       	call   80100750 <cprintf>
	panic("Assertion failed.");
80108003:	c7 04 24 c4 82 10 80 	movl   $0x801082c4,(%esp)
8010800a:	e8 71 83 ff ff       	call   80100380 <panic>
	cprintf("%s:%d: %s: Assertion `%s' failed.\n", file, lineno, func,
8010800f:	83 ec 0c             	sub    $0xc,%esp
80108012:	68 8c 89 10 80       	push   $0x8010898c
80108017:	68 a0 91 10 80       	push   $0x801091a0
8010801c:	68 b2 00 00 00       	push   $0xb2
80108021:	eb c4                	jmp    80107fe7 <acpiinit+0x2b7>
