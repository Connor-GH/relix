# Initial process execs /bin/init.
# This code runs in user space, but the kernel needs to know about it.

#include "syscall.h"
#include "traps.h"


# exec(init, argv)
.globl start
start:
  mov $init, %rdi
  mov $argv, %rsi
	mov $envp, %rdx
  mov $SYS_execve, %rax
  int $T_SYSCALL

# for(;;) _exit(1);
exit:
  mov $1, %rdi
  mov $SYS__exit, %rax
  int $T_SYSCALL
  jmp exit

# char init[] = "/bin/init\0";
init:
  .string "/bin/init\0"

# This is where system-wide default environment variables are set.
env0: .string "PATH=/bin:/usr/bin:/\0"
env1: .string "HOME=/\0"
env2: .string "SHELL=/bin/sh\0"
# We don't support all of xterm, but let's pretend we do.
env3: .string "TERM=xterm\0"

# char *argv[] = { init, 0 };
.p2align 2
argv:
  .quad init
  .quad 0

envp:
	.quad env0
	.quad env1
	.quad env2
	.quad env3
	.quad 0
