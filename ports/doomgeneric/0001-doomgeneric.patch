diff --git a/doomgeneric/doomgeneric_relix.c b/doomgeneric/doomgeneric_relix.c
new file mode 100644
index 0000000..a862c6f
--- /dev/null
+++ b/doomgeneric/doomgeneric_relix.c
@@ -0,0 +1,239 @@
+
+#include "doomkeys.h"
+#include "m_argv.h"
+#include "doomgeneric.h"
+
+#include "ext.h"
+#include "userspace/include/gui.h"
+#include <stdlib.h>
+#include <stdio.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <termios.h>
+
+#include <stdbool.h>
+
+#define KEYQUEUE_SIZE 16
+
+static unsigned short s_KeyQueue[KEYQUEUE_SIZE];
+static unsigned int s_KeyQueueWriteIndex = 0;
+static unsigned int s_KeyQueueReadIndex = 0;
+
+static time_t time_since_start = 0;
+static void *fb;
+static int fd = -1;
+
+static void
+echo_off(void);
+
+static unsigned char keycode_to_doom_key(unsigned char scancode)
+{
+    unsigned char key = 0;
+
+    switch (scancode)
+    {
+		case 15:
+			key = KEY_TAB;
+			break;
+		case 11:
+			key = '0';
+			break;
+		case 2:
+			key = '1';
+			break;
+		case 3:
+			key = '2';
+			break;
+		case 4:
+			key = '3';
+			break;
+		case 5:
+			key = '4';
+			break;
+		case 6:
+			key = '5';
+			break;
+		case 7:
+			key = '6';
+			break;
+		case 8:
+			key = '7';
+			break;
+		case 9:
+			key = '8';
+			break;
+		case 10:
+			key = '9';
+			break;
+    case 0x9C:
+    case 0x1C:
+        key = KEY_ENTER;
+        break;
+    case 0x01:
+        key = KEY_ESCAPE;
+        break;
+    case 0xCB:
+    case 0x4B:
+        key = KEY_LEFTARROW;
+        break;
+    case 0xCD:
+    case 0x4D:
+        key = KEY_RIGHTARROW;
+        break;
+    case 0xC8:
+    case 0x48:
+        key = KEY_UPARROW;
+        break;
+    case 0xD0:
+    case 0x50:
+        key = KEY_DOWNARROW;
+        break;
+    case 0x1D:
+        key = KEY_FIRE;
+        break;
+    case 0x39:
+        key = KEY_USE;
+        break;
+    case 0x2A:
+    case 0x36:
+        key = KEY_RSHIFT;
+        break;
+    case 0x15:
+        key = 'y';
+    default:
+        break;
+    }
+
+    return key;
+}
+
+static void
+add_key_to_queue(int pressed, unsigned char keycode)
+{
+	unsigned char key = keycode_to_doom_key(keycode);
+
+	unsigned short keyData = (pressed << 8) | key;
+
+	s_KeyQueue[s_KeyQueueWriteIndex] = keyData;
+	s_KeyQueueWriteIndex++;
+	s_KeyQueueWriteIndex %= KEYQUEUE_SIZE;
+}
+
+void
+DG_Init()
+{
+	time_since_start = uptime();
+	fd = open("/dev/kbd0", O_RDONLY | O_NONBLOCK);
+	if (fd < 0) {
+		perror("open");
+		exit(EXIT_FAILURE);
+	}
+	fb = libgui_init("/dev/fb0");
+	if (fb == NULL) {
+		perror("libgui_init");
+		exit(EXIT_FAILURE);
+	}
+	// Turn off keyboard echoing.
+	echo_off();
+}
+
+void
+handle_key_input(void)
+{
+	if (fd < 0) {
+		return;
+	}
+
+	unsigned char scancode = 0;
+
+	if (read(fd, &scancode, 4) > 0) {
+		unsigned char keyRelease = (0x80 & scancode);
+
+		scancode = (0x7F & scancode);
+
+		if (0 == keyRelease) {
+			add_key_to_queue(1, scancode);
+		} else {
+			add_key_to_queue(0, scancode);
+		}
+	}
+}
+void
+DG_DrawFrame()
+{
+	for (uint32_t y = 0; y < DOOMGENERIC_RESY; y++) {
+		for (uint32_t x = 0; x < DOOMGENERIC_RESX; x++) {
+			libgui_pixel_write_ptr(fb, x, y,
+														 DG_ScreenBuffer[y * DOOMGENERIC_RESX + x]);
+		}
+	}
+	handle_key_input();
+}
+
+void
+DG_SleepMs(uint32_t ms)
+{
+	sleep(ms);
+}
+
+uint32_t
+DG_GetTicksMs()
+{
+	return uptime() - time_since_start;
+}
+
+int
+DG_GetKey(int *pressed, unsigned char *doomKey)
+{
+	if (s_KeyQueueReadIndex == s_KeyQueueWriteIndex) {
+		//key queue is empty
+		return 0;
+	} else {
+		unsigned short keyData = s_KeyQueue[s_KeyQueueReadIndex];
+		s_KeyQueueReadIndex++;
+		s_KeyQueueReadIndex %= KEYQUEUE_SIZE;
+
+		*pressed = keyData >> 8;
+		*doomKey = keyData & 0xFF;
+
+		return 1;
+	}
+
+	return 0;
+}
+
+void
+DG_SetWindowTitle(const char *title)
+{
+}
+
+static void
+echo_on(void)
+{
+	struct termios termios;
+	tcgetattr(STDIN_FILENO, &termios);
+	termios.c_lflag |= ECHO;
+	tcsetattr(STDIN_FILENO, TCSADRAIN, &termios);
+}
+
+static void
+echo_off(void)
+{
+	struct termios termios;
+	tcgetattr(STDIN_FILENO, &termios);
+	termios.c_lflag &= ~ECHO;
+	tcsetattr(STDIN_FILENO, TCSADRAIN, &termios);
+}
+
+int
+main(int argc, char **argv)
+{
+	doomgeneric_Create(argc, argv);
+
+	atexit(echo_on);
+	while (1) {
+		doomgeneric_Tick();
+	}
+
+	return 0;
+}
