diff --git a/doomgeneric/Makefile b/doomgeneric/Makefile
index 503e0dc..561ac69 100644
--- a/doomgeneric/Makefile
+++ b/doomgeneric/Makefile
@@ -11,18 +11,24 @@ else
 	VB=@
 endif

+ROOTDIR=$(shell pwd)/../../../../

 CC=clang  # gcc or g++
 CFLAGS+=-ggdb3 -Os
 LDFLAGS+=-Wl,--gc-sections
-CFLAGS+=-ggdb3 -Wall -DNORMALUNIX -DLINUX -DSNDSERV -D_DEFAULT_SOURCE # -DUSEASM
-LIBS+=-lm -lc -lX11
+CFLAGS+=-Wall -DNORMALUNIX -D_DEFAULT_SOURCE # -DUSEASM
+CFLAGS+=-pipe -fno-pic -static -fno-builtin -ffreestanding -nostdlib -nostdinc \
+				-mno-sse -mno-avx -I$(ROOTDIR)/include/ -I$(ROOTDIR) \
+				$(ROOTDIR)/bin/ulib.a $(ROOTDIR)/bin/libgui.a $(ROOTDIR)/bin/sharedlib.a \
+				-D__USER__  -fno-stack-protector -Wl,-z,noexecstack -Wl,-O1 -Wl,-N,-e,_start \
+				-Wl,--section-start=.text=0x1000 -include $(ROOTDIR)/include/math.h
+LIBS+=

 # subdirectory for objects
 OBJDIR=build
 OUTPUT=doomgeneric

-SRC_DOOM = dummy.o am_map.o doomdef.o doomstat.o dstrings.o d_event.o d_items.o d_iwad.o d_loop.o d_main.o d_mode.o d_net.o f_finale.o f_wipe.o g_game.o hu_lib.o hu_stuff.o info.o i_cdmus.o i_endoom.o i_joystick.o i_scale.o i_sound.o i_system.o i_timer.o memio.o m_argv.o m_bbox.o m_cheat.o m_config.o m_controls.o m_fixed.o m_menu.o m_misc.o m_random.o p_ceilng.o p_doors.o p_enemy.o p_floor.o p_inter.o p_lights.o p_map.o p_maputl.o p_mobj.o p_plats.o p_pspr.o p_saveg.o p_setup.o p_sight.o p_spec.o p_switch.o p_telept.o p_tick.o p_user.o r_bsp.o r_data.o r_draw.o r_main.o r_plane.o r_segs.o r_sky.o r_things.o sha1.o sounds.o statdump.o st_lib.o st_stuff.o s_sound.o tables.o v_video.o wi_stuff.o w_checksum.o w_file.o w_main.o w_wad.o z_zone.o w_file_stdc.o i_input.o i_video.o doomgeneric.o doomgeneric_xlib.o
+SRC_DOOM = dummy.o am_map.o doomdef.o doomstat.o dstrings.o d_event.o d_items.o d_iwad.o d_loop.o d_main.o d_mode.o d_net.o f_finale.o f_wipe.o g_game.o hu_lib.o hu_stuff.o info.o i_cdmus.o i_endoom.o i_joystick.o i_scale.o i_sound.o i_system.o i_timer.o memio.o m_argv.o m_bbox.o m_cheat.o m_config.o m_controls.o m_fixed.o m_menu.o m_misc.o m_random.o p_ceilng.o p_doors.o p_enemy.o p_floor.o p_inter.o p_lights.o p_map.o p_maputl.o p_mobj.o p_plats.o p_pspr.o p_saveg.o p_setup.o p_sight.o p_spec.o p_switch.o p_telept.o p_tick.o p_user.o r_bsp.o r_data.o r_draw.o r_main.o r_plane.o r_segs.o r_sky.o r_things.o sha1.o sounds.o statdump.o st_lib.o st_stuff.o s_sound.o tables.o v_video.o wi_stuff.o w_checksum.o w_file.o w_main.o w_wad.o z_zone.o w_file_stdc.o i_input.o i_video.o doomgeneric.o doomgeneric_relix.o
 OBJS += $(addprefix $(OBJDIR)/, $(SRC_DOOM))

 all:	 $(OUTPUT)
diff --git a/doomgeneric/doomgeneric_relix.c b/doomgeneric/doomgeneric_relix.c
new file mode 100644
index 0000000..b2e1c04
--- /dev/null
+++ b/doomgeneric/doomgeneric_relix.c
@@ -0,0 +1,113 @@
+
+#include "doomkeys.h"
+#include "ext.h"
+#include "m_argv.h"
+#include "doomgeneric.h"
+
+#include "userspace/include/gui.h"
+#include <stdio.h>
+#include <unistd.h>
+
+#include <stdbool.h>
+
+#define KEYQUEUE_SIZE 16
+
+static unsigned short s_KeyQueue[KEYQUEUE_SIZE];
+static unsigned int s_KeyQueueWriteIndex = 0;
+static unsigned int s_KeyQueueReadIndex = 0;
+
+static time_t time_since_start = 0;
+static void *fb;
+
+unsigned char
+keycode_to_doom_key(unsigned int keycode)
+{
+	return keycode;
+}
+
+static void
+add_key_to_queue(int pressed, unsigned int keycode)
+{
+	unsigned char key = keycode_to_doom_key(keycode);
+
+	unsigned short keyData = (pressed << 8) | key;
+
+	s_KeyQueue[s_KeyQueueWriteIndex] = keyData;
+	s_KeyQueueWriteIndex++;
+	s_KeyQueueWriteIndex %= KEYQUEUE_SIZE;
+}
+
+void
+DG_Init()
+{
+	time_since_start = uptime();
+	fb = libgui_init("/dev/fb0");
+	if (fb == NULL) {
+		perror("libgui_init");
+		exit(EXIT_FAILURE);
+	}
+}
+
+void
+handle_key_input(void)
+{
+}
+void
+DG_DrawFrame()
+{
+	for (uint32_t y = 0; y < DOOMGENERIC_RESY; y++) {
+		for (uint32_t x = 0; x < DOOMGENERIC_RESX; x++) {
+			libgui_pixel_write_ptr(fb, x, y, *DG_ScreenBuffer);
+		}
+	}
+	handle_key_input();
+}
+
+void
+DG_SleepMs(uint32_t ms)
+{
+	sleep(ms);
+}
+
+uint32_t
+DG_GetTicksMs()
+{
+	return uptime() - time_since_start;
+}
+
+int
+DG_GetKey(int *pressed, unsigned char *doomKey)
+{
+	if (s_KeyQueueReadIndex == s_KeyQueueWriteIndex) {
+		//key queue is empty
+		return 0;
+	} else {
+		unsigned short keyData = s_KeyQueue[s_KeyQueueReadIndex];
+		s_KeyQueueReadIndex++;
+		s_KeyQueueReadIndex %= KEYQUEUE_SIZE;
+
+		*pressed = keyData >> 8;
+		*doomKey = keyData & 0xFF;
+
+		return 1;
+	}
+
+	return 0;
+}
+
+void
+DG_SetWindowTitle(const char *title)
+{
+}
+
+int
+main(int argc, char **argv)
+{
+	doomgeneric_Create(argc, argv);
+
+	while (1) {
+		doomgeneric_Tick();
+	}
+
+	return 0;
+}
