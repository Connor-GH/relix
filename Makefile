# Using native tools (e.g., on X86 Linux)
TOOLPREFIX =

# Try to infer the correct TOOLPREFIX if not set
ifndef TOOLPREFIX
_ := $(shell if $(TOOLPREFIX)objdump -i 2>&1 | grep 'elf64-x86-64' >/dev/null 2>&1; \
	then echo ''; \
	else echo "***" 1>&2; \
	echo "*** Error: you do not have a toolchain capable of" 1>&2; \
	echo "*** producing 64-bit ELF files \(based on objdump -i\)." 1>&2; \
	echo "*** Specify your toolchain with `gmake TOOLPREFIX=my-prefix`." 1>&2; \
	echo "***" 1>&2; exit 1; fi)
endif

QEMU = qemu-system-x86_64


CARGO := $(TOOLPREFIX)cargo +nightly

# llvm stuff
ifneq ($(LLVM),)
	LLVM = 1
	CC := $(TOOLPREFIX)clang
	AS := $(CC) -c
	LD := $(TOOLPREFIX)ld.lld
	OBJCOPY := $(TOOLPREFIX)llvm-objcopy
	OBJDUMP := $(TOOLPREFIX)llvm-objdump
	AR := $(TOOLPREFIX)llvm-ar
	RANLIB := $(TOOLPREFIX)llvm-ranlib
	LINKER_FLAGS = -fuse-ld=lld

	WNOGCC =

ifneq ($(ANALYZER),)
	FUZZFLAGS = --analyze
endif

else
	LLVM = 0
	CC := $(TOOLPREFIX)gcc
	AS := $(TOOLPREFIX)gas
	LD := $(TOOLPREFIX)ld
	OBJCOPY := $(TOOLPREFIX)objcopy
	OBJDUMP := $(TOOLPREFIX)objdump
	AR := $(TOOLPREFIX)ar
	RANLIB := $(TOOLPREFIX)ranlib

	WNOGCC = -Wno-clobbered

ifneq ($(ANALYZER),)
	FUZZFLAGS = -fanalyzer -Wno-analyzer-va-arg-type-mismatch
endif

endif

ARCHNOFLAGS = -mno-sse -mno-red-zone -mno-avx -mno-avx2 -mno-mmx -mno-80387
WFLAGS = -Wall -Wextra -Wformat -Wnull-dereference -Warray-bounds -Wswitch -Wshadow -Werror
# TODO get rid of this
WNOFLAGS = -Wno-unused-parameter -Wno-infinite-recursion -Wno-pointer-arith -Wno-unused -Wno-pedantic -Wno-sign-compare

CFLAGS := -std=gnu11 -pipe -fno-pic -static -fno-builtin -ffreestanding \
				 -fno-strict-aliasing -nostdlib -Og -ggdb -fno-omit-frame-pointer \
				 -nostdinc $(ARCHNOFLAGS) $(WFLAGS) $(WNOFLAGS) $(WNOGCC) $(FUZZFLAGS) \
				 $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
RUSTFLAGS = -Ctarget-feature=-avx,-avx2,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2 -Crelocation-model=static -Cpanic=abort -Copt-level=0 -Ccode-model=kernel -Cno-redzone=true -Cincremental=true -Cembed-bitcode=n -Cforce-unwind-tables=n -Ccodegen-units=1 -Csymbol-mangling-version=v0 -Zfunction-sections=n
CARGO_FLAGS = -Zunstable-options --target x86_64-unknown-none
LDFLAGS :=

ifneq ($(RELEASE),)
	CFLAGS += -O2
	CARGO_RELEASE = --release
	RUSTFLAGS += -C opt-level=2 -Cembed-bitcode=yes
	KCFLAGS += -D__RELIX_KERNEL_DEBUG__=0
else
	RUSTFLAGS += -C opt-level=2
	KCFLAGS += -D__RELIX_KERNEL_DEBUG__=1
endif
ASFLAGS = -gdwarf-2 -Wa,-divide --mx86-used-note=no

CFLAGS += -m64 -march=x86-64 -mtls-direct-seg-refs -D__relix__=1
ASFLAGS += -m64 -march=x86-64 -mtls-direct-seg-refs

# FreeBSD ld wants ``elf_x86_64_fbsd''
ifeq ($(HOST_OS),FreeBSD)
	LDFLAGS += -m $(shell $(LD) -V | grep elf_x86_64 2>/dev/null | head -n 1)
else
	LDFLAGS += -melf_x86_64
endif
LDFLAGS += -z noexecstack -O1


# Disable PIE when possible (for Ubuntu 16.10 toolchain)
ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]no-pie'),)
CFLAGS += -fno-pie -no-pie
endif


CLEAN := $(filter clean, $(MAKECMDGOALS))

IVARS = -Iinclude -I.
# directories
TOOLSDIR = tools
BIN = bin
SYSROOT = sysroot

DIRECTORIES := $(BIN) $(SYSROOT)/$(BIN) $(BIN)/64

images: $(BIN)/fs.img $(BIN)/kernel

$(DIRECTORIES):
	mkdir -p $@

include lib/Makefile
include userspace/Makefile
include kernel/Makefile

default: $(CLEAN) .WAIT $(DIRECTORIES) .WAIT images


$(BIN)/mkfs: $(TOOLSDIR)/mkfs.c
	$(CC) $(LINKER_FLAGS) -Werror -Wall -ggdb -o $@ $^ -I.

# Prevent deletion of intermediate files, e.g. cat.o, after first build, so
# that disk image changes after first build are persistent until clean.  More
# details:
# http://www.gnu.org/software/make/manual/html_node/Chained-Rules.html
.PRECIOUS: $(BIN)/%.o


$(BIN)/fs.img: $(BIN)/mkfs $(UPROGS)
	./$(BIN)/mkfs $@ $(wildcard sysroot/root/*) $(wildcard sysroot/etc/*) $(UPROGS)

clean: user_cargo_clean kernel_cargo_clean
	@if [ -z "$(BIN)" ]; then exit 1; fi
	@if [ "x$(SYSROOT)" = "x" ]; then exit 1; fi
	@if [ "x$(KERNELDIR)" = "x" ]; then exit 1; fi
	@if [ "x$(BIN)" = "x$$HOME" ]; then exit 1; fi

	$(MAKE) -C $(UDIR)/openlibm clean

	rm -rf \
	$(SYSROOT)/bin/* \
	$(BIN)/mkfs \
	$(KERNELDIR)/include/autogenerated/* \
	$(BIN)/* \
	iso/kernel

GDBPORT := 25123

ifndef CPUS
CPUS := 2
endif
ifndef MEM
MEM := 224M
endif
QEMUOPTS = -drive file=$(BIN)/fs.img,index=1,media=disk,format=raw,if=ide,aio=native,cache.direct=on \
					 -enable-kvm -smp cpus=$(CPUS),cores=1,threads=1,sockets=$(CPUS) -m $(MEM) \
					 -vga std -device intel-hda $(QEMUEXTRA)

ifdef CONSOLE_LOG
	QEMUOPTS += -serial mon:stdio
endif
ISO = relix
iso: default
	cp $(BIN)/kernel iso/boot/
	grub-mkrescue -o $(BIN)/$(ISO).iso iso/

qemu-grub: iso
	$(QEMU) -cdrom $(BIN)/$(ISO).iso $(QEMUOPTS)

qemu: qemu-grub

qemu-gdb: iso
	$(QEMU) -cdrom $(BIN)/$(ISO).iso $(QEMUOPTS) -S -s $(GDBPORT)

format:
	@find . -iname *.h -o -iname *.c | xargs clang-format -style=file:.clang-format -i
